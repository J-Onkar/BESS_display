
Daly_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052f8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08005404  08005404  00006404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005580  08005580  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005580  08005580  00006580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005588  08005588  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005588  08005588  00006588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800558c  0800558c  0000658c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005590  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  2000005c  080055ec  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  080055ec  00007588  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108e1  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ecb  00000000  00000000  00017966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  0001a838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c78  00000000  00000000  0001b878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001993e  00000000  00000000  0001c4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001461e  00000000  00000000  00035e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dfaa  00000000  00000000  0004a44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d83f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046ec  00000000  00000000  000d843c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000dcb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080053ec 	.word	0x080053ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080053ec 	.word	0x080053ec

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <send_can_message>:

static inline uint16_t HTONS(uint16_t x) {
	return ((x << 8) | ((x >> 8) & 0xFF));
}

static void send_can_message() {
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0

	tx_hdr.ExtId = curr_id;
 8000162:	4b22      	ldr	r3, [pc, #136]	@ (80001ec <send_can_message+0x90>)
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	4a22      	ldr	r2, [pc, #136]	@ (80001f0 <send_can_message+0x94>)
 8000168:	6053      	str	r3, [r2, #4]
	switch (curr_id) {
 800016a:	4b20      	ldr	r3, [pc, #128]	@ (80001ec <send_can_message+0x90>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	4a21      	ldr	r2, [pc, #132]	@ (80001f4 <send_can_message+0x98>)
 8000170:	4293      	cmp	r3, r2
 8000172:	d01b      	beq.n	80001ac <send_can_message+0x50>
 8000174:	4a1f      	ldr	r2, [pc, #124]	@ (80001f4 <send_can_message+0x98>)
 8000176:	4293      	cmp	r3, r2
 8000178:	d81d      	bhi.n	80001b6 <send_can_message+0x5a>
 800017a:	4a1f      	ldr	r2, [pc, #124]	@ (80001f8 <send_can_message+0x9c>)
 800017c:	4293      	cmp	r3, r2
 800017e:	d011      	beq.n	80001a4 <send_can_message+0x48>
 8000180:	4a1d      	ldr	r2, [pc, #116]	@ (80001f8 <send_can_message+0x9c>)
 8000182:	4293      	cmp	r3, r2
 8000184:	d817      	bhi.n	80001b6 <send_can_message+0x5a>
 8000186:	4a1d      	ldr	r2, [pc, #116]	@ (80001fc <send_can_message+0xa0>)
 8000188:	4293      	cmp	r3, r2
 800018a:	d003      	beq.n	8000194 <send_can_message+0x38>
 800018c:	4a1c      	ldr	r2, [pc, #112]	@ (8000200 <send_can_message+0xa4>)
 800018e:	4293      	cmp	r3, r2
 8000190:	d004      	beq.n	800019c <send_can_message+0x40>
 8000192:	e010      	b.n	80001b6 <send_can_message+0x5a>
	case MSG_QUERY_90: {
		curr_id = MSG_QUERY_91;
 8000194:	4b15      	ldr	r3, [pc, #84]	@ (80001ec <send_can_message+0x90>)
 8000196:	4a1a      	ldr	r2, [pc, #104]	@ (8000200 <send_can_message+0xa4>)
 8000198:	601a      	str	r2, [r3, #0]
		break;
 800019a:	e00c      	b.n	80001b6 <send_can_message+0x5a>
	}

	case MSG_QUERY_91: {
		curr_id = MSG_QUERY_92;
 800019c:	4b13      	ldr	r3, [pc, #76]	@ (80001ec <send_can_message+0x90>)
 800019e:	4a16      	ldr	r2, [pc, #88]	@ (80001f8 <send_can_message+0x9c>)
 80001a0:	601a      	str	r2, [r3, #0]
		break;
 80001a2:	e008      	b.n	80001b6 <send_can_message+0x5a>
	}

	case MSG_QUERY_92: {
		curr_id = MSG_QUERY_93;
 80001a4:	4b11      	ldr	r3, [pc, #68]	@ (80001ec <send_can_message+0x90>)
 80001a6:	4a13      	ldr	r2, [pc, #76]	@ (80001f4 <send_can_message+0x98>)
 80001a8:	601a      	str	r2, [r3, #0]
		break;
 80001aa:	e004      	b.n	80001b6 <send_can_message+0x5a>
	}

	case MSG_QUERY_93: {
		curr_id = INVALID_ID;
 80001ac:	4b0f      	ldr	r3, [pc, #60]	@ (80001ec <send_can_message+0x90>)
 80001ae:	f04f 32ff 	mov.w	r2, #4294967295
 80001b2:	601a      	str	r2, [r3, #0]
		break;
 80001b4:	bf00      	nop
	}
	}

	uint32_t mailbox;
	uint8_t data[8] = { 0 };
 80001b6:	2300      	movs	r3, #0
 80001b8:	607b      	str	r3, [r7, #4]
 80001ba:	2300      	movs	r3, #0
 80001bc:	60bb      	str	r3, [r7, #8]

	if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) > 0) {
 80001be:	4811      	ldr	r0, [pc, #68]	@ (8000204 <send_can_message+0xa8>)
 80001c0:	f001 f9b3 	bl	800152a <HAL_CAN_GetTxMailboxesFreeLevel>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d00b      	beq.n	80001e2 <send_can_message+0x86>
		if (HAL_CAN_AddTxMessage(&hcan, &tx_hdr, data, &mailbox) != HAL_OK) {
 80001ca:	f107 030c 	add.w	r3, r7, #12
 80001ce:	1d3a      	adds	r2, r7, #4
 80001d0:	4907      	ldr	r1, [pc, #28]	@ (80001f0 <send_can_message+0x94>)
 80001d2:	480c      	ldr	r0, [pc, #48]	@ (8000204 <send_can_message+0xa8>)
 80001d4:	f001 f8da 	bl	800138c <HAL_CAN_AddTxMessage>
 80001d8:	4603      	mov	r3, r0
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d001      	beq.n	80001e2 <send_can_message+0x86>
			Error_Handler();
 80001de:	f000 fb8c 	bl	80008fa <Error_Handler>
		}
	}

}
 80001e2:	bf00      	nop
 80001e4:	3710      	adds	r7, #16
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	20000078 	.word	0x20000078
 80001f0:	20000114 	.word	0x20000114
 80001f4:	18930140 	.word	0x18930140
 80001f8:	18920140 	.word	0x18920140
 80001fc:	18900140 	.word	0x18900140
 8000200:	18910140 	.word	0x18910140
 8000204:	20000144 	.word	0x20000144

08000208 <tx_hdr_init>:

static void tx_hdr_init(void) {
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
	tx_hdr.DLC = 8;
 800020c:	4b09      	ldr	r3, [pc, #36]	@ (8000234 <tx_hdr_init+0x2c>)
 800020e:	2208      	movs	r2, #8
 8000210:	611a      	str	r2, [r3, #16]
	tx_hdr.ExtId = INVALID_ID;
 8000212:	4b08      	ldr	r3, [pc, #32]	@ (8000234 <tx_hdr_init+0x2c>)
 8000214:	f04f 32ff 	mov.w	r2, #4294967295
 8000218:	605a      	str	r2, [r3, #4]
	tx_hdr.IDE = CAN_ID_EXT;
 800021a:	4b06      	ldr	r3, [pc, #24]	@ (8000234 <tx_hdr_init+0x2c>)
 800021c:	2204      	movs	r2, #4
 800021e:	609a      	str	r2, [r3, #8]
	tx_hdr.RTR = CAN_RTR_DATA;
 8000220:	4b04      	ldr	r3, [pc, #16]	@ (8000234 <tx_hdr_init+0x2c>)
 8000222:	2200      	movs	r2, #0
 8000224:	60da      	str	r2, [r3, #12]
	tx_hdr.TransmitGlobalTime = DISABLE;
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <tx_hdr_init+0x2c>)
 8000228:	2200      	movs	r2, #0
 800022a:	751a      	strb	r2, [r3, #20]
}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	20000114 	.word	0x20000114

08000238 <update_udan_e1>:

static void update_udan_e1(uint8_t data[]) {
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]

}
 8000240:	bf00      	nop
 8000242:	370c      	adds	r7, #12
 8000244:	46bd      	mov	sp, r7
 8000246:	bc80      	pop	{r7}
 8000248:	4770      	bx	lr

0800024a <update_udan_e4>:

static void update_udan_e4(uint8_t data[]) {
 800024a:	b480      	push	{r7}
 800024c:	b083      	sub	sp, #12
 800024e:	af00      	add	r7, sp, #0
 8000250:	6078      	str	r0, [r7, #4]

}
 8000252:	bf00      	nop
 8000254:	370c      	adds	r7, #12
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr

0800025c <read_can_message>:

	(void) memcpy(msg93.gen_data, data, 8);

}

static void read_can_message(void) {
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0

	q_member_t *q_member = peek(&rx_queue);
 8000262:	4817      	ldr	r0, [pc, #92]	@ (80002c0 <read_can_message+0x64>)
 8000264:	f004 fbe7 	bl	8004a36 <peek>
 8000268:	6078      	str	r0, [r7, #4]

	if (q_member != NULL) {
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d022      	beq.n	80002b6 <read_can_message+0x5a>

		switch (q_member->can_id) {
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8000278:	4293      	cmp	r3, r2
 800027a:	d003      	beq.n	8000284 <read_can_message+0x28>
 800027c:	f5b3 7ff2 	cmp.w	r3, #484	@ 0x1e4
 8000280:	d00b      	beq.n	800029a <read_can_message+0x3e>
 8000282:	e015      	b.n	80002b0 <read_can_message+0x54>

		case UDAN_E1: {
			update_udan_e1(q_member->data);
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	3304      	adds	r3, #4
 8000288:	4618      	mov	r0, r3
 800028a:	f7ff ffd5 	bl	8000238 <update_udan_e1>
			tim1 = HAL_GetTick();
 800028e:	f000 fe6b 	bl	8000f68 <HAL_GetTick>
 8000292:	4603      	mov	r3, r0
 8000294:	4a0b      	ldr	r2, [pc, #44]	@ (80002c4 <read_can_message+0x68>)
 8000296:	6013      	str	r3, [r2, #0]
			break;
 8000298:	e00a      	b.n	80002b0 <read_can_message+0x54>
		}

		case UDAN_E4: {
			update_udan_e4(q_member->data);
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	3304      	adds	r3, #4
 800029e:	4618      	mov	r0, r3
 80002a0:	f7ff ffd3 	bl	800024a <update_udan_e4>
			tim2 = HAL_GetTick();
 80002a4:	f000 fe60 	bl	8000f68 <HAL_GetTick>
 80002a8:	4603      	mov	r3, r0
 80002aa:	4a07      	ldr	r2, [pc, #28]	@ (80002c8 <read_can_message+0x6c>)
 80002ac:	6013      	str	r3, [r2, #0]
			break;
 80002ae:	bf00      	nop
		}

		}
		dequeue(&rx_queue);
 80002b0:	4803      	ldr	r0, [pc, #12]	@ (80002c0 <read_can_message+0x64>)
 80002b2:	f004 fb8f 	bl	80049d4 <dequeue>

	}

}
 80002b6:	bf00      	nop
 80002b8:	3708      	adds	r7, #8
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	2000007c 	.word	0x2000007c
 80002c4:	2000012c 	.word	0x2000012c
 80002c8:	20000130 	.word	0x20000130

080002cc <timer_check>:

static void timer_check(void) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0

	if ((HAL_GetTick() - tim1) > 5000U) {
 80002d0:	f000 fe4a 	bl	8000f68 <HAL_GetTick>
 80002d4:	4602      	mov	r2, r0
 80002d6:	4b24      	ldr	r3, [pc, #144]	@ (8000368 <timer_check+0x9c>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	1ad3      	subs	r3, r2, r3
 80002dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d907      	bls.n	80002f4 <timer_check+0x28>
		reset_page1_display();
 80002e4:	f004 fad3 	bl	800488e <reset_page1_display>
		tim1 = HAL_GetTick();
 80002e8:	f000 fe3e 	bl	8000f68 <HAL_GetTick>
 80002ec:	4603      	mov	r3, r0
 80002ee:	4a1e      	ldr	r2, [pc, #120]	@ (8000368 <timer_check+0x9c>)
 80002f0:	6013      	str	r3, [r2, #0]
			(void) memset(&msg93, 0, sizeof(msg93_rsp_t));
			tim4 = HAL_GetTick();

		}
	}
}
 80002f2:	e037      	b.n	8000364 <timer_check+0x98>
	else if ((HAL_GetTick() - tim2) > 5000U) {
 80002f4:	f000 fe38 	bl	8000f68 <HAL_GetTick>
 80002f8:	4602      	mov	r2, r0
 80002fa:	4b1c      	ldr	r3, [pc, #112]	@ (800036c <timer_check+0xa0>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	1ad3      	subs	r3, r2, r3
 8000300:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000304:	4293      	cmp	r3, r2
 8000306:	d907      	bls.n	8000318 <timer_check+0x4c>
		reset_page2_display();
 8000308:	f004 face 	bl	80048a8 <reset_page2_display>
		tim2 = HAL_GetTick();
 800030c:	f000 fe2c 	bl	8000f68 <HAL_GetTick>
 8000310:	4603      	mov	r3, r0
 8000312:	4a16      	ldr	r2, [pc, #88]	@ (800036c <timer_check+0xa0>)
 8000314:	6013      	str	r3, [r2, #0]
}
 8000316:	e025      	b.n	8000364 <timer_check+0x98>
	else if ((HAL_GetTick() - tim3) > 5000U) {
 8000318:	f000 fe26 	bl	8000f68 <HAL_GetTick>
 800031c:	4602      	mov	r2, r0
 800031e:	4b14      	ldr	r3, [pc, #80]	@ (8000370 <timer_check+0xa4>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	1ad3      	subs	r3, r2, r3
 8000324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000328:	4293      	cmp	r3, r2
 800032a:	d907      	bls.n	800033c <timer_check+0x70>
		reset_page3_display();
 800032c:	f004 facc 	bl	80048c8 <reset_page3_display>
		tim3 = HAL_GetTick();
 8000330:	f000 fe1a 	bl	8000f68 <HAL_GetTick>
 8000334:	4603      	mov	r3, r0
 8000336:	4a0e      	ldr	r2, [pc, #56]	@ (8000370 <timer_check+0xa4>)
 8000338:	6013      	str	r3, [r2, #0]
}
 800033a:	e013      	b.n	8000364 <timer_check+0x98>
		if ((HAL_GetTick() - tim4) > 5000U) {
 800033c:	f000 fe14 	bl	8000f68 <HAL_GetTick>
 8000340:	4602      	mov	r2, r0
 8000342:	4b0c      	ldr	r3, [pc, #48]	@ (8000374 <timer_check+0xa8>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	1ad3      	subs	r3, r2, r3
 8000348:	f241 3288 	movw	r2, #5000	@ 0x1388
 800034c:	4293      	cmp	r3, r2
 800034e:	d909      	bls.n	8000364 <timer_check+0x98>
			(void) memset(&msg93, 0, sizeof(msg93_rsp_t));
 8000350:	2208      	movs	r2, #8
 8000352:	2100      	movs	r1, #0
 8000354:	4808      	ldr	r0, [pc, #32]	@ (8000378 <timer_check+0xac>)
 8000356:	f004 fc5f 	bl	8004c18 <memset>
			tim4 = HAL_GetTick();
 800035a:	f000 fe05 	bl	8000f68 <HAL_GetTick>
 800035e:	4603      	mov	r3, r0
 8000360:	4a04      	ldr	r2, [pc, #16]	@ (8000374 <timer_check+0xa8>)
 8000362:	6013      	str	r3, [r2, #0]
}
 8000364:	bf00      	nop
 8000366:	bd80      	pop	{r7, pc}
 8000368:	2000012c 	.word	0x2000012c
 800036c:	20000130 	.word	0x20000130
 8000370:	20000134 	.word	0x20000134
 8000374:	20000138 	.word	0x20000138
 8000378:	2000013c 	.word	0x2000013c

0800037c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM1) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a17      	ldr	r2, [pc, #92]	@ (80003e8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d105      	bne.n	800039a <HAL_TIM_PeriodElapsedCallback+0x1e>
		curr_id = MSG_QUERY_90;
 800038e:	4b17      	ldr	r3, [pc, #92]	@ (80003ec <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000390:	4a17      	ldr	r2, [pc, #92]	@ (80003f0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000392:	601a      	str	r2, [r3, #0]
		send_can_message();
 8000394:	f7ff fee2 	bl	800015c <send_can_message>
		if (htim->Instance == TIM3) {
			HAL_GPIO_TogglePin(Buzzer_pin_GPIO_Port, Buzzer_pin_Pin);
		}
	}

}
 8000398:	e021      	b.n	80003de <HAL_TIM_PeriodElapsedCallback+0x62>
	else if (htim->Instance == TIM2) {
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80003a2:	d113      	bne.n	80003cc <HAL_TIM_PeriodElapsedCallback+0x50>
		update_comm_status_label("Loss of Comm");
 80003a4:	4813      	ldr	r0, [pc, #76]	@ (80003f4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80003a6:	f004 f9ab 	bl	8004700 <update_comm_status_label>
		reset_display();
 80003aa:	f004 fa4b 	bl	8004844 <reset_display>
		if (htim3.State != HAL_TIM_STATE_READY) {
 80003ae:	4b12      	ldr	r3, [pc, #72]	@ (80003f8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80003b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d011      	beq.n	80003de <HAL_TIM_PeriodElapsedCallback+0x62>
			HAL_GPIO_WritePin(Buzzer_pin_GPIO_Port, Buzzer_pin_Pin,
 80003ba:	2200      	movs	r2, #0
 80003bc:	2120      	movs	r1, #32
 80003be:	480f      	ldr	r0, [pc, #60]	@ (80003fc <HAL_TIM_PeriodElapsedCallback+0x80>)
 80003c0:	f001 ff7a 	bl	80022b8 <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop_IT(&htim3);
 80003c4:	480c      	ldr	r0, [pc, #48]	@ (80003f8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80003c6:	f002 fcab 	bl	8002d20 <HAL_TIM_Base_Stop_IT>
}
 80003ca:	e008      	b.n	80003de <HAL_TIM_PeriodElapsedCallback+0x62>
		if (htim->Instance == TIM3) {
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a0b      	ldr	r2, [pc, #44]	@ (8000400 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d103      	bne.n	80003de <HAL_TIM_PeriodElapsedCallback+0x62>
			HAL_GPIO_TogglePin(Buzzer_pin_GPIO_Port, Buzzer_pin_Pin);
 80003d6:	2120      	movs	r1, #32
 80003d8:	4808      	ldr	r0, [pc, #32]	@ (80003fc <HAL_TIM_PeriodElapsedCallback+0x80>)
 80003da:	f001 ff85 	bl	80022e8 <HAL_GPIO_TogglePin>
}
 80003de:	bf00      	nop
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	40012c00 	.word	0x40012c00
 80003ec:	20000078 	.word	0x20000078
 80003f0:	18900140 	.word	0x18900140
 80003f4:	08005404 	.word	0x08005404
 80003f8:	2000020c 	.word	0x2000020c
 80003fc:	40010800 	.word	0x40010800
 8000400:	40000400 	.word	0x40000400

08000404 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
	if (curr_id != INVALID_ID) {
 800040c:	4b05      	ldr	r3, [pc, #20]	@ (8000424 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000414:	d001      	beq.n	800041a <HAL_CAN_TxMailbox0CompleteCallback+0x16>
		send_can_message();
 8000416:	f7ff fea1 	bl	800015c <send_can_message>
	}
}
 800041a:	bf00      	nop
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	20000078 	.word	0x20000078

08000428 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	if (curr_id != INVALID_ID) {
 8000430:	4b05      	ldr	r3, [pc, #20]	@ (8000448 <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000438:	d001      	beq.n	800043e <HAL_CAN_TxMailbox1CompleteCallback+0x16>
		send_can_message();
 800043a:	f7ff fe8f 	bl	800015c <send_can_message>
	}
}
 800043e:	bf00      	nop
 8000440:	3708      	adds	r7, #8
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	20000078 	.word	0x20000078

0800044c <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	if (curr_id != INVALID_ID) {
 8000454:	4b05      	ldr	r3, [pc, #20]	@ (800046c <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800045c:	d001      	beq.n	8000462 <HAL_CAN_TxMailbox2CompleteCallback+0x16>
		send_can_message();
 800045e:	f7ff fe7d 	bl	800015c <send_can_message>
	}
}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	20000078 	.word	0x20000078

08000470 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000470:	b580      	push	{r7, lr}
 8000472:	b08c      	sub	sp, #48	@ 0x30
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]

	CAN_RxHeaderTypeDef rx_hdr;
	uint8_t rx_data[8] = { 0 };
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	2300      	movs	r3, #0
 800047e:	613b      	str	r3, [r7, #16]

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_hdr, rx_data) != HAL_OK) {
 8000480:	f107 030c 	add.w	r3, r7, #12
 8000484:	f107 0214 	add.w	r2, r7, #20
 8000488:	2100      	movs	r1, #0
 800048a:	6878      	ldr	r0, [r7, #4]
 800048c:	f001 f881 	bl	8001592 <HAL_CAN_GetRxMessage>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
		Error_Handler();
 8000496:	f000 fa30 	bl	80008fa <Error_Handler>
	}

	enqueue(&rx_queue, rx_hdr.StdId, rx_data);
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	f107 020c 	add.w	r2, r7, #12
 80004a0:	4619      	mov	r1, r3
 80004a2:	4803      	ldr	r0, [pc, #12]	@ (80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80004a4:	f004 fa5d 	bl	8004962 <enqueue>
}
 80004a8:	bf00      	nop
 80004aa:	3730      	adds	r7, #48	@ 0x30
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	2000007c 	.word	0x2000007c

080004b4 <app_init>:

void app_init(void) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	curr_id = INVALID_ID;
 80004b8:	4b13      	ldr	r3, [pc, #76]	@ (8000508 <app_init+0x54>)
 80004ba:	f04f 32ff 	mov.w	r2, #4294967295
 80004be:	601a      	str	r2, [r3, #0]
	tx_hdr_init();
 80004c0:	f7ff fea2 	bl	8000208 <tx_hdr_init>
	queue_init(&rx_queue, queue_arr, QUEUE_LEN);
 80004c4:	220c      	movs	r2, #12
 80004c6:	4911      	ldr	r1, [pc, #68]	@ (800050c <app_init+0x58>)
 80004c8:	4811      	ldr	r0, [pc, #68]	@ (8000510 <app_init+0x5c>)
 80004ca:	f004 fa0d 	bl	80048e8 <queue_init>
	nextion_disp_init();
 80004ce:	f004 f813 	bl	80044f8 <nextion_disp_init>
	reset_display();
 80004d2:	f004 f9b7 	bl	8004844 <reset_display>
	tim1 = HAL_GetTick();
 80004d6:	f000 fd47 	bl	8000f68 <HAL_GetTick>
 80004da:	4603      	mov	r3, r0
 80004dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000514 <app_init+0x60>)
 80004de:	6013      	str	r3, [r2, #0]
	tim2 = HAL_GetTick();
 80004e0:	f000 fd42 	bl	8000f68 <HAL_GetTick>
 80004e4:	4603      	mov	r3, r0
 80004e6:	4a0c      	ldr	r2, [pc, #48]	@ (8000518 <app_init+0x64>)
 80004e8:	6013      	str	r3, [r2, #0]
	tim3 = HAL_GetTick();
 80004ea:	f000 fd3d 	bl	8000f68 <HAL_GetTick>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a0a      	ldr	r2, [pc, #40]	@ (800051c <app_init+0x68>)
 80004f2:	6013      	str	r3, [r2, #0]
	tim4 = HAL_GetTick();
 80004f4:	f000 fd38 	bl	8000f68 <HAL_GetTick>
 80004f8:	4603      	mov	r3, r0
 80004fa:	4a09      	ldr	r2, [pc, #36]	@ (8000520 <app_init+0x6c>)
 80004fc:	6013      	str	r3, [r2, #0]
	update_comm_status_label("");
 80004fe:	4809      	ldr	r0, [pc, #36]	@ (8000524 <app_init+0x70>)
 8000500:	f004 f8fe 	bl	8004700 <update_comm_status_label>
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000078 	.word	0x20000078
 800050c:	20000084 	.word	0x20000084
 8000510:	2000007c 	.word	0x2000007c
 8000514:	2000012c 	.word	0x2000012c
 8000518:	20000130 	.word	0x20000130
 800051c:	20000134 	.word	0x20000134
 8000520:	20000138 	.word	0x20000138
 8000524:	08005414 	.word	0x08005414

08000528 <can_init>:

void can_init(void) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b08a      	sub	sp, #40	@ 0x28
 800052c:	af00      	add	r7, sp, #0

	CAN_FilterTypeDef filter1;

	filter1.FilterActivation = CAN_FILTER_ENABLE;
 800052e:	2301      	movs	r3, #1
 8000530:	623b      	str	r3, [r7, #32]
	filter1.FilterBank = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]
	filter1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000536:	2300      	movs	r3, #0
 8000538:	613b      	str	r3, [r7, #16]
	filter1.FilterMode = CAN_FILTERMODE_IDMASK;
 800053a:	2300      	movs	r3, #0
 800053c:	61bb      	str	r3, [r7, #24]
	filter1.FilterScale = CAN_FILTERSCALE_32BIT;
 800053e:	2301      	movs	r3, #1
 8000540:	61fb      	str	r3, [r7, #28]
	filter1.FilterIdHigh = 0x3C00;
 8000542:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000546:	603b      	str	r3, [r7, #0]
	filter1.FilterIdLow = 0x0000;
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
	filter1.FilterMaskIdHigh = 0xFF00;
 800054c:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000550:	60bb      	str	r3, [r7, #8]
	filter1.FilterMaskIdLow = 0x0000;
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]


	if (HAL_CAN_ConfigFilter(&hcan, &filter1) != HAL_OK) {
 8000556:	463b      	mov	r3, r7
 8000558:	4619      	mov	r1, r3
 800055a:	4813      	ldr	r0, [pc, #76]	@ (80005a8 <can_init+0x80>)
 800055c:	f000 fe09 	bl	8001172 <HAL_CAN_ConfigFilter>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <can_init+0x42>
		Error_Handler();
 8000566:	f000 f9c8 	bl	80008fa <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 800056a:	2102      	movs	r1, #2
 800056c:	480e      	ldr	r0, [pc, #56]	@ (80005a8 <can_init+0x80>)
 800056e:	f001 f931 	bl	80017d4 <HAL_CAN_ActivateNotification>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <can_init+0x54>
			!= HAL_OK) {
		Error_Handler();
 8000578:	f000 f9bf 	bl	80008fa <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_TX_MAILBOX_EMPTY)
 800057c:	2101      	movs	r1, #1
 800057e:	480a      	ldr	r0, [pc, #40]	@ (80005a8 <can_init+0x80>)
 8000580:	f001 f928 	bl	80017d4 <HAL_CAN_ActivateNotification>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <can_init+0x66>
			!= HAL_OK) {
		Error_Handler();
 800058a:	f000 f9b6 	bl	80008fa <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 800058e:	4806      	ldr	r0, [pc, #24]	@ (80005a8 <can_init+0x80>)
 8000590:	f000 feb8 	bl	8001304 <HAL_CAN_Start>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <can_init+0x76>
		Error_Handler();
 800059a:	f000 f9ae 	bl	80008fa <Error_Handler>
	}

}
 800059e:	bf00      	nop
 80005a0:	3728      	adds	r7, #40	@ 0x28
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000144 	.word	0x20000144

080005ac <timer_init>:

void timer_init(void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0

	if (HAL_TIM_Base_Start_IT(&htim1)) {
 80005b0:	480b      	ldr	r0, [pc, #44]	@ (80005e0 <timer_init+0x34>)
 80005b2:	f002 fb63 	bl	8002c7c <HAL_TIM_Base_Start_IT>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <timer_init+0x14>
		Error_Handler();
 80005bc:	f000 f99d 	bl	80008fa <Error_Handler>
	}

	__HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 80005c0:	4b08      	ldr	r3, [pc, #32]	@ (80005e4 <timer_init+0x38>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f06f 0201 	mvn.w	r2, #1
 80005c8:	611a      	str	r2, [r3, #16]

	if (HAL_TIM_Base_Start_IT(&htim2)) {
 80005ca:	4806      	ldr	r0, [pc, #24]	@ (80005e4 <timer_init+0x38>)
 80005cc:	f002 fb56 	bl	8002c7c <HAL_TIM_Base_Start_IT>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <timer_init+0x2e>
		Error_Handler();
 80005d6:	f000 f990 	bl	80008fa <Error_Handler>
	}

}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	2000017c 	.word	0x2000017c
 80005e4:	200001c4 	.word	0x200001c4

080005e8 <app_handler>:

void app_handler(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0

	while (1) {
		timer_check();
 80005ec:	f7ff fe6e 	bl	80002cc <timer_check>

		if (!is_empty(&rx_queue)) {
 80005f0:	480a      	ldr	r0, [pc, #40]	@ (800061c <app_handler+0x34>)
 80005f2:	f004 f994 	bl	800491e <is_empty>
 80005f6:	4603      	mov	r3, r0
 80005f8:	f083 0301 	eor.w	r3, r3, #1
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d008      	beq.n	8000614 <app_handler+0x2c>
			read_can_message();
 8000602:	f7ff fe2b 	bl	800025c <read_can_message>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000606:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <app_handler+0x38>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2200      	movs	r2, #0
 800060c:	625a      	str	r2, [r3, #36]	@ 0x24
			update_comm_status_label("");
 800060e:	4805      	ldr	r0, [pc, #20]	@ (8000624 <app_handler+0x3c>)
 8000610:	f004 f876 	bl	8004700 <update_comm_status_label>
		}
		HAL_IWDG_Refresh(&hiwdg);
 8000614:	4804      	ldr	r0, [pc, #16]	@ (8000628 <app_handler+0x40>)
 8000616:	f001 fec2 	bl	800239e <HAL_IWDG_Refresh>
		timer_check();
 800061a:	e7e7      	b.n	80005ec <app_handler+0x4>
 800061c:	2000007c 	.word	0x2000007c
 8000620:	200001c4 	.word	0x200001c4
 8000624:	08005414 	.word	0x08005414
 8000628:	2000016c 	.word	0x2000016c

0800062c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000630:	4b17      	ldr	r3, [pc, #92]	@ (8000690 <MX_CAN_Init+0x64>)
 8000632:	4a18      	ldr	r2, [pc, #96]	@ (8000694 <MX_CAN_Init+0x68>)
 8000634:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8000636:	4b16      	ldr	r3, [pc, #88]	@ (8000690 <MX_CAN_Init+0x64>)
 8000638:	2208      	movs	r2, #8
 800063a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800063c:	4b14      	ldr	r3, [pc, #80]	@ (8000690 <MX_CAN_Init+0x64>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000642:	4b13      	ldr	r3, [pc, #76]	@ (8000690 <MX_CAN_Init+0x64>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000648:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <MX_CAN_Init+0x64>)
 800064a:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 800064e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000650:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <MX_CAN_Init+0x64>)
 8000652:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000656:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000658:	4b0d      	ldr	r3, [pc, #52]	@ (8000690 <MX_CAN_Init+0x64>)
 800065a:	2200      	movs	r2, #0
 800065c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800065e:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <MX_CAN_Init+0x64>)
 8000660:	2200      	movs	r2, #0
 8000662:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000664:	4b0a      	ldr	r3, [pc, #40]	@ (8000690 <MX_CAN_Init+0x64>)
 8000666:	2200      	movs	r2, #0
 8000668:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800066a:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <MX_CAN_Init+0x64>)
 800066c:	2200      	movs	r2, #0
 800066e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000670:	4b07      	ldr	r3, [pc, #28]	@ (8000690 <MX_CAN_Init+0x64>)
 8000672:	2200      	movs	r2, #0
 8000674:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000676:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <MX_CAN_Init+0x64>)
 8000678:	2200      	movs	r2, #0
 800067a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800067c:	4804      	ldr	r0, [pc, #16]	@ (8000690 <MX_CAN_Init+0x64>)
 800067e:	f000 fc7d 	bl	8000f7c <HAL_CAN_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000688:	f000 f937 	bl	80008fa <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000144 	.word	0x20000144
 8000694:	40006400 	.word	0x40006400

08000698 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0310 	add.w	r3, r7, #16
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a2c      	ldr	r2, [pc, #176]	@ (8000764 <HAL_CAN_MspInit+0xcc>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d151      	bne.n	800075c <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000768 <HAL_CAN_MspInit+0xd0>)
 80006ba:	69db      	ldr	r3, [r3, #28]
 80006bc:	4a2a      	ldr	r2, [pc, #168]	@ (8000768 <HAL_CAN_MspInit+0xd0>)
 80006be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006c2:	61d3      	str	r3, [r2, #28]
 80006c4:	4b28      	ldr	r3, [pc, #160]	@ (8000768 <HAL_CAN_MspInit+0xd0>)
 80006c6:	69db      	ldr	r3, [r3, #28]
 80006c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d0:	4b25      	ldr	r3, [pc, #148]	@ (8000768 <HAL_CAN_MspInit+0xd0>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a24      	ldr	r2, [pc, #144]	@ (8000768 <HAL_CAN_MspInit+0xd0>)
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b22      	ldr	r3, [pc, #136]	@ (8000768 <HAL_CAN_MspInit+0xd0>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0304 	and.w	r3, r3, #4
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80006e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	f107 0310 	add.w	r3, r7, #16
 80006fa:	4619      	mov	r1, r3
 80006fc:	481b      	ldr	r0, [pc, #108]	@ (800076c <HAL_CAN_MspInit+0xd4>)
 80006fe:	f001 fc57 	bl	8001fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000702:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000706:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000708:	2302      	movs	r3, #2
 800070a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070c:	2303      	movs	r3, #3
 800070e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	4619      	mov	r1, r3
 8000716:	4815      	ldr	r0, [pc, #84]	@ (800076c <HAL_CAN_MspInit+0xd4>)
 8000718:	f001 fc4a 	bl	8001fb0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800071c:	2200      	movs	r2, #0
 800071e:	2100      	movs	r1, #0
 8000720:	2013      	movs	r0, #19
 8000722:	f001 fb5c 	bl	8001dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000726:	2013      	movs	r0, #19
 8000728:	f001 fb75 	bl	8001e16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	2100      	movs	r1, #0
 8000730:	2014      	movs	r0, #20
 8000732:	f001 fb54 	bl	8001dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000736:	2014      	movs	r0, #20
 8000738:	f001 fb6d 	bl	8001e16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800073c:	2200      	movs	r2, #0
 800073e:	2100      	movs	r1, #0
 8000740:	2015      	movs	r0, #21
 8000742:	f001 fb4c 	bl	8001dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000746:	2015      	movs	r0, #21
 8000748:	f001 fb65 	bl	8001e16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 800074c:	2200      	movs	r2, #0
 800074e:	2100      	movs	r1, #0
 8000750:	2016      	movs	r0, #22
 8000752:	f001 fb44 	bl	8001dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000756:	2016      	movs	r0, #22
 8000758:	f001 fb5d 	bl	8001e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800075c:	bf00      	nop
 800075e:	3720      	adds	r7, #32
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40006400 	.word	0x40006400
 8000768:	40021000 	.word	0x40021000
 800076c:	40010800 	.word	0x40010800

08000770 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 0310 	add.w	r3, r7, #16
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000784:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <MX_GPIO_Init+0x8c>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a1c      	ldr	r2, [pc, #112]	@ (80007fc <MX_GPIO_Init+0x8c>)
 800078a:	f043 0310 	orr.w	r3, r3, #16
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b1a      	ldr	r3, [pc, #104]	@ (80007fc <MX_GPIO_Init+0x8c>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f003 0310 	and.w	r3, r3, #16
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079c:	4b17      	ldr	r3, [pc, #92]	@ (80007fc <MX_GPIO_Init+0x8c>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a16      	ldr	r2, [pc, #88]	@ (80007fc <MX_GPIO_Init+0x8c>)
 80007a2:	f043 0320 	orr.w	r3, r3, #32
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <MX_GPIO_Init+0x8c>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f003 0320 	and.w	r3, r3, #32
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b4:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <MX_GPIO_Init+0x8c>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	4a10      	ldr	r2, [pc, #64]	@ (80007fc <MX_GPIO_Init+0x8c>)
 80007ba:	f043 0304 	orr.w	r3, r3, #4
 80007be:	6193      	str	r3, [r2, #24]
 80007c0:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <MX_GPIO_Init+0x8c>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	f003 0304 	and.w	r3, r3, #4
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_pin_GPIO_Port, Buzzer_pin_Pin, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2120      	movs	r1, #32
 80007d0:	480b      	ldr	r0, [pc, #44]	@ (8000800 <MX_GPIO_Init+0x90>)
 80007d2:	f001 fd71 	bl	80022b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_pin_Pin;
 80007d6:	2320      	movs	r3, #32
 80007d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2302      	movs	r3, #2
 80007e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Buzzer_pin_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 0310 	add.w	r3, r7, #16
 80007ea:	4619      	mov	r1, r3
 80007ec:	4804      	ldr	r0, [pc, #16]	@ (8000800 <MX_GPIO_Init+0x90>)
 80007ee:	f001 fbdf 	bl	8001fb0 <HAL_GPIO_Init>

}
 80007f2:	bf00      	nop
 80007f4:	3720      	adds	r7, #32
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000
 8000800:	40010800 	.word	0x40010800

08000804 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000808:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <MX_IWDG_Init+0x2c>)
 800080a:	4a0a      	ldr	r2, [pc, #40]	@ (8000834 <MX_IWDG_Init+0x30>)
 800080c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 800080e:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <MX_IWDG_Init+0x2c>)
 8000810:	2203      	movs	r2, #3
 8000812:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4000;
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <MX_IWDG_Init+0x2c>)
 8000816:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800081a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	@ (8000830 <MX_IWDG_Init+0x2c>)
 800081e:	f001 fd7c 	bl	800231a <HAL_IWDG_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000828:	f000 f867 	bl	80008fa <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	2000016c 	.word	0x2000016c
 8000834:	40003000 	.word	0x40003000

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800083c:	f000 fb3c 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000840:	f000 f818 	bl	8000874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000844:	f7ff ff94 	bl	8000770 <MX_GPIO_Init>
  MX_CAN_Init();
 8000848:	f7ff fef0 	bl	800062c <MX_CAN_Init>
  MX_USART1_UART_Init();
 800084c:	f000 fa90 	bl	8000d70 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000850:	f000 f944 	bl	8000adc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000854:	f000 f994 	bl	8000b80 <MX_TIM2_Init>
  MX_IWDG_Init();
 8000858:	f7ff ffd4 	bl	8000804 <MX_IWDG_Init>
  MX_TIM3_Init();
 800085c:	f000 f9de 	bl	8000c1c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  app_init();
 8000860:	f7ff fe28 	bl	80004b4 <app_init>
  can_init();
 8000864:	f7ff fe60 	bl	8000528 <can_init>
  timer_init();
 8000868:	f7ff fea0 	bl	80005ac <timer_init>
  app_handler();
 800086c:	f7ff febc 	bl	80005e8 <app_handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <main+0x38>

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b090      	sub	sp, #64	@ 0x40
 8000878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	f107 0318 	add.w	r3, r7, #24
 800087e:	2228      	movs	r2, #40	@ 0x28
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f004 f9c8 	bl	8004c18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000896:	230a      	movs	r3, #10
 8000898:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800089a:	2301      	movs	r3, #1
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800089e:	2310      	movs	r3, #16
 80008a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008a2:	2301      	movs	r3, #1
 80008a4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a6:	2302      	movs	r3, #2
 80008a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80008aa:	2300      	movs	r3, #0
 80008ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80008ae:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80008b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b4:	f107 0318 	add.w	r3, r7, #24
 80008b8:	4618      	mov	r0, r3
 80008ba:	f001 fd7f 	bl	80023bc <HAL_RCC_OscConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80008c4:	f000 f819 	bl	80008fa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c8:	230f      	movs	r3, #15
 80008ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008cc:	2302      	movs	r3, #2
 80008ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2102      	movs	r1, #2
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 ffec 	bl	80028c0 <HAL_RCC_ClockConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80008ee:	f000 f804 	bl	80008fa <Error_Handler>
  }
}
 80008f2:	bf00      	nop
 80008f4:	3740      	adds	r7, #64	@ 0x40
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fe:	b672      	cpsid	i
}
 8000900:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000902:	bf00      	nop
 8000904:	e7fd      	b.n	8000902 <Error_Handler+0x8>
	...

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800090e:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <HAL_MspInit+0x5c>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	4a14      	ldr	r2, [pc, #80]	@ (8000964 <HAL_MspInit+0x5c>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6193      	str	r3, [r2, #24]
 800091a:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <HAL_MspInit+0x5c>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <HAL_MspInit+0x5c>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	4a0e      	ldr	r2, [pc, #56]	@ (8000964 <HAL_MspInit+0x5c>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000930:	61d3      	str	r3, [r2, #28]
 8000932:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <HAL_MspInit+0x5c>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800093e:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <HAL_MspInit+0x60>)
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	4a04      	ldr	r2, [pc, #16]	@ (8000968 <HAL_MspInit+0x60>)
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	40021000 	.word	0x40021000
 8000968:	40010000 	.word	0x40010000

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <NMI_Handler+0x4>

08000974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <MemManage_Handler+0x4>

08000984 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <UsageFault_Handler+0x4>

08000994 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr

080009a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr

080009ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 fac2 	bl	8000f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80009c8:	4802      	ldr	r0, [pc, #8]	@ (80009d4 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80009ca:	f000 ff28 	bl	800181e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000144 	.word	0x20000144

080009d8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80009dc:	4802      	ldr	r0, [pc, #8]	@ (80009e8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80009de:	f000 ff1e 	bl	800181e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000144 	.word	0x20000144

080009ec <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80009f0:	4802      	ldr	r0, [pc, #8]	@ (80009fc <CAN1_RX1_IRQHandler+0x10>)
 80009f2:	f000 ff14 	bl	800181e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000144 	.word	0x20000144

08000a00 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000a04:	4802      	ldr	r0, [pc, #8]	@ (8000a10 <CAN1_SCE_IRQHandler+0x10>)
 8000a06:	f000 ff0a 	bl	800181e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000144 	.word	0x20000144

08000a14 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a18:	4802      	ldr	r0, [pc, #8]	@ (8000a24 <TIM1_UP_IRQHandler+0x10>)
 8000a1a:	f002 f9af 	bl	8002d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	2000017c 	.word	0x2000017c

08000a28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a2c:	4802      	ldr	r0, [pc, #8]	@ (8000a38 <TIM2_IRQHandler+0x10>)
 8000a2e:	f002 f9a5 	bl	8002d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200001c4 	.word	0x200001c4

08000a3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a40:	4802      	ldr	r0, [pc, #8]	@ (8000a4c <TIM3_IRQHandler+0x10>)
 8000a42:	f002 f99b 	bl	8002d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	2000020c 	.word	0x2000020c

08000a50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a54:	4802      	ldr	r0, [pc, #8]	@ (8000a60 <USART1_IRQHandler+0x10>)
 8000a56:	f002 fde5 	bl	8003624 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000254 	.word	0x20000254

08000a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a6c:	4a14      	ldr	r2, [pc, #80]	@ (8000ac0 <_sbrk+0x5c>)
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <_sbrk+0x60>)
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a78:	4b13      	ldr	r3, [pc, #76]	@ (8000ac8 <_sbrk+0x64>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d102      	bne.n	8000a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a80:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <_sbrk+0x64>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	@ (8000acc <_sbrk+0x68>)
 8000a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a86:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <_sbrk+0x64>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d207      	bcs.n	8000aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a94:	f004 f8d8 	bl	8004c48 <__errno>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	e009      	b.n	8000ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa4:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <_sbrk+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aaa:	4b07      	ldr	r3, [pc, #28]	@ (8000ac8 <_sbrk+0x64>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4a05      	ldr	r2, [pc, #20]	@ (8000ac8 <_sbrk+0x64>)
 8000ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3718      	adds	r7, #24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20005000 	.word	0x20005000
 8000ac4:	00000400 	.word	0x00000400
 8000ac8:	20000178 	.word	0x20000178
 8000acc:	20000588 	.word	0x20000588

08000ad0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ae2:	f107 0308 	add.w	r3, r7, #8
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af0:	463b      	mov	r3, r7
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000af8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b78 <MX_TIM1_Init+0x9c>)
 8000afa:	4a20      	ldr	r2, [pc, #128]	@ (8000b7c <MX_TIM1_Init+0xa0>)
 8000afc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400;
 8000afe:	4b1e      	ldr	r3, [pc, #120]	@ (8000b78 <MX_TIM1_Init+0x9c>)
 8000b00:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 8000b04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b06:	4b1c      	ldr	r3, [pc, #112]	@ (8000b78 <MX_TIM1_Init+0x9c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8000b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b78 <MX_TIM1_Init+0x9c>)
 8000b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000b12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b14:	4b18      	ldr	r3, [pc, #96]	@ (8000b78 <MX_TIM1_Init+0x9c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b1a:	4b17      	ldr	r3, [pc, #92]	@ (8000b78 <MX_TIM1_Init+0x9c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b20:	4b15      	ldr	r3, [pc, #84]	@ (8000b78 <MX_TIM1_Init+0x9c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b26:	4814      	ldr	r0, [pc, #80]	@ (8000b78 <MX_TIM1_Init+0x9c>)
 8000b28:	f002 f858 	bl	8002bdc <HAL_TIM_Base_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000b32:	f7ff fee2 	bl	80008fa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b3c:	f107 0308 	add.w	r3, r7, #8
 8000b40:	4619      	mov	r1, r3
 8000b42:	480d      	ldr	r0, [pc, #52]	@ (8000b78 <MX_TIM1_Init+0x9c>)
 8000b44:	f002 fa22 	bl	8002f8c <HAL_TIM_ConfigClockSource>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000b4e:	f7ff fed4 	bl	80008fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4806      	ldr	r0, [pc, #24]	@ (8000b78 <MX_TIM1_Init+0x9c>)
 8000b60:	f002 fbf8 	bl	8003354 <HAL_TIMEx_MasterConfigSynchronization>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000b6a:	f7ff fec6 	bl	80008fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	2000017c 	.word	0x2000017c
 8000b7c:	40012c00 	.word	0x40012c00

08000b80 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b86:	f107 0308 	add.w	r3, r7, #8
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b94:	463b      	mov	r3, r7
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c18 <MX_TIM2_Init+0x98>)
 8000b9e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ba2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64000;
 8000ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c18 <MX_TIM2_Init+0x98>)
 8000ba6:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 8000baa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <MX_TIM2_Init+0x98>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <MX_TIM2_Init+0x98>)
 8000bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000bb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bba:	4b17      	ldr	r3, [pc, #92]	@ (8000c18 <MX_TIM2_Init+0x98>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc0:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <MX_TIM2_Init+0x98>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bc6:	4814      	ldr	r0, [pc, #80]	@ (8000c18 <MX_TIM2_Init+0x98>)
 8000bc8:	f002 f808 	bl	8002bdc <HAL_TIM_Base_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000bd2:	f7ff fe92 	bl	80008fa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bdc:	f107 0308 	add.w	r3, r7, #8
 8000be0:	4619      	mov	r1, r3
 8000be2:	480d      	ldr	r0, [pc, #52]	@ (8000c18 <MX_TIM2_Init+0x98>)
 8000be4:	f002 f9d2 	bl	8002f8c <HAL_TIM_ConfigClockSource>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bee:	f7ff fe84 	bl	80008fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4806      	ldr	r0, [pc, #24]	@ (8000c18 <MX_TIM2_Init+0x98>)
 8000c00:	f002 fba8 	bl	8003354 <HAL_TIMEx_MasterConfigSynchronization>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c0a:	f7ff fe76 	bl	80008fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200001c4 	.word	0x200001c4

08000c1c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c22:	f107 0308 	add.w	r3, r7, #8
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c30:	463b      	mov	r3, r7
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c38:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb0 <MX_TIM3_Init+0x94>)
 8000c3a:	4a1e      	ldr	r2, [pc, #120]	@ (8000cb4 <MX_TIM3_Init+0x98>)
 8000c3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000;
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb0 <MX_TIM3_Init+0x94>)
 8000c40:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 8000c44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c46:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb0 <MX_TIM3_Init+0x94>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8000c4c:	4b18      	ldr	r3, [pc, #96]	@ (8000cb0 <MX_TIM3_Init+0x94>)
 8000c4e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000c52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c54:	4b16      	ldr	r3, [pc, #88]	@ (8000cb0 <MX_TIM3_Init+0x94>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5a:	4b15      	ldr	r3, [pc, #84]	@ (8000cb0 <MX_TIM3_Init+0x94>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c60:	4813      	ldr	r0, [pc, #76]	@ (8000cb0 <MX_TIM3_Init+0x94>)
 8000c62:	f001 ffbb 	bl	8002bdc <HAL_TIM_Base_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000c6c:	f7ff fe45 	bl	80008fa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	480c      	ldr	r0, [pc, #48]	@ (8000cb0 <MX_TIM3_Init+0x94>)
 8000c7e:	f002 f985 	bl	8002f8c <HAL_TIM_ConfigClockSource>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c88:	f7ff fe37 	bl	80008fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c94:	463b      	mov	r3, r7
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_TIM3_Init+0x94>)
 8000c9a:	f002 fb5b 	bl	8003354 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000ca4:	f7ff fe29 	bl	80008fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	2000020c 	.word	0x2000020c
 8000cb4:	40000400 	.word	0x40000400

08000cb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a27      	ldr	r2, [pc, #156]	@ (8000d64 <HAL_TIM_Base_MspInit+0xac>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d114      	bne.n	8000cf4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cca:	4b27      	ldr	r3, [pc, #156]	@ (8000d68 <HAL_TIM_Base_MspInit+0xb0>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	4a26      	ldr	r2, [pc, #152]	@ (8000d68 <HAL_TIM_Base_MspInit+0xb0>)
 8000cd0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000cd4:	6193      	str	r3, [r2, #24]
 8000cd6:	4b24      	ldr	r3, [pc, #144]	@ (8000d68 <HAL_TIM_Base_MspInit+0xb0>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2019      	movs	r0, #25
 8000ce8:	f001 f879 	bl	8001dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000cec:	2019      	movs	r0, #25
 8000cee:	f001 f892 	bl	8001e16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000cf2:	e032      	b.n	8000d5a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM2)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cfc:	d114      	bne.n	8000d28 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000d68 <HAL_TIM_Base_MspInit+0xb0>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	4a19      	ldr	r2, [pc, #100]	@ (8000d68 <HAL_TIM_Base_MspInit+0xb0>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	61d3      	str	r3, [r2, #28]
 8000d0a:	4b17      	ldr	r3, [pc, #92]	@ (8000d68 <HAL_TIM_Base_MspInit+0xb0>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	201c      	movs	r0, #28
 8000d1c:	f001 f85f 	bl	8001dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d20:	201c      	movs	r0, #28
 8000d22:	f001 f878 	bl	8001e16 <HAL_NVIC_EnableIRQ>
}
 8000d26:	e018      	b.n	8000d5a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0f      	ldr	r2, [pc, #60]	@ (8000d6c <HAL_TIM_Base_MspInit+0xb4>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d113      	bne.n	8000d5a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d32:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <HAL_TIM_Base_MspInit+0xb0>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	4a0c      	ldr	r2, [pc, #48]	@ (8000d68 <HAL_TIM_Base_MspInit+0xb0>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	61d3      	str	r3, [r2, #28]
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d68 <HAL_TIM_Base_MspInit+0xb0>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	201d      	movs	r0, #29
 8000d50:	f001 f845 	bl	8001dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d54:	201d      	movs	r0, #29
 8000d56:	f001 f85e 	bl	8001e16 <HAL_NVIC_EnableIRQ>
}
 8000d5a:	bf00      	nop
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40012c00 	.word	0x40012c00
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	40000400 	.word	0x40000400

08000d70 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d74:	4b11      	ldr	r3, [pc, #68]	@ (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d76:	4a12      	ldr	r2, [pc, #72]	@ (8000dc0 <MX_USART1_UART_Init+0x50>)
 8000d78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d7a:	4b10      	ldr	r3, [pc, #64]	@ (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d7c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d94:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d96:	220c      	movs	r2, #12
 8000d98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000da6:	4805      	ldr	r0, [pc, #20]	@ (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000da8:	f002 fb44 	bl	8003434 <HAL_UART_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000db2:	f7ff fda2 	bl	80008fa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000254 	.word	0x20000254
 8000dc0:	40013800 	.word	0x40013800

08000dc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a20      	ldr	r2, [pc, #128]	@ (8000e60 <HAL_UART_MspInit+0x9c>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d139      	bne.n	8000e58 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000de4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e64 <HAL_UART_MspInit+0xa0>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a1e      	ldr	r2, [pc, #120]	@ (8000e64 <HAL_UART_MspInit+0xa0>)
 8000dea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dee:	6193      	str	r3, [r2, #24]
 8000df0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e64 <HAL_UART_MspInit+0xa0>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	4b19      	ldr	r3, [pc, #100]	@ (8000e64 <HAL_UART_MspInit+0xa0>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a18      	ldr	r2, [pc, #96]	@ (8000e64 <HAL_UART_MspInit+0xa0>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b16      	ldr	r3, [pc, #88]	@ (8000e64 <HAL_UART_MspInit+0xa0>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	4619      	mov	r1, r3
 8000e28:	480f      	ldr	r0, [pc, #60]	@ (8000e68 <HAL_UART_MspInit+0xa4>)
 8000e2a:	f001 f8c1 	bl	8001fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	4619      	mov	r1, r3
 8000e42:	4809      	ldr	r0, [pc, #36]	@ (8000e68 <HAL_UART_MspInit+0xa4>)
 8000e44:	f001 f8b4 	bl	8001fb0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2025      	movs	r0, #37	@ 0x25
 8000e4e:	f000 ffc6 	bl	8001dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e52:	2025      	movs	r0, #37	@ 0x25
 8000e54:	f000 ffdf 	bl	8001e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e58:	bf00      	nop
 8000e5a:	3720      	adds	r7, #32
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40013800 	.word	0x40013800
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40010800 	.word	0x40010800

08000e6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e6c:	f7ff fe30 	bl	8000ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e70:	480b      	ldr	r0, [pc, #44]	@ (8000ea0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e72:	490c      	ldr	r1, [pc, #48]	@ (8000ea4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e74:	4a0c      	ldr	r2, [pc, #48]	@ (8000ea8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e78:	e002      	b.n	8000e80 <LoopCopyDataInit>

08000e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7e:	3304      	adds	r3, #4

08000e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e84:	d3f9      	bcc.n	8000e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e86:	4a09      	ldr	r2, [pc, #36]	@ (8000eac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e88:	4c09      	ldr	r4, [pc, #36]	@ (8000eb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e8c:	e001      	b.n	8000e92 <LoopFillZerobss>

08000e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e90:	3204      	adds	r2, #4

08000e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e94:	d3fb      	bcc.n	8000e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e96:	f003 fedd 	bl	8004c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e9a:	f7ff fccd 	bl	8000838 <main>
  bx lr
 8000e9e:	4770      	bx	lr
  ldr r0, =_sdata
 8000ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ea8:	08005590 	.word	0x08005590
  ldr r2, =_sbss
 8000eac:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000eb0:	20000588 	.word	0x20000588

08000eb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <ADC1_2_IRQHandler>
	...

08000eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ebc:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <HAL_Init+0x28>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a07      	ldr	r2, [pc, #28]	@ (8000ee0 <HAL_Init+0x28>)
 8000ec2:	f043 0310 	orr.w	r3, r3, #16
 8000ec6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec8:	2003      	movs	r0, #3
 8000eca:	f000 ff7d 	bl	8001dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ece:	200f      	movs	r0, #15
 8000ed0:	f000 f808 	bl	8000ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed4:	f7ff fd18 	bl	8000908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40022000 	.word	0x40022000

08000ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eec:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <HAL_InitTick+0x54>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <HAL_InitTick+0x58>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 ff95 	bl	8001e32 <HAL_SYSTICK_Config>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00e      	b.n	8000f30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b0f      	cmp	r3, #15
 8000f16:	d80a      	bhi.n	8000f2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	f000 ff5d 	bl	8001dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f24:	4a06      	ldr	r2, [pc, #24]	@ (8000f40 <HAL_InitTick+0x5c>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e000      	b.n	8000f30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	20000004 	.word	0x20000004

08000f44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f48:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <HAL_IncTick+0x1c>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b05      	ldr	r3, [pc, #20]	@ (8000f64 <HAL_IncTick+0x20>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	4a03      	ldr	r2, [pc, #12]	@ (8000f64 <HAL_IncTick+0x20>)
 8000f56:	6013      	str	r3, [r2, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	20000008 	.word	0x20000008
 8000f64:	2000029c 	.word	0x2000029c

08000f68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f6c:	4b02      	ldr	r3, [pc, #8]	@ (8000f78 <HAL_GetTick+0x10>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	2000029c 	.word	0x2000029c

08000f7c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d101      	bne.n	8000f8e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e0ed      	b.n	800116a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d102      	bne.n	8000fa0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff fb7c 	bl	8000698 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f042 0201 	orr.w	r2, r2, #1
 8000fae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fb0:	f7ff ffda 	bl	8000f68 <HAL_GetTick>
 8000fb4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fb6:	e012      	b.n	8000fde <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fb8:	f7ff ffd6 	bl	8000f68 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b0a      	cmp	r3, #10
 8000fc4:	d90b      	bls.n	8000fde <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2205      	movs	r2, #5
 8000fd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e0c5      	b.n	800116a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d0e5      	beq.n	8000fb8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f022 0202 	bic.w	r2, r2, #2
 8000ffa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ffc:	f7ff ffb4 	bl	8000f68 <HAL_GetTick>
 8001000:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001002:	e012      	b.n	800102a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001004:	f7ff ffb0 	bl	8000f68 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b0a      	cmp	r3, #10
 8001010:	d90b      	bls.n	800102a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001016:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2205      	movs	r2, #5
 8001022:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e09f      	b.n	800116a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1e5      	bne.n	8001004 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	7e1b      	ldrb	r3, [r3, #24]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d108      	bne.n	8001052 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	e007      	b.n	8001062 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001060:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	7e5b      	ldrb	r3, [r3, #25]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d108      	bne.n	800107c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	e007      	b.n	800108c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800108a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	7e9b      	ldrb	r3, [r3, #26]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d108      	bne.n	80010a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f042 0220 	orr.w	r2, r2, #32
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	e007      	b.n	80010b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 0220 	bic.w	r2, r2, #32
 80010b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	7edb      	ldrb	r3, [r3, #27]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d108      	bne.n	80010d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f022 0210 	bic.w	r2, r2, #16
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	e007      	b.n	80010e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f042 0210 	orr.w	r2, r2, #16
 80010de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7f1b      	ldrb	r3, [r3, #28]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d108      	bne.n	80010fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f042 0208 	orr.w	r2, r2, #8
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	e007      	b.n	800110a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f022 0208 	bic.w	r2, r2, #8
 8001108:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	7f5b      	ldrb	r3, [r3, #29]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d108      	bne.n	8001124 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f042 0204 	orr.w	r2, r2, #4
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	e007      	b.n	8001134 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 0204 	bic.w	r2, r2, #4
 8001132:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	431a      	orrs	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	431a      	orrs	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	ea42 0103 	orr.w	r1, r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	1e5a      	subs	r2, r3, #1
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	430a      	orrs	r2, r1
 8001158:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2201      	movs	r2, #1
 8001164:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001172:	b480      	push	{r7}
 8001174:	b087      	sub	sp, #28
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001188:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800118a:	7cfb      	ldrb	r3, [r7, #19]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d003      	beq.n	8001198 <HAL_CAN_ConfigFilter+0x26>
 8001190:	7cfb      	ldrb	r3, [r7, #19]
 8001192:	2b02      	cmp	r3, #2
 8001194:	f040 80aa 	bne.w	80012ec <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800119e:	f043 0201 	orr.w	r2, r3, #1
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	f003 031f 	and.w	r3, r3, #31
 80011b0:	2201      	movs	r2, #1
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	401a      	ands	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d123      	bne.n	800121a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	43db      	mvns	r3, r3
 80011dc:	401a      	ands	r2, r3
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011f4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	3248      	adds	r2, #72	@ 0x48
 80011fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800120e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001210:	6979      	ldr	r1, [r7, #20]
 8001212:	3348      	adds	r3, #72	@ 0x48
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	440b      	add	r3, r1
 8001218:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d122      	bne.n	8001268 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	431a      	orrs	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001242:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	3248      	adds	r2, #72	@ 0x48
 8001248:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800125c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800125e:	6979      	ldr	r1, [r7, #20]
 8001260:	3348      	adds	r3, #72	@ 0x48
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	440b      	add	r3, r1
 8001266:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d109      	bne.n	8001284 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	43db      	mvns	r3, r3
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001282:	e007      	b.n	8001294 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	431a      	orrs	r2, r3
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d109      	bne.n	80012b0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	401a      	ands	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80012ae:	e007      	b.n	80012c0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	431a      	orrs	r2, r3
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d107      	bne.n	80012d8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	431a      	orrs	r2, r3
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80012de:	f023 0201 	bic.w	r2, r3, #1
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	e006      	b.n	80012fa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
  }
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	371c      	adds	r7, #28
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2b01      	cmp	r3, #1
 8001316:	d12e      	bne.n	8001376 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2202      	movs	r2, #2
 800131c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 0201 	bic.w	r2, r2, #1
 800132e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001330:	f7ff fe1a 	bl	8000f68 <HAL_GetTick>
 8001334:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001336:	e012      	b.n	800135e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001338:	f7ff fe16 	bl	8000f68 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b0a      	cmp	r3, #10
 8001344:	d90b      	bls.n	800135e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2205      	movs	r2, #5
 8001356:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e012      	b.n	8001384 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1e5      	bne.n	8001338 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001372:	2300      	movs	r3, #0
 8001374:	e006      	b.n	8001384 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800137a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
  }
}
 8001384:	4618      	mov	r0, r3
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	@ 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
 8001398:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013a0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80013aa:	7ffb      	ldrb	r3, [r7, #31]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d003      	beq.n	80013b8 <HAL_CAN_AddTxMessage+0x2c>
 80013b0:	7ffb      	ldrb	r3, [r7, #31]
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	f040 80ad 	bne.w	8001512 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10a      	bne.n	80013d8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d105      	bne.n	80013d8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 8095 	beq.w	8001502 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	0e1b      	lsrs	r3, r3, #24
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80013e2:	2201      	movs	r2, #1
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	409a      	lsls	r2, r3
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d10d      	bne.n	8001410 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013fe:	68f9      	ldr	r1, [r7, #12]
 8001400:	6809      	ldr	r1, [r1, #0]
 8001402:	431a      	orrs	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	3318      	adds	r3, #24
 8001408:	011b      	lsls	r3, r3, #4
 800140a:	440b      	add	r3, r1
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	e00f      	b.n	8001430 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800141a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001420:	68f9      	ldr	r1, [r7, #12]
 8001422:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001424:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3318      	adds	r3, #24
 800142a:	011b      	lsls	r3, r3, #4
 800142c:	440b      	add	r3, r1
 800142e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6819      	ldr	r1, [r3, #0]
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	691a      	ldr	r2, [r3, #16]
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	3318      	adds	r3, #24
 800143c:	011b      	lsls	r3, r3, #4
 800143e:	440b      	add	r3, r1
 8001440:	3304      	adds	r3, #4
 8001442:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	7d1b      	ldrb	r3, [r3, #20]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d111      	bne.n	8001470 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	3318      	adds	r3, #24
 8001454:	011b      	lsls	r3, r3, #4
 8001456:	4413      	add	r3, r2
 8001458:	3304      	adds	r3, #4
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	6811      	ldr	r1, [r2, #0]
 8001460:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	3318      	adds	r3, #24
 8001468:	011b      	lsls	r3, r3, #4
 800146a:	440b      	add	r3, r1
 800146c:	3304      	adds	r3, #4
 800146e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3307      	adds	r3, #7
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	061a      	lsls	r2, r3, #24
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3306      	adds	r3, #6
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	041b      	lsls	r3, r3, #16
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3305      	adds	r3, #5
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	4313      	orrs	r3, r2
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	3204      	adds	r2, #4
 8001490:	7812      	ldrb	r2, [r2, #0]
 8001492:	4610      	mov	r0, r2
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	6811      	ldr	r1, [r2, #0]
 8001498:	ea43 0200 	orr.w	r2, r3, r0
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	440b      	add	r3, r1
 80014a2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80014a6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3303      	adds	r3, #3
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	061a      	lsls	r2, r3, #24
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3302      	adds	r3, #2
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	041b      	lsls	r3, r3, #16
 80014b8:	431a      	orrs	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3301      	adds	r3, #1
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	4313      	orrs	r3, r2
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	7812      	ldrb	r2, [r2, #0]
 80014c8:	4610      	mov	r0, r2
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	6811      	ldr	r1, [r2, #0]
 80014ce:	ea43 0200 	orr.w	r2, r3, r0
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	011b      	lsls	r3, r3, #4
 80014d6:	440b      	add	r3, r1
 80014d8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80014dc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	3318      	adds	r3, #24
 80014e6:	011b      	lsls	r3, r3, #4
 80014e8:	4413      	add	r3, r2
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	6811      	ldr	r1, [r2, #0]
 80014f0:	f043 0201 	orr.w	r2, r3, #1
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	3318      	adds	r3, #24
 80014f8:	011b      	lsls	r3, r3, #4
 80014fa:	440b      	add	r3, r1
 80014fc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	e00e      	b.n	8001520 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001506:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e006      	b.n	8001520 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001516:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
  }
}
 8001520:	4618      	mov	r0, r3
 8001522:	3724      	adds	r7, #36	@ 0x24
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800152a:	b480      	push	{r7}
 800152c:	b085      	sub	sp, #20
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3020 	ldrb.w	r3, [r3, #32]
 800153c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800153e:	7afb      	ldrb	r3, [r7, #11]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d002      	beq.n	800154a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001544:	7afb      	ldrb	r3, [r7, #11]
 8001546:	2b02      	cmp	r3, #2
 8001548:	d11d      	bne.n	8001586 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d002      	beq.n	800155e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	3301      	adds	r3, #1
 800155c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d002      	beq.n	8001572 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	3301      	adds	r3, #1
 8001570:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3301      	adds	r3, #1
 8001584:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001586:	68fb      	ldr	r3, [r7, #12]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr

08001592 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001592:	b480      	push	{r7}
 8001594:	b087      	sub	sp, #28
 8001596:	af00      	add	r7, sp, #0
 8001598:	60f8      	str	r0, [r7, #12]
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
 800159e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015a6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80015a8:	7dfb      	ldrb	r3, [r7, #23]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d003      	beq.n	80015b6 <HAL_CAN_GetRxMessage+0x24>
 80015ae:	7dfb      	ldrb	r3, [r7, #23]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	f040 8103 	bne.w	80017bc <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d10e      	bne.n	80015da <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d116      	bne.n	80015f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e0f7      	b.n	80017ca <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d107      	bne.n	80015f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e0e8      	b.n	80017ca <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	331b      	adds	r3, #27
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	4413      	add	r3, r2
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0204 	and.w	r2, r3, #4
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10c      	bne.n	8001630 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	331b      	adds	r3, #27
 800161e:	011b      	lsls	r3, r3, #4
 8001620:	4413      	add	r3, r2
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	0d5b      	lsrs	r3, r3, #21
 8001626:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	e00b      	b.n	8001648 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	331b      	adds	r3, #27
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	4413      	add	r3, r2
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	08db      	lsrs	r3, r3, #3
 8001640:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	331b      	adds	r3, #27
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	4413      	add	r3, r2
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0202 	and.w	r2, r3, #2
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	331b      	adds	r3, #27
 8001666:	011b      	lsls	r3, r3, #4
 8001668:	4413      	add	r3, r2
 800166a:	3304      	adds	r3, #4
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2208      	movs	r2, #8
 800167a:	611a      	str	r2, [r3, #16]
 800167c:	e00b      	b.n	8001696 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	331b      	adds	r3, #27
 8001686:	011b      	lsls	r3, r3, #4
 8001688:	4413      	add	r3, r2
 800168a:	3304      	adds	r3, #4
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 020f 	and.w	r2, r3, #15
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	331b      	adds	r3, #27
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	4413      	add	r3, r2
 80016a2:	3304      	adds	r3, #4
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	0a1b      	lsrs	r3, r3, #8
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	331b      	adds	r3, #27
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	4413      	add	r3, r2
 80016ba:	3304      	adds	r3, #4
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	0c1b      	lsrs	r3, r3, #16
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	4413      	add	r3, r2
 80016d0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	011b      	lsls	r3, r3, #4
 80016e4:	4413      	add	r3, r2
 80016e6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	0a1a      	lsrs	r2, r3, #8
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	3301      	adds	r3, #1
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	4413      	add	r3, r2
 8001700:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	0c1a      	lsrs	r2, r3, #16
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	3302      	adds	r3, #2
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	4413      	add	r3, r2
 800171a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	0e1a      	lsrs	r2, r3, #24
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	3303      	adds	r3, #3
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	011b      	lsls	r3, r3, #4
 8001732:	4413      	add	r3, r2
 8001734:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	3304      	adds	r3, #4
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	011b      	lsls	r3, r3, #4
 800174a:	4413      	add	r3, r2
 800174c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	0a1a      	lsrs	r2, r3, #8
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	3305      	adds	r3, #5
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	4413      	add	r3, r2
 8001766:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	0c1a      	lsrs	r2, r3, #16
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	3306      	adds	r3, #6
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	011b      	lsls	r3, r3, #4
 800177e:	4413      	add	r3, r2
 8001780:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	0e1a      	lsrs	r2, r3, #24
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	3307      	adds	r3, #7
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d108      	bne.n	80017a8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f042 0220 	orr.w	r2, r2, #32
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	e007      	b.n	80017b8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	691a      	ldr	r2, [r3, #16]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0220 	orr.w	r2, r2, #32
 80017b6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	e006      	b.n	80017ca <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
  }
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	371c      	adds	r7, #28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d002      	beq.n	80017f2 <HAL_CAN_ActivateNotification+0x1e>
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d109      	bne.n	8001806 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6959      	ldr	r1, [r3, #20]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	e006      	b.n	8001814 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
  }
}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b08a      	sub	sp, #40	@ 0x28
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001826:	2300      	movs	r3, #0
 8001828:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800185a:	6a3b      	ldr	r3, [r7, #32]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b00      	cmp	r3, #0
 8001862:	d07c      	beq.n	800195e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d023      	beq.n	80018b6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2201      	movs	r2, #1
 8001874:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7fe fdbf 	bl	8000404 <HAL_CAN_TxMailbox0CompleteCallback>
 8001886:	e016      	b.n	80018b6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	2b00      	cmp	r3, #0
 8001890:	d004      	beq.n	800189c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001894:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001898:	627b      	str	r3, [r7, #36]	@ 0x24
 800189a:	e00c      	b.n	80018b6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d004      	beq.n	80018b0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80018a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ae:	e002      	b.n	80018b6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 f96b 	bl	8001b8c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d024      	beq.n	800190a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7fe fda7 	bl	8000428 <HAL_CAN_TxMailbox1CompleteCallback>
 80018da:	e016      	b.n	800190a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d004      	beq.n	80018f0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80018e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ee:	e00c      	b.n	800190a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d004      	beq.n	8001904 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80018fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001900:	627b      	str	r3, [r7, #36]	@ 0x24
 8001902:	e002      	b.n	800190a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 f94a 	bl	8001b9e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d024      	beq.n	800195e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800191c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7fe fd8f 	bl	800044c <HAL_CAN_TxMailbox2CompleteCallback>
 800192e:	e016      	b.n	800195e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d004      	beq.n	8001944 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800193a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24
 8001942:	e00c      	b.n	800195e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d004      	beq.n	8001958 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800194e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001950:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001954:	627b      	str	r3, [r7, #36]	@ 0x24
 8001956:	e002      	b.n	800195e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f000 f929 	bl	8001bb0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800195e:	6a3b      	ldr	r3, [r7, #32]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00c      	beq.n	8001982 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	f003 0310 	and.w	r3, r3, #16
 800196e:	2b00      	cmp	r3, #0
 8001970:	d007      	beq.n	8001982 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001974:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001978:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2210      	movs	r2, #16
 8001980:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001982:	6a3b      	ldr	r3, [r7, #32]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	d00b      	beq.n	80019a4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b00      	cmp	r3, #0
 8001994:	d006      	beq.n	80019a4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2208      	movs	r2, #8
 800199c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 f90f 	bl	8001bc2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80019a4:	6a3b      	ldr	r3, [r7, #32]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d009      	beq.n	80019c2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d002      	beq.n	80019c2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7fe fd57 	bl	8000470 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80019c2:	6a3b      	ldr	r3, [r7, #32]
 80019c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00c      	beq.n	80019e6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	f003 0310 	and.w	r3, r3, #16
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d007      	beq.n	80019e6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80019d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019dc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2210      	movs	r2, #16
 80019e4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	f003 0320 	and.w	r3, r3, #32
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00b      	beq.n	8001a08 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d006      	beq.n	8001a08 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2208      	movs	r2, #8
 8001a00:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f8ef 	bl	8001be6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d009      	beq.n	8001a26 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 f8d7 	bl	8001bd4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00b      	beq.n	8001a48 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f003 0310 	and.w	r3, r3, #16
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d006      	beq.n	8001a48 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2210      	movs	r2, #16
 8001a40:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f8d8 	bl	8001bf8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00b      	beq.n	8001a6a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d006      	beq.n	8001a6a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2208      	movs	r2, #8
 8001a62:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f8d0 	bl	8001c0a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
 8001a6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d07b      	beq.n	8001b6c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d072      	beq.n	8001b64 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d008      	beq.n	8001a9a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d008      	beq.n	8001ab6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ab6:	6a3b      	ldr	r3, [r7, #32]
 8001ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d008      	beq.n	8001ad2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001acc:	f043 0304 	orr.w	r3, r3, #4
 8001ad0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d043      	beq.n	8001b64 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d03e      	beq.n	8001b64 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001aec:	2b60      	cmp	r3, #96	@ 0x60
 8001aee:	d02b      	beq.n	8001b48 <HAL_CAN_IRQHandler+0x32a>
 8001af0:	2b60      	cmp	r3, #96	@ 0x60
 8001af2:	d82e      	bhi.n	8001b52 <HAL_CAN_IRQHandler+0x334>
 8001af4:	2b50      	cmp	r3, #80	@ 0x50
 8001af6:	d022      	beq.n	8001b3e <HAL_CAN_IRQHandler+0x320>
 8001af8:	2b50      	cmp	r3, #80	@ 0x50
 8001afa:	d82a      	bhi.n	8001b52 <HAL_CAN_IRQHandler+0x334>
 8001afc:	2b40      	cmp	r3, #64	@ 0x40
 8001afe:	d019      	beq.n	8001b34 <HAL_CAN_IRQHandler+0x316>
 8001b00:	2b40      	cmp	r3, #64	@ 0x40
 8001b02:	d826      	bhi.n	8001b52 <HAL_CAN_IRQHandler+0x334>
 8001b04:	2b30      	cmp	r3, #48	@ 0x30
 8001b06:	d010      	beq.n	8001b2a <HAL_CAN_IRQHandler+0x30c>
 8001b08:	2b30      	cmp	r3, #48	@ 0x30
 8001b0a:	d822      	bhi.n	8001b52 <HAL_CAN_IRQHandler+0x334>
 8001b0c:	2b10      	cmp	r3, #16
 8001b0e:	d002      	beq.n	8001b16 <HAL_CAN_IRQHandler+0x2f8>
 8001b10:	2b20      	cmp	r3, #32
 8001b12:	d005      	beq.n	8001b20 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001b14:	e01d      	b.n	8001b52 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b18:	f043 0308 	orr.w	r3, r3, #8
 8001b1c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b1e:	e019      	b.n	8001b54 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b22:	f043 0310 	orr.w	r3, r3, #16
 8001b26:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b28:	e014      	b.n	8001b54 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	f043 0320 	orr.w	r3, r3, #32
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b32:	e00f      	b.n	8001b54 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b3a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b3c:	e00a      	b.n	8001b54 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b44:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b46:	e005      	b.n	8001b54 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b4e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b50:	e000      	b.n	8001b54 <HAL_CAN_IRQHandler+0x336>
            break;
 8001b52:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	699a      	ldr	r2, [r3, #24]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001b62:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2204      	movs	r2, #4
 8001b6a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d008      	beq.n	8001b84 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f84c 	bl	8001c1c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001b84:	bf00      	nop
 8001b86:	3728      	adds	r7, #40	@ 0x28
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr

08001be6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr

08001c0a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr
	...

08001c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c40:	4b0c      	ldr	r3, [pc, #48]	@ (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c62:	4a04      	ldr	r2, [pc, #16]	@ (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	60d3      	str	r3, [r2, #12]
}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c7c:	4b04      	ldr	r3, [pc, #16]	@ (8001c90 <__NVIC_GetPriorityGrouping+0x18>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	0a1b      	lsrs	r3, r3, #8
 8001c82:	f003 0307 	and.w	r3, r3, #7
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	db0b      	blt.n	8001cbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	f003 021f 	and.w	r2, r3, #31
 8001cac:	4906      	ldr	r1, [pc, #24]	@ (8001cc8 <__NVIC_EnableIRQ+0x34>)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	095b      	lsrs	r3, r3, #5
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	e000e100 	.word	0xe000e100

08001ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	6039      	str	r1, [r7, #0]
 8001cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	db0a      	blt.n	8001cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	490c      	ldr	r1, [pc, #48]	@ (8001d18 <__NVIC_SetPriority+0x4c>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	0112      	lsls	r2, r2, #4
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	440b      	add	r3, r1
 8001cf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf4:	e00a      	b.n	8001d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4908      	ldr	r1, [pc, #32]	@ (8001d1c <__NVIC_SetPriority+0x50>)
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	3b04      	subs	r3, #4
 8001d04:	0112      	lsls	r2, r2, #4
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	440b      	add	r3, r1
 8001d0a:	761a      	strb	r2, [r3, #24]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000e100 	.word	0xe000e100
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	@ 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f1c3 0307 	rsb	r3, r3, #7
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	bf28      	it	cs
 8001d3e:	2304      	movcs	r3, #4
 8001d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3304      	adds	r3, #4
 8001d46:	2b06      	cmp	r3, #6
 8001d48:	d902      	bls.n	8001d50 <NVIC_EncodePriority+0x30>
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3b03      	subs	r3, #3
 8001d4e:	e000      	b.n	8001d52 <NVIC_EncodePriority+0x32>
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	f04f 32ff 	mov.w	r2, #4294967295
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43da      	mvns	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	401a      	ands	r2, r3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d68:	f04f 31ff 	mov.w	r1, #4294967295
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d72:	43d9      	mvns	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	4313      	orrs	r3, r2
         );
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3724      	adds	r7, #36	@ 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d94:	d301      	bcc.n	8001d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d96:	2301      	movs	r3, #1
 8001d98:	e00f      	b.n	8001dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc4 <SysTick_Config+0x40>)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001da2:	210f      	movs	r1, #15
 8001da4:	f04f 30ff 	mov.w	r0, #4294967295
 8001da8:	f7ff ff90 	bl	8001ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dac:	4b05      	ldr	r3, [pc, #20]	@ (8001dc4 <SysTick_Config+0x40>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001db2:	4b04      	ldr	r3, [pc, #16]	@ (8001dc4 <SysTick_Config+0x40>)
 8001db4:	2207      	movs	r2, #7
 8001db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	e000e010 	.word	0xe000e010

08001dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff ff2d 	bl	8001c30 <__NVIC_SetPriorityGrouping>
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b086      	sub	sp, #24
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
 8001dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001df0:	f7ff ff42 	bl	8001c78 <__NVIC_GetPriorityGrouping>
 8001df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	68b9      	ldr	r1, [r7, #8]
 8001dfa:	6978      	ldr	r0, [r7, #20]
 8001dfc:	f7ff ff90 	bl	8001d20 <NVIC_EncodePriority>
 8001e00:	4602      	mov	r2, r0
 8001e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e06:	4611      	mov	r1, r2
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff5f 	bl	8001ccc <__NVIC_SetPriority>
}
 8001e0e:	bf00      	nop
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ff35 	bl	8001c94 <__NVIC_EnableIRQ>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff ffa2 	bl	8001d84 <SysTick_Config>
 8001e40:	4603      	mov	r3, r0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b085      	sub	sp, #20
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d008      	beq.n	8001e74 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2204      	movs	r2, #4
 8001e66:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e020      	b.n	8001eb6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 020e 	bic.w	r2, r2, #14
 8001e82:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0201 	bic.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d005      	beq.n	8001ee4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2204      	movs	r2, #4
 8001edc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	73fb      	strb	r3, [r7, #15]
 8001ee2:	e051      	b.n	8001f88 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 020e 	bic.w	r2, r2, #14
 8001ef2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0201 	bic.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a22      	ldr	r2, [pc, #136]	@ (8001f94 <HAL_DMA_Abort_IT+0xd4>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d029      	beq.n	8001f62 <HAL_DMA_Abort_IT+0xa2>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a21      	ldr	r2, [pc, #132]	@ (8001f98 <HAL_DMA_Abort_IT+0xd8>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d022      	beq.n	8001f5e <HAL_DMA_Abort_IT+0x9e>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a1f      	ldr	r2, [pc, #124]	@ (8001f9c <HAL_DMA_Abort_IT+0xdc>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d01a      	beq.n	8001f58 <HAL_DMA_Abort_IT+0x98>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a1e      	ldr	r2, [pc, #120]	@ (8001fa0 <HAL_DMA_Abort_IT+0xe0>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d012      	beq.n	8001f52 <HAL_DMA_Abort_IT+0x92>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a1c      	ldr	r2, [pc, #112]	@ (8001fa4 <HAL_DMA_Abort_IT+0xe4>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d00a      	beq.n	8001f4c <HAL_DMA_Abort_IT+0x8c>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a1b      	ldr	r2, [pc, #108]	@ (8001fa8 <HAL_DMA_Abort_IT+0xe8>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d102      	bne.n	8001f46 <HAL_DMA_Abort_IT+0x86>
 8001f40:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001f44:	e00e      	b.n	8001f64 <HAL_DMA_Abort_IT+0xa4>
 8001f46:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f4a:	e00b      	b.n	8001f64 <HAL_DMA_Abort_IT+0xa4>
 8001f4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f50:	e008      	b.n	8001f64 <HAL_DMA_Abort_IT+0xa4>
 8001f52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f56:	e005      	b.n	8001f64 <HAL_DMA_Abort_IT+0xa4>
 8001f58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f5c:	e002      	b.n	8001f64 <HAL_DMA_Abort_IT+0xa4>
 8001f5e:	2310      	movs	r3, #16
 8001f60:	e000      	b.n	8001f64 <HAL_DMA_Abort_IT+0xa4>
 8001f62:	2301      	movs	r3, #1
 8001f64:	4a11      	ldr	r2, [pc, #68]	@ (8001fac <HAL_DMA_Abort_IT+0xec>)
 8001f66:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	4798      	blx	r3
    } 
  }
  return status;
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40020008 	.word	0x40020008
 8001f98:	4002001c 	.word	0x4002001c
 8001f9c:	40020030 	.word	0x40020030
 8001fa0:	40020044 	.word	0x40020044
 8001fa4:	40020058 	.word	0x40020058
 8001fa8:	4002006c 	.word	0x4002006c
 8001fac:	40020000 	.word	0x40020000

08001fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b08b      	sub	sp, #44	@ 0x2c
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc2:	e169      	b.n	8002298 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	69fa      	ldr	r2, [r7, #28]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	f040 8158 	bne.w	8002292 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	4a9a      	ldr	r2, [pc, #616]	@ (8002250 <HAL_GPIO_Init+0x2a0>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d05e      	beq.n	80020aa <HAL_GPIO_Init+0xfa>
 8001fec:	4a98      	ldr	r2, [pc, #608]	@ (8002250 <HAL_GPIO_Init+0x2a0>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d875      	bhi.n	80020de <HAL_GPIO_Init+0x12e>
 8001ff2:	4a98      	ldr	r2, [pc, #608]	@ (8002254 <HAL_GPIO_Init+0x2a4>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d058      	beq.n	80020aa <HAL_GPIO_Init+0xfa>
 8001ff8:	4a96      	ldr	r2, [pc, #600]	@ (8002254 <HAL_GPIO_Init+0x2a4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d86f      	bhi.n	80020de <HAL_GPIO_Init+0x12e>
 8001ffe:	4a96      	ldr	r2, [pc, #600]	@ (8002258 <HAL_GPIO_Init+0x2a8>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d052      	beq.n	80020aa <HAL_GPIO_Init+0xfa>
 8002004:	4a94      	ldr	r2, [pc, #592]	@ (8002258 <HAL_GPIO_Init+0x2a8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d869      	bhi.n	80020de <HAL_GPIO_Init+0x12e>
 800200a:	4a94      	ldr	r2, [pc, #592]	@ (800225c <HAL_GPIO_Init+0x2ac>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d04c      	beq.n	80020aa <HAL_GPIO_Init+0xfa>
 8002010:	4a92      	ldr	r2, [pc, #584]	@ (800225c <HAL_GPIO_Init+0x2ac>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d863      	bhi.n	80020de <HAL_GPIO_Init+0x12e>
 8002016:	4a92      	ldr	r2, [pc, #584]	@ (8002260 <HAL_GPIO_Init+0x2b0>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d046      	beq.n	80020aa <HAL_GPIO_Init+0xfa>
 800201c:	4a90      	ldr	r2, [pc, #576]	@ (8002260 <HAL_GPIO_Init+0x2b0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d85d      	bhi.n	80020de <HAL_GPIO_Init+0x12e>
 8002022:	2b12      	cmp	r3, #18
 8002024:	d82a      	bhi.n	800207c <HAL_GPIO_Init+0xcc>
 8002026:	2b12      	cmp	r3, #18
 8002028:	d859      	bhi.n	80020de <HAL_GPIO_Init+0x12e>
 800202a:	a201      	add	r2, pc, #4	@ (adr r2, 8002030 <HAL_GPIO_Init+0x80>)
 800202c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002030:	080020ab 	.word	0x080020ab
 8002034:	08002085 	.word	0x08002085
 8002038:	08002097 	.word	0x08002097
 800203c:	080020d9 	.word	0x080020d9
 8002040:	080020df 	.word	0x080020df
 8002044:	080020df 	.word	0x080020df
 8002048:	080020df 	.word	0x080020df
 800204c:	080020df 	.word	0x080020df
 8002050:	080020df 	.word	0x080020df
 8002054:	080020df 	.word	0x080020df
 8002058:	080020df 	.word	0x080020df
 800205c:	080020df 	.word	0x080020df
 8002060:	080020df 	.word	0x080020df
 8002064:	080020df 	.word	0x080020df
 8002068:	080020df 	.word	0x080020df
 800206c:	080020df 	.word	0x080020df
 8002070:	080020df 	.word	0x080020df
 8002074:	0800208d 	.word	0x0800208d
 8002078:	080020a1 	.word	0x080020a1
 800207c:	4a79      	ldr	r2, [pc, #484]	@ (8002264 <HAL_GPIO_Init+0x2b4>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d013      	beq.n	80020aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002082:	e02c      	b.n	80020de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	623b      	str	r3, [r7, #32]
          break;
 800208a:	e029      	b.n	80020e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	3304      	adds	r3, #4
 8002092:	623b      	str	r3, [r7, #32]
          break;
 8002094:	e024      	b.n	80020e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	3308      	adds	r3, #8
 800209c:	623b      	str	r3, [r7, #32]
          break;
 800209e:	e01f      	b.n	80020e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	330c      	adds	r3, #12
 80020a6:	623b      	str	r3, [r7, #32]
          break;
 80020a8:	e01a      	b.n	80020e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d102      	bne.n	80020b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020b2:	2304      	movs	r3, #4
 80020b4:	623b      	str	r3, [r7, #32]
          break;
 80020b6:	e013      	b.n	80020e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d105      	bne.n	80020cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020c0:	2308      	movs	r3, #8
 80020c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69fa      	ldr	r2, [r7, #28]
 80020c8:	611a      	str	r2, [r3, #16]
          break;
 80020ca:	e009      	b.n	80020e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020cc:	2308      	movs	r3, #8
 80020ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	615a      	str	r2, [r3, #20]
          break;
 80020d6:	e003      	b.n	80020e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020d8:	2300      	movs	r3, #0
 80020da:	623b      	str	r3, [r7, #32]
          break;
 80020dc:	e000      	b.n	80020e0 <HAL_GPIO_Init+0x130>
          break;
 80020de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2bff      	cmp	r3, #255	@ 0xff
 80020e4:	d801      	bhi.n	80020ea <HAL_GPIO_Init+0x13a>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	e001      	b.n	80020ee <HAL_GPIO_Init+0x13e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3304      	adds	r3, #4
 80020ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	2bff      	cmp	r3, #255	@ 0xff
 80020f4:	d802      	bhi.n	80020fc <HAL_GPIO_Init+0x14c>
 80020f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	e002      	b.n	8002102 <HAL_GPIO_Init+0x152>
 80020fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fe:	3b08      	subs	r3, #8
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	210f      	movs	r1, #15
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	fa01 f303 	lsl.w	r3, r1, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	401a      	ands	r2, r3
 8002114:	6a39      	ldr	r1, [r7, #32]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	fa01 f303 	lsl.w	r3, r1, r3
 800211c:	431a      	orrs	r2, r3
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 80b1 	beq.w	8002292 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002130:	4b4d      	ldr	r3, [pc, #308]	@ (8002268 <HAL_GPIO_Init+0x2b8>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	4a4c      	ldr	r2, [pc, #304]	@ (8002268 <HAL_GPIO_Init+0x2b8>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	6193      	str	r3, [r2, #24]
 800213c:	4b4a      	ldr	r3, [pc, #296]	@ (8002268 <HAL_GPIO_Init+0x2b8>)
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002148:	4a48      	ldr	r2, [pc, #288]	@ (800226c <HAL_GPIO_Init+0x2bc>)
 800214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214c:	089b      	lsrs	r3, r3, #2
 800214e:	3302      	adds	r3, #2
 8002150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002154:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	220f      	movs	r2, #15
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4013      	ands	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a40      	ldr	r2, [pc, #256]	@ (8002270 <HAL_GPIO_Init+0x2c0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d013      	beq.n	800219c <HAL_GPIO_Init+0x1ec>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a3f      	ldr	r2, [pc, #252]	@ (8002274 <HAL_GPIO_Init+0x2c4>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d00d      	beq.n	8002198 <HAL_GPIO_Init+0x1e8>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a3e      	ldr	r2, [pc, #248]	@ (8002278 <HAL_GPIO_Init+0x2c8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d007      	beq.n	8002194 <HAL_GPIO_Init+0x1e4>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a3d      	ldr	r2, [pc, #244]	@ (800227c <HAL_GPIO_Init+0x2cc>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d101      	bne.n	8002190 <HAL_GPIO_Init+0x1e0>
 800218c:	2303      	movs	r3, #3
 800218e:	e006      	b.n	800219e <HAL_GPIO_Init+0x1ee>
 8002190:	2304      	movs	r3, #4
 8002192:	e004      	b.n	800219e <HAL_GPIO_Init+0x1ee>
 8002194:	2302      	movs	r3, #2
 8002196:	e002      	b.n	800219e <HAL_GPIO_Init+0x1ee>
 8002198:	2301      	movs	r3, #1
 800219a:	e000      	b.n	800219e <HAL_GPIO_Init+0x1ee>
 800219c:	2300      	movs	r3, #0
 800219e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021a0:	f002 0203 	and.w	r2, r2, #3
 80021a4:	0092      	lsls	r2, r2, #2
 80021a6:	4093      	lsls	r3, r2
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021ae:	492f      	ldr	r1, [pc, #188]	@ (800226c <HAL_GPIO_Init+0x2bc>)
 80021b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b2:	089b      	lsrs	r3, r3, #2
 80021b4:	3302      	adds	r3, #2
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d006      	beq.n	80021d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	492c      	ldr	r1, [pc, #176]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	608b      	str	r3, [r1, #8]
 80021d4:	e006      	b.n	80021e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	43db      	mvns	r3, r3
 80021de:	4928      	ldr	r1, [pc, #160]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d006      	beq.n	80021fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021f0:	4b23      	ldr	r3, [pc, #140]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 80021f2:	68da      	ldr	r2, [r3, #12]
 80021f4:	4922      	ldr	r1, [pc, #136]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	60cb      	str	r3, [r1, #12]
 80021fc:	e006      	b.n	800220c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021fe:	4b20      	ldr	r3, [pc, #128]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	43db      	mvns	r3, r3
 8002206:	491e      	ldr	r1, [pc, #120]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 8002208:	4013      	ands	r3, r2
 800220a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d006      	beq.n	8002226 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002218:	4b19      	ldr	r3, [pc, #100]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	4918      	ldr	r1, [pc, #96]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	4313      	orrs	r3, r2
 8002222:	604b      	str	r3, [r1, #4]
 8002224:	e006      	b.n	8002234 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002226:	4b16      	ldr	r3, [pc, #88]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	43db      	mvns	r3, r3
 800222e:	4914      	ldr	r1, [pc, #80]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 8002230:	4013      	ands	r3, r2
 8002232:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d021      	beq.n	8002284 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002240:	4b0f      	ldr	r3, [pc, #60]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	490e      	ldr	r1, [pc, #56]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	4313      	orrs	r3, r2
 800224a:	600b      	str	r3, [r1, #0]
 800224c:	e021      	b.n	8002292 <HAL_GPIO_Init+0x2e2>
 800224e:	bf00      	nop
 8002250:	10320000 	.word	0x10320000
 8002254:	10310000 	.word	0x10310000
 8002258:	10220000 	.word	0x10220000
 800225c:	10210000 	.word	0x10210000
 8002260:	10120000 	.word	0x10120000
 8002264:	10110000 	.word	0x10110000
 8002268:	40021000 	.word	0x40021000
 800226c:	40010000 	.word	0x40010000
 8002270:	40010800 	.word	0x40010800
 8002274:	40010c00 	.word	0x40010c00
 8002278:	40011000 	.word	0x40011000
 800227c:	40011400 	.word	0x40011400
 8002280:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002284:	4b0b      	ldr	r3, [pc, #44]	@ (80022b4 <HAL_GPIO_Init+0x304>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	43db      	mvns	r3, r3
 800228c:	4909      	ldr	r1, [pc, #36]	@ (80022b4 <HAL_GPIO_Init+0x304>)
 800228e:	4013      	ands	r3, r2
 8002290:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002294:	3301      	adds	r3, #1
 8002296:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229e:	fa22 f303 	lsr.w	r3, r2, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f47f ae8e 	bne.w	8001fc4 <HAL_GPIO_Init+0x14>
  }
}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	372c      	adds	r7, #44	@ 0x2c
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr
 80022b4:	40010400 	.word	0x40010400

080022b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	807b      	strh	r3, [r7, #2]
 80022c4:	4613      	mov	r3, r2
 80022c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022c8:	787b      	ldrb	r3, [r7, #1]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ce:	887a      	ldrh	r2, [r7, #2]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022d4:	e003      	b.n	80022de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022d6:	887b      	ldrh	r3, [r7, #2]
 80022d8:	041a      	lsls	r2, r3, #16
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	611a      	str	r2, [r3, #16]
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022fa:	887a      	ldrh	r2, [r7, #2]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4013      	ands	r3, r2
 8002300:	041a      	lsls	r2, r3, #16
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	43d9      	mvns	r1, r3
 8002306:	887b      	ldrh	r3, [r7, #2]
 8002308:	400b      	ands	r3, r1
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	611a      	str	r2, [r3, #16]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr

0800231a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e034      	b.n	8002396 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8002334:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f245 5255 	movw	r2, #21845	@ 0x5555
 800233e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6852      	ldr	r2, [r2, #4]
 8002348:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6892      	ldr	r2, [r2, #8]
 8002352:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002354:	f7fe fe08 	bl	8000f68 <HAL_GetTick>
 8002358:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800235a:	e00f      	b.n	800237c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800235c:	f7fe fe04 	bl	8000f68 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b27      	cmp	r3, #39	@ 0x27
 8002368:	d908      	bls.n	800237c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e00c      	b.n	8002396 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1e8      	bne.n	800235c <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8002392:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80023ae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e272      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 8087 	beq.w	80024ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023dc:	4b92      	ldr	r3, [pc, #584]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 030c 	and.w	r3, r3, #12
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d00c      	beq.n	8002402 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023e8:	4b8f      	ldr	r3, [pc, #572]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 030c 	and.w	r3, r3, #12
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d112      	bne.n	800241a <HAL_RCC_OscConfig+0x5e>
 80023f4:	4b8c      	ldr	r3, [pc, #560]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002400:	d10b      	bne.n	800241a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002402:	4b89      	ldr	r3, [pc, #548]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d06c      	beq.n	80024e8 <HAL_RCC_OscConfig+0x12c>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d168      	bne.n	80024e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e24c      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002422:	d106      	bne.n	8002432 <HAL_RCC_OscConfig+0x76>
 8002424:	4b80      	ldr	r3, [pc, #512]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a7f      	ldr	r2, [pc, #508]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 800242a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	e02e      	b.n	8002490 <HAL_RCC_OscConfig+0xd4>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10c      	bne.n	8002454 <HAL_RCC_OscConfig+0x98>
 800243a:	4b7b      	ldr	r3, [pc, #492]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a7a      	ldr	r2, [pc, #488]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002440:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	4b78      	ldr	r3, [pc, #480]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a77      	ldr	r2, [pc, #476]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 800244c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	e01d      	b.n	8002490 <HAL_RCC_OscConfig+0xd4>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800245c:	d10c      	bne.n	8002478 <HAL_RCC_OscConfig+0xbc>
 800245e:	4b72      	ldr	r3, [pc, #456]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a71      	ldr	r2, [pc, #452]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002464:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	4b6f      	ldr	r3, [pc, #444]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a6e      	ldr	r2, [pc, #440]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	e00b      	b.n	8002490 <HAL_RCC_OscConfig+0xd4>
 8002478:	4b6b      	ldr	r3, [pc, #428]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a6a      	ldr	r2, [pc, #424]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 800247e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	4b68      	ldr	r3, [pc, #416]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a67      	ldr	r2, [pc, #412]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 800248a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800248e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d013      	beq.n	80024c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7fe fd66 	bl	8000f68 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a0:	f7fe fd62 	bl	8000f68 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b64      	cmp	r3, #100	@ 0x64
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e200      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b2:	4b5d      	ldr	r3, [pc, #372]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0xe4>
 80024be:	e014      	b.n	80024ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7fe fd52 	bl	8000f68 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c8:	f7fe fd4e 	bl	8000f68 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	@ 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e1ec      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024da:	4b53      	ldr	r3, [pc, #332]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x10c>
 80024e6:	e000      	b.n	80024ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d063      	beq.n	80025be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024f6:	4b4c      	ldr	r3, [pc, #304]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00b      	beq.n	800251a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002502:	4b49      	ldr	r3, [pc, #292]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	2b08      	cmp	r3, #8
 800250c:	d11c      	bne.n	8002548 <HAL_RCC_OscConfig+0x18c>
 800250e:	4b46      	ldr	r3, [pc, #280]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d116      	bne.n	8002548 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251a:	4b43      	ldr	r3, [pc, #268]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d005      	beq.n	8002532 <HAL_RCC_OscConfig+0x176>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d001      	beq.n	8002532 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e1c0      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002532:	4b3d      	ldr	r3, [pc, #244]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4939      	ldr	r1, [pc, #228]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002546:	e03a      	b.n	80025be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d020      	beq.n	8002592 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002550:	4b36      	ldr	r3, [pc, #216]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002556:	f7fe fd07 	bl	8000f68 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255e:	f7fe fd03 	bl	8000f68 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e1a1      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002570:	4b2d      	ldr	r3, [pc, #180]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257c:	4b2a      	ldr	r3, [pc, #168]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4927      	ldr	r1, [pc, #156]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 800258c:	4313      	orrs	r3, r2
 800258e:	600b      	str	r3, [r1, #0]
 8002590:	e015      	b.n	80025be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002592:	4b26      	ldr	r3, [pc, #152]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7fe fce6 	bl	8000f68 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a0:	f7fe fce2 	bl	8000f68 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e180      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d03a      	beq.n	8002640 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d019      	beq.n	8002606 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d2:	4b17      	ldr	r3, [pc, #92]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d8:	f7fe fcc6 	bl	8000f68 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e0:	f7fe fcc2 	bl	8000f68 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e160      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002628 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025fe:	2001      	movs	r0, #1
 8002600:	f000 face 	bl	8002ba0 <RCC_Delay>
 8002604:	e01c      	b.n	8002640 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002606:	4b0a      	ldr	r3, [pc, #40]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260c:	f7fe fcac 	bl	8000f68 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002612:	e00f      	b.n	8002634 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002614:	f7fe fca8 	bl	8000f68 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d908      	bls.n	8002634 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e146      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000
 800262c:	42420000 	.word	0x42420000
 8002630:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002634:	4b92      	ldr	r3, [pc, #584]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1e9      	bne.n	8002614 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80a6 	beq.w	800279a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264e:	2300      	movs	r3, #0
 8002650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002652:	4b8b      	ldr	r3, [pc, #556]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10d      	bne.n	800267a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265e:	4b88      	ldr	r3, [pc, #544]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	4a87      	ldr	r2, [pc, #540]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002668:	61d3      	str	r3, [r2, #28]
 800266a:	4b85      	ldr	r3, [pc, #532]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002676:	2301      	movs	r3, #1
 8002678:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267a:	4b82      	ldr	r3, [pc, #520]	@ (8002884 <HAL_RCC_OscConfig+0x4c8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002682:	2b00      	cmp	r3, #0
 8002684:	d118      	bne.n	80026b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002686:	4b7f      	ldr	r3, [pc, #508]	@ (8002884 <HAL_RCC_OscConfig+0x4c8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a7e      	ldr	r2, [pc, #504]	@ (8002884 <HAL_RCC_OscConfig+0x4c8>)
 800268c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002692:	f7fe fc69 	bl	8000f68 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269a:	f7fe fc65 	bl	8000f68 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b64      	cmp	r3, #100	@ 0x64
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e103      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ac:	4b75      	ldr	r3, [pc, #468]	@ (8002884 <HAL_RCC_OscConfig+0x4c8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d106      	bne.n	80026ce <HAL_RCC_OscConfig+0x312>
 80026c0:	4b6f      	ldr	r3, [pc, #444]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	4a6e      	ldr	r2, [pc, #440]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6213      	str	r3, [r2, #32]
 80026cc:	e02d      	b.n	800272a <HAL_RCC_OscConfig+0x36e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x334>
 80026d6:	4b6a      	ldr	r3, [pc, #424]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	4a69      	ldr	r2, [pc, #420]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 80026dc:	f023 0301 	bic.w	r3, r3, #1
 80026e0:	6213      	str	r3, [r2, #32]
 80026e2:	4b67      	ldr	r3, [pc, #412]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	4a66      	ldr	r2, [pc, #408]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 80026e8:	f023 0304 	bic.w	r3, r3, #4
 80026ec:	6213      	str	r3, [r2, #32]
 80026ee:	e01c      	b.n	800272a <HAL_RCC_OscConfig+0x36e>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2b05      	cmp	r3, #5
 80026f6:	d10c      	bne.n	8002712 <HAL_RCC_OscConfig+0x356>
 80026f8:	4b61      	ldr	r3, [pc, #388]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	4a60      	ldr	r2, [pc, #384]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 80026fe:	f043 0304 	orr.w	r3, r3, #4
 8002702:	6213      	str	r3, [r2, #32]
 8002704:	4b5e      	ldr	r3, [pc, #376]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	4a5d      	ldr	r2, [pc, #372]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6213      	str	r3, [r2, #32]
 8002710:	e00b      	b.n	800272a <HAL_RCC_OscConfig+0x36e>
 8002712:	4b5b      	ldr	r3, [pc, #364]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	4a5a      	ldr	r2, [pc, #360]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002718:	f023 0301 	bic.w	r3, r3, #1
 800271c:	6213      	str	r3, [r2, #32]
 800271e:	4b58      	ldr	r3, [pc, #352]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	4a57      	ldr	r2, [pc, #348]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002724:	f023 0304 	bic.w	r3, r3, #4
 8002728:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d015      	beq.n	800275e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002732:	f7fe fc19 	bl	8000f68 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002738:	e00a      	b.n	8002750 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273a:	f7fe fc15 	bl	8000f68 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002748:	4293      	cmp	r3, r2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e0b1      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002750:	4b4b      	ldr	r3, [pc, #300]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0ee      	beq.n	800273a <HAL_RCC_OscConfig+0x37e>
 800275c:	e014      	b.n	8002788 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275e:	f7fe fc03 	bl	8000f68 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002764:	e00a      	b.n	800277c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002766:	f7fe fbff 	bl	8000f68 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002774:	4293      	cmp	r3, r2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e09b      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277c:	4b40      	ldr	r3, [pc, #256]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1ee      	bne.n	8002766 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002788:	7dfb      	ldrb	r3, [r7, #23]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d105      	bne.n	800279a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278e:	4b3c      	ldr	r3, [pc, #240]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	4a3b      	ldr	r2, [pc, #236]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002798:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 8087 	beq.w	80028b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027a4:	4b36      	ldr	r3, [pc, #216]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d061      	beq.n	8002874 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d146      	bne.n	8002846 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b8:	4b33      	ldr	r3, [pc, #204]	@ (8002888 <HAL_RCC_OscConfig+0x4cc>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027be:	f7fe fbd3 	bl	8000f68 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c6:	f7fe fbcf 	bl	8000f68 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e06d      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d8:	4b29      	ldr	r3, [pc, #164]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f0      	bne.n	80027c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027ec:	d108      	bne.n	8002800 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027ee:	4b24      	ldr	r3, [pc, #144]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	4921      	ldr	r1, [pc, #132]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002800:	4b1f      	ldr	r3, [pc, #124]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a19      	ldr	r1, [r3, #32]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002810:	430b      	orrs	r3, r1
 8002812:	491b      	ldr	r1, [pc, #108]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002818:	4b1b      	ldr	r3, [pc, #108]	@ (8002888 <HAL_RCC_OscConfig+0x4cc>)
 800281a:	2201      	movs	r2, #1
 800281c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281e:	f7fe fba3 	bl	8000f68 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002826:	f7fe fb9f 	bl	8000f68 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e03d      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002838:	4b11      	ldr	r3, [pc, #68]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x46a>
 8002844:	e035      	b.n	80028b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002846:	4b10      	ldr	r3, [pc, #64]	@ (8002888 <HAL_RCC_OscConfig+0x4cc>)
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7fe fb8c 	bl	8000f68 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002854:	f7fe fb88 	bl	8000f68 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e026      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002866:	4b06      	ldr	r3, [pc, #24]	@ (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x498>
 8002872:	e01e      	b.n	80028b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d107      	bne.n	800288c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e019      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
 8002880:	40021000 	.word	0x40021000
 8002884:	40007000 	.word	0x40007000
 8002888:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800288c:	4b0b      	ldr	r3, [pc, #44]	@ (80028bc <HAL_RCC_OscConfig+0x500>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	429a      	cmp	r2, r3
 800289e:	d106      	bne.n	80028ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d001      	beq.n	80028b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40021000 	.word	0x40021000

080028c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0d0      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d910      	bls.n	8002904 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e2:	4b67      	ldr	r3, [pc, #412]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f023 0207 	bic.w	r2, r3, #7
 80028ea:	4965      	ldr	r1, [pc, #404]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b63      	ldr	r3, [pc, #396]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0b8      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d020      	beq.n	8002952 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800291c:	4b59      	ldr	r3, [pc, #356]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4a58      	ldr	r2, [pc, #352]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002922:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002926:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002934:	4b53      	ldr	r3, [pc, #332]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	4a52      	ldr	r2, [pc, #328]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 800293a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800293e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002940:	4b50      	ldr	r3, [pc, #320]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	494d      	ldr	r1, [pc, #308]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 800294e:	4313      	orrs	r3, r2
 8002950:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d040      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d107      	bne.n	8002976 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002966:	4b47      	ldr	r3, [pc, #284]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d115      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e07f      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d107      	bne.n	800298e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297e:	4b41      	ldr	r3, [pc, #260]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e073      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e06b      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800299e:	4b39      	ldr	r3, [pc, #228]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f023 0203 	bic.w	r2, r3, #3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4936      	ldr	r1, [pc, #216]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b0:	f7fe fada 	bl	8000f68 <HAL_GetTick>
 80029b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b8:	f7fe fad6 	bl	8000f68 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e053      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 020c 	and.w	r2, r3, #12
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	429a      	cmp	r2, r3
 80029de:	d1eb      	bne.n	80029b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029e0:	4b27      	ldr	r3, [pc, #156]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d210      	bcs.n	8002a10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b24      	ldr	r3, [pc, #144]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 0207 	bic.w	r2, r3, #7
 80029f6:	4922      	ldr	r1, [pc, #136]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fe:	4b20      	ldr	r3, [pc, #128]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e032      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a1c:	4b19      	ldr	r3, [pc, #100]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4916      	ldr	r1, [pc, #88]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d009      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a3a:	4b12      	ldr	r3, [pc, #72]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	490e      	ldr	r1, [pc, #56]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a4e:	f000 f821 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8002a52:	4602      	mov	r2, r0
 8002a54:	4b0b      	ldr	r3, [pc, #44]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	091b      	lsrs	r3, r3, #4
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	490a      	ldr	r1, [pc, #40]	@ (8002a88 <HAL_RCC_ClockConfig+0x1c8>)
 8002a60:	5ccb      	ldrb	r3, [r1, r3]
 8002a62:	fa22 f303 	lsr.w	r3, r2, r3
 8002a66:	4a09      	ldr	r2, [pc, #36]	@ (8002a8c <HAL_RCC_ClockConfig+0x1cc>)
 8002a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a6a:	4b09      	ldr	r3, [pc, #36]	@ (8002a90 <HAL_RCC_ClockConfig+0x1d0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe fa38 	bl	8000ee4 <HAL_InitTick>

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40022000 	.word	0x40022000
 8002a84:	40021000 	.word	0x40021000
 8002a88:	08005520 	.word	0x08005520
 8002a8c:	20000000 	.word	0x20000000
 8002a90:	20000004 	.word	0x20000004

08002a94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60bb      	str	r3, [r7, #8]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002aae:	4b1e      	ldr	r3, [pc, #120]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d002      	beq.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x30>
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d003      	beq.n	8002aca <HAL_RCC_GetSysClockFreq+0x36>
 8002ac2:	e027      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ac4:	4b19      	ldr	r3, [pc, #100]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ac6:	613b      	str	r3, [r7, #16]
      break;
 8002ac8:	e027      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	0c9b      	lsrs	r3, r3, #18
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	4a17      	ldr	r2, [pc, #92]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ad4:	5cd3      	ldrb	r3, [r2, r3]
 8002ad6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d010      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ae2:	4b11      	ldr	r3, [pc, #68]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	0c5b      	lsrs	r3, r3, #17
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	4a11      	ldr	r2, [pc, #68]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002aee:	5cd3      	ldrb	r3, [r2, r3]
 8002af0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a0d      	ldr	r2, [pc, #52]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x98>)
 8002af6:	fb03 f202 	mul.w	r2, r3, r2
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	e004      	b.n	8002b0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a0c      	ldr	r2, [pc, #48]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b08:	fb02 f303 	mul.w	r3, r2, r3
 8002b0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	613b      	str	r3, [r7, #16]
      break;
 8002b12:	e002      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b14:	4b05      	ldr	r3, [pc, #20]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x98>)
 8002b16:	613b      	str	r3, [r7, #16]
      break;
 8002b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b1a:	693b      	ldr	r3, [r7, #16]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	371c      	adds	r7, #28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	007a1200 	.word	0x007a1200
 8002b30:	08005538 	.word	0x08005538
 8002b34:	08005548 	.word	0x08005548
 8002b38:	003d0900 	.word	0x003d0900

08002b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b40:	4b02      	ldr	r3, [pc, #8]	@ (8002b4c <HAL_RCC_GetHCLKFreq+0x10>)
 8002b42:	681b      	ldr	r3, [r3, #0]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr
 8002b4c:	20000000 	.word	0x20000000

08002b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b54:	f7ff fff2 	bl	8002b3c <HAL_RCC_GetHCLKFreq>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	4b05      	ldr	r3, [pc, #20]	@ (8002b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	0a1b      	lsrs	r3, r3, #8
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	4903      	ldr	r1, [pc, #12]	@ (8002b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b66:	5ccb      	ldrb	r3, [r1, r3]
 8002b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40021000 	.word	0x40021000
 8002b74:	08005530 	.word	0x08005530

08002b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b7c:	f7ff ffde 	bl	8002b3c <HAL_RCC_GetHCLKFreq>
 8002b80:	4602      	mov	r2, r0
 8002b82:	4b05      	ldr	r3, [pc, #20]	@ (8002b98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	0adb      	lsrs	r3, r3, #11
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	4903      	ldr	r1, [pc, #12]	@ (8002b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b8e:	5ccb      	ldrb	r3, [r1, r3]
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	08005530 	.word	0x08005530

08002ba0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd4 <RCC_Delay+0x34>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd8 <RCC_Delay+0x38>)
 8002bae:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb2:	0a5b      	lsrs	r3, r3, #9
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	fb02 f303 	mul.w	r3, r2, r3
 8002bba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bbc:	bf00      	nop
  }
  while (Delay --);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1e5a      	subs	r2, r3, #1
 8002bc2:	60fa      	str	r2, [r7, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1f9      	bne.n	8002bbc <RCC_Delay+0x1c>
}
 8002bc8:	bf00      	nop
 8002bca:	bf00      	nop
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr
 8002bd4:	20000000 	.word	0x20000000
 8002bd8:	10624dd3 	.word	0x10624dd3

08002bdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e041      	b.n	8002c72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d106      	bne.n	8002c08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7fe f858 	bl	8000cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3304      	adds	r3, #4
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	f000 faa2 	bl	8003164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d001      	beq.n	8002c94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e03a      	b.n	8002d0a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0201 	orr.w	r2, r2, #1
 8002caa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a18      	ldr	r2, [pc, #96]	@ (8002d14 <HAL_TIM_Base_Start_IT+0x98>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d00e      	beq.n	8002cd4 <HAL_TIM_Base_Start_IT+0x58>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cbe:	d009      	beq.n	8002cd4 <HAL_TIM_Base_Start_IT+0x58>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a14      	ldr	r2, [pc, #80]	@ (8002d18 <HAL_TIM_Base_Start_IT+0x9c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d004      	beq.n	8002cd4 <HAL_TIM_Base_Start_IT+0x58>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a13      	ldr	r2, [pc, #76]	@ (8002d1c <HAL_TIM_Base_Start_IT+0xa0>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d111      	bne.n	8002cf8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2b06      	cmp	r3, #6
 8002ce4:	d010      	beq.n	8002d08 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0201 	orr.w	r2, r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf6:	e007      	b.n	8002d08 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr
 8002d14:	40012c00 	.word	0x40012c00
 8002d18:	40000400 	.word	0x40000400
 8002d1c:	40000800 	.word	0x40000800

08002d20 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0201 	bic.w	r2, r2, #1
 8002d36:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6a1a      	ldr	r2, [r3, #32]
 8002d3e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10f      	bne.n	8002d68 <HAL_TIM_Base_Stop_IT+0x48>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6a1a      	ldr	r2, [r3, #32]
 8002d4e:	f240 4344 	movw	r3, #1092	@ 0x444
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d107      	bne.n	8002d68 <HAL_TIM_Base_Stop_IT+0x48>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0201 	bic.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d122      	bne.n	8002dd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d11b      	bne.n	8002dd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f06f 0202 	mvn.w	r2, #2
 8002da8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f9b4 	bl	800312c <HAL_TIM_IC_CaptureCallback>
 8002dc4:	e005      	b.n	8002dd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f9a7 	bl	800311a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f9b6 	bl	800313e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d122      	bne.n	8002e2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d11b      	bne.n	8002e2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f06f 0204 	mvn.w	r2, #4
 8002dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2202      	movs	r2, #2
 8002e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f98a 	bl	800312c <HAL_TIM_IC_CaptureCallback>
 8002e18:	e005      	b.n	8002e26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f97d 	bl	800311a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f98c 	bl	800313e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d122      	bne.n	8002e80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d11b      	bne.n	8002e80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f06f 0208 	mvn.w	r2, #8
 8002e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2204      	movs	r2, #4
 8002e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f960 	bl	800312c <HAL_TIM_IC_CaptureCallback>
 8002e6c:	e005      	b.n	8002e7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f953 	bl	800311a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f962 	bl	800313e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	2b10      	cmp	r3, #16
 8002e8c:	d122      	bne.n	8002ed4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f003 0310 	and.w	r3, r3, #16
 8002e98:	2b10      	cmp	r3, #16
 8002e9a:	d11b      	bne.n	8002ed4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f06f 0210 	mvn.w	r2, #16
 8002ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2208      	movs	r2, #8
 8002eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f936 	bl	800312c <HAL_TIM_IC_CaptureCallback>
 8002ec0:	e005      	b.n	8002ece <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f929 	bl	800311a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f938 	bl	800313e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d10e      	bne.n	8002f00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d107      	bne.n	8002f00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f06f 0201 	mvn.w	r2, #1
 8002ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7fd fa3e 	bl	800037c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f0a:	2b80      	cmp	r3, #128	@ 0x80
 8002f0c:	d10e      	bne.n	8002f2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f18:	2b80      	cmp	r3, #128	@ 0x80
 8002f1a:	d107      	bne.n	8002f2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fa7b 	bl	8003422 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f36:	2b40      	cmp	r3, #64	@ 0x40
 8002f38:	d10e      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f44:	2b40      	cmp	r3, #64	@ 0x40
 8002f46:	d107      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f8fc 	bl	8003150 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	2b20      	cmp	r3, #32
 8002f64:	d10e      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f003 0320 	and.w	r3, r3, #32
 8002f70:	2b20      	cmp	r3, #32
 8002f72:	d107      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0220 	mvn.w	r2, #32
 8002f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 fa46 	bl	8003410 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f84:	bf00      	nop
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <HAL_TIM_ConfigClockSource+0x1c>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e0b4      	b.n	8003112 <HAL_TIM_ConfigClockSource+0x186>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fe0:	d03e      	beq.n	8003060 <HAL_TIM_ConfigClockSource+0xd4>
 8002fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fe6:	f200 8087 	bhi.w	80030f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fee:	f000 8086 	beq.w	80030fe <HAL_TIM_ConfigClockSource+0x172>
 8002ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ff6:	d87f      	bhi.n	80030f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff8:	2b70      	cmp	r3, #112	@ 0x70
 8002ffa:	d01a      	beq.n	8003032 <HAL_TIM_ConfigClockSource+0xa6>
 8002ffc:	2b70      	cmp	r3, #112	@ 0x70
 8002ffe:	d87b      	bhi.n	80030f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003000:	2b60      	cmp	r3, #96	@ 0x60
 8003002:	d050      	beq.n	80030a6 <HAL_TIM_ConfigClockSource+0x11a>
 8003004:	2b60      	cmp	r3, #96	@ 0x60
 8003006:	d877      	bhi.n	80030f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003008:	2b50      	cmp	r3, #80	@ 0x50
 800300a:	d03c      	beq.n	8003086 <HAL_TIM_ConfigClockSource+0xfa>
 800300c:	2b50      	cmp	r3, #80	@ 0x50
 800300e:	d873      	bhi.n	80030f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003010:	2b40      	cmp	r3, #64	@ 0x40
 8003012:	d058      	beq.n	80030c6 <HAL_TIM_ConfigClockSource+0x13a>
 8003014:	2b40      	cmp	r3, #64	@ 0x40
 8003016:	d86f      	bhi.n	80030f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003018:	2b30      	cmp	r3, #48	@ 0x30
 800301a:	d064      	beq.n	80030e6 <HAL_TIM_ConfigClockSource+0x15a>
 800301c:	2b30      	cmp	r3, #48	@ 0x30
 800301e:	d86b      	bhi.n	80030f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003020:	2b20      	cmp	r3, #32
 8003022:	d060      	beq.n	80030e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003024:	2b20      	cmp	r3, #32
 8003026:	d867      	bhi.n	80030f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003028:	2b00      	cmp	r3, #0
 800302a:	d05c      	beq.n	80030e6 <HAL_TIM_ConfigClockSource+0x15a>
 800302c:	2b10      	cmp	r3, #16
 800302e:	d05a      	beq.n	80030e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003030:	e062      	b.n	80030f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003042:	f000 f968 	bl	8003316 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003054:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	609a      	str	r2, [r3, #8]
      break;
 800305e:	e04f      	b.n	8003100 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003070:	f000 f951 	bl	8003316 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003082:	609a      	str	r2, [r3, #8]
      break;
 8003084:	e03c      	b.n	8003100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003092:	461a      	mov	r2, r3
 8003094:	f000 f8c8 	bl	8003228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2150      	movs	r1, #80	@ 0x50
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 f91f 	bl	80032e2 <TIM_ITRx_SetConfig>
      break;
 80030a4:	e02c      	b.n	8003100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030b2:	461a      	mov	r2, r3
 80030b4:	f000 f8e6 	bl	8003284 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2160      	movs	r1, #96	@ 0x60
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 f90f 	bl	80032e2 <TIM_ITRx_SetConfig>
      break;
 80030c4:	e01c      	b.n	8003100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030d2:	461a      	mov	r2, r3
 80030d4:	f000 f8a8 	bl	8003228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2140      	movs	r1, #64	@ 0x40
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 f8ff 	bl	80032e2 <TIM_ITRx_SetConfig>
      break;
 80030e4:	e00c      	b.n	8003100 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4619      	mov	r1, r3
 80030f0:	4610      	mov	r0, r2
 80030f2:	f000 f8f6 	bl	80032e2 <TIM_ITRx_SetConfig>
      break;
 80030f6:	e003      	b.n	8003100 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
      break;
 80030fc:	e000      	b.n	8003100 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003110:	7bfb      	ldrb	r3, [r7, #15]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr

0800313e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr

08003150 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr
	...

08003164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a29      	ldr	r2, [pc, #164]	@ (800321c <TIM_Base_SetConfig+0xb8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d00b      	beq.n	8003194 <TIM_Base_SetConfig+0x30>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003182:	d007      	beq.n	8003194 <TIM_Base_SetConfig+0x30>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a26      	ldr	r2, [pc, #152]	@ (8003220 <TIM_Base_SetConfig+0xbc>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d003      	beq.n	8003194 <TIM_Base_SetConfig+0x30>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a25      	ldr	r2, [pc, #148]	@ (8003224 <TIM_Base_SetConfig+0xc0>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d108      	bne.n	80031a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800319a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a1c      	ldr	r2, [pc, #112]	@ (800321c <TIM_Base_SetConfig+0xb8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d00b      	beq.n	80031c6 <TIM_Base_SetConfig+0x62>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031b4:	d007      	beq.n	80031c6 <TIM_Base_SetConfig+0x62>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a19      	ldr	r2, [pc, #100]	@ (8003220 <TIM_Base_SetConfig+0xbc>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d003      	beq.n	80031c6 <TIM_Base_SetConfig+0x62>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a18      	ldr	r2, [pc, #96]	@ (8003224 <TIM_Base_SetConfig+0xc0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d108      	bne.n	80031d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a07      	ldr	r2, [pc, #28]	@ (800321c <TIM_Base_SetConfig+0xb8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d103      	bne.n	800320c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	615a      	str	r2, [r3, #20]
}
 8003212:	bf00      	nop
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr
 800321c:	40012c00 	.word	0x40012c00
 8003220:	40000400 	.word	0x40000400
 8003224:	40000800 	.word	0x40000800

08003228 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003228:	b480      	push	{r7}
 800322a:	b087      	sub	sp, #28
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	f023 0201 	bic.w	r2, r3, #1
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003252:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f023 030a 	bic.w	r3, r3, #10
 8003264:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	4313      	orrs	r3, r2
 800326c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	621a      	str	r2, [r3, #32]
}
 800327a:	bf00      	nop
 800327c:	371c      	adds	r7, #28
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr

08003284 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003284:	b480      	push	{r7}
 8003286:	b087      	sub	sp, #28
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	f023 0210 	bic.w	r2, r3, #16
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80032ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	031b      	lsls	r3, r3, #12
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80032c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	621a      	str	r2, [r3, #32]
}
 80032d8:	bf00      	nop
 80032da:	371c      	adds	r7, #28
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr

080032e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b085      	sub	sp, #20
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4313      	orrs	r3, r2
 8003300:	f043 0307 	orr.w	r3, r3, #7
 8003304:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	609a      	str	r2, [r3, #8]
}
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr

08003316 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003316:	b480      	push	{r7}
 8003318:	b087      	sub	sp, #28
 800331a:	af00      	add	r7, sp, #0
 800331c:	60f8      	str	r0, [r7, #12]
 800331e:	60b9      	str	r1, [r7, #8]
 8003320:	607a      	str	r2, [r7, #4]
 8003322:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003330:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	021a      	lsls	r2, r3, #8
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	431a      	orrs	r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	4313      	orrs	r3, r2
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	4313      	orrs	r3, r2
 8003342:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	609a      	str	r2, [r3, #8]
}
 800334a:	bf00      	nop
 800334c:	371c      	adds	r7, #28
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr

08003354 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003368:	2302      	movs	r3, #2
 800336a:	e046      	b.n	80033fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003392:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a16      	ldr	r2, [pc, #88]	@ (8003404 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d00e      	beq.n	80033ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033b8:	d009      	beq.n	80033ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a12      	ldr	r2, [pc, #72]	@ (8003408 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d004      	beq.n	80033ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a10      	ldr	r2, [pc, #64]	@ (800340c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d10c      	bne.n	80033e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	4313      	orrs	r3, r2
 80033de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr
 8003404:	40012c00 	.word	0x40012c00
 8003408:	40000400 	.word	0x40000400
 800340c:	40000800 	.word	0x40000800

08003410 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr

08003422 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr

08003434 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e042      	b.n	80034cc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d106      	bne.n	8003460 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7fd fcb2 	bl	8000dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2224      	movs	r2, #36	@ 0x24
 8003464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003476:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 fdc5 	bl	8004008 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800348c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695a      	ldr	r2, [r3, #20]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800349c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68da      	ldr	r2, [r3, #12]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2220      	movs	r2, #32
 80034c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08a      	sub	sp, #40	@ 0x28
 80034d8:	af02      	add	r7, sp, #8
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	603b      	str	r3, [r7, #0]
 80034e0:	4613      	mov	r3, r2
 80034e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b20      	cmp	r3, #32
 80034f2:	d16d      	bne.n	80035d0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <HAL_UART_Transmit+0x2c>
 80034fa:	88fb      	ldrh	r3, [r7, #6]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e066      	b.n	80035d2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2221      	movs	r2, #33	@ 0x21
 800350e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003512:	f7fd fd29 	bl	8000f68 <HAL_GetTick>
 8003516:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	88fa      	ldrh	r2, [r7, #6]
 800351c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	88fa      	ldrh	r2, [r7, #6]
 8003522:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800352c:	d108      	bne.n	8003540 <HAL_UART_Transmit+0x6c>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d104      	bne.n	8003540 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003536:	2300      	movs	r3, #0
 8003538:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	61bb      	str	r3, [r7, #24]
 800353e:	e003      	b.n	8003548 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003544:	2300      	movs	r3, #0
 8003546:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003548:	e02a      	b.n	80035a0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2200      	movs	r2, #0
 8003552:	2180      	movs	r1, #128	@ 0x80
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 fb14 	bl	8003b82 <UART_WaitOnFlagUntilTimeout>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e036      	b.n	80035d2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10b      	bne.n	8003582 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	461a      	mov	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003578:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	3302      	adds	r3, #2
 800357e:	61bb      	str	r3, [r7, #24]
 8003580:	e007      	b.n	8003592 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	781a      	ldrb	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	3301      	adds	r3, #1
 8003590:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1cf      	bne.n	800354a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2200      	movs	r2, #0
 80035b2:	2140      	movs	r1, #64	@ 0x40
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 fae4 	bl	8003b82 <UART_WaitOnFlagUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e006      	b.n	80035d2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	e000      	b.n	80035d2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80035d0:	2302      	movs	r3, #2
  }
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3720      	adds	r7, #32
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b084      	sub	sp, #16
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	4613      	mov	r3, r2
 80035e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b20      	cmp	r3, #32
 80035f2:	d112      	bne.n	800361a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d002      	beq.n	8003600 <HAL_UART_Receive_IT+0x26>
 80035fa:	88fb      	ldrh	r3, [r7, #6]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e00b      	b.n	800361c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800360a:	88fb      	ldrh	r3, [r7, #6]
 800360c:	461a      	mov	r2, r3
 800360e:	68b9      	ldr	r1, [r7, #8]
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 fb24 	bl	8003c5e <UART_Start_Receive_IT>
 8003616:	4603      	mov	r3, r0
 8003618:	e000      	b.n	800361c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800361a:	2302      	movs	r3, #2
  }
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b0ba      	sub	sp, #232	@ 0xe8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800364a:	2300      	movs	r3, #0
 800364c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003650:	2300      	movs	r3, #0
 8003652:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003662:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10f      	bne.n	800368a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800366a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800366e:	f003 0320 	and.w	r3, r3, #32
 8003672:	2b00      	cmp	r3, #0
 8003674:	d009      	beq.n	800368a <HAL_UART_IRQHandler+0x66>
 8003676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800367a:	f003 0320 	and.w	r3, r3, #32
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fc01 	bl	8003e8a <UART_Receive_IT>
      return;
 8003688:	e25b      	b.n	8003b42 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800368a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 80de 	beq.w	8003850 <HAL_UART_IRQHandler+0x22c>
 8003694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b00      	cmp	r3, #0
 800369e:	d106      	bne.n	80036ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 80d1 	beq.w	8003850 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00b      	beq.n	80036d2 <HAL_UART_IRQHandler+0xae>
 80036ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d005      	beq.n	80036d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ca:	f043 0201 	orr.w	r2, r3, #1
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00b      	beq.n	80036f6 <HAL_UART_IRQHandler+0xd2>
 80036de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d005      	beq.n	80036f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ee:	f043 0202 	orr.w	r2, r3, #2
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00b      	beq.n	800371a <HAL_UART_IRQHandler+0xf6>
 8003702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d005      	beq.n	800371a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003712:	f043 0204 	orr.w	r2, r3, #4
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800371a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d011      	beq.n	800374a <HAL_UART_IRQHandler+0x126>
 8003726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b00      	cmp	r3, #0
 8003730:	d105      	bne.n	800373e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d005      	beq.n	800374a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003742:	f043 0208 	orr.w	r2, r3, #8
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 81f2 	beq.w	8003b38 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b00      	cmp	r3, #0
 800375e:	d008      	beq.n	8003772 <HAL_UART_IRQHandler+0x14e>
 8003760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003764:	f003 0320 	and.w	r3, r3, #32
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 fb8c 	bl	8003e8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800377c:	2b00      	cmp	r3, #0
 800377e:	bf14      	ite	ne
 8003780:	2301      	movne	r3, #1
 8003782:	2300      	moveq	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d103      	bne.n	800379e <HAL_UART_IRQHandler+0x17a>
 8003796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800379a:	2b00      	cmp	r3, #0
 800379c:	d04f      	beq.n	800383e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fa96 	bl	8003cd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d041      	beq.n	8003836 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	3314      	adds	r3, #20
 80037b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037c0:	e853 3f00 	ldrex	r3, [r3]
 80037c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80037c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3314      	adds	r3, #20
 80037da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80037e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037ee:	e841 2300 	strex	r3, r2, [r1]
 80037f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1d9      	bne.n	80037b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003802:	2b00      	cmp	r3, #0
 8003804:	d013      	beq.n	800382e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800380a:	4a7e      	ldr	r2, [pc, #504]	@ (8003a04 <HAL_UART_IRQHandler+0x3e0>)
 800380c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003812:	4618      	mov	r0, r3
 8003814:	f7fe fb54 	bl	8001ec0 <HAL_DMA_Abort_IT>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d016      	beq.n	800384c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003828:	4610      	mov	r0, r2
 800382a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800382c:	e00e      	b.n	800384c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f993 	bl	8003b5a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003834:	e00a      	b.n	800384c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f98f 	bl	8003b5a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800383c:	e006      	b.n	800384c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f98b 	bl	8003b5a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800384a:	e175      	b.n	8003b38 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800384c:	bf00      	nop
    return;
 800384e:	e173      	b.n	8003b38 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003854:	2b01      	cmp	r3, #1
 8003856:	f040 814f 	bne.w	8003af8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800385a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800385e:	f003 0310 	and.w	r3, r3, #16
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 8148 	beq.w	8003af8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800386c:	f003 0310 	and.w	r3, r3, #16
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 8141 	beq.w	8003af8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003876:	2300      	movs	r3, #0
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	60bb      	str	r3, [r7, #8]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 80b6 	beq.w	8003a08 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 8145 	beq.w	8003b3c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038ba:	429a      	cmp	r2, r3
 80038bc:	f080 813e 	bcs.w	8003b3c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	f000 8088 	beq.w	80039e4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	330c      	adds	r3, #12
 80038da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038e2:	e853 3f00 	ldrex	r3, [r3]
 80038e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	330c      	adds	r3, #12
 80038fc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003900:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003904:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003908:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800390c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003910:	e841 2300 	strex	r3, r2, [r1]
 8003914:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003918:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1d9      	bne.n	80038d4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3314      	adds	r3, #20
 8003926:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003928:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800392a:	e853 3f00 	ldrex	r3, [r3]
 800392e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003930:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003932:	f023 0301 	bic.w	r3, r3, #1
 8003936:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	3314      	adds	r3, #20
 8003940:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003944:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003948:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800394c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003950:	e841 2300 	strex	r3, r2, [r1]
 8003954:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003956:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1e1      	bne.n	8003920 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3314      	adds	r3, #20
 8003962:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003964:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003966:	e853 3f00 	ldrex	r3, [r3]
 800396a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800396c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800396e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003972:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	3314      	adds	r3, #20
 800397c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003980:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003982:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003984:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003986:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003988:	e841 2300 	strex	r3, r2, [r1]
 800398c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800398e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1e3      	bne.n	800395c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	330c      	adds	r3, #12
 80039a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039ac:	e853 3f00 	ldrex	r3, [r3]
 80039b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80039b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039b4:	f023 0310 	bic.w	r3, r3, #16
 80039b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	330c      	adds	r3, #12
 80039c2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80039c6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80039c8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039ce:	e841 2300 	strex	r3, r2, [r1]
 80039d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1e3      	bne.n	80039a2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fe fa33 	bl	8001e4a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	4619      	mov	r1, r3
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f8b6 	bl	8003b6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a00:	e09c      	b.n	8003b3c <HAL_UART_IRQHandler+0x518>
 8003a02:	bf00      	nop
 8003a04:	08003d95 	.word	0x08003d95
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 808e 	beq.w	8003b40 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003a24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8089 	beq.w	8003b40 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	330c      	adds	r3, #12
 8003a34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a38:	e853 3f00 	ldrex	r3, [r3]
 8003a3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	330c      	adds	r3, #12
 8003a4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a52:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a5a:	e841 2300 	strex	r3, r2, [r1]
 8003a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1e3      	bne.n	8003a2e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	3314      	adds	r3, #20
 8003a6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a70:	e853 3f00 	ldrex	r3, [r3]
 8003a74:	623b      	str	r3, [r7, #32]
   return(result);
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	f023 0301 	bic.w	r3, r3, #1
 8003a7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3314      	adds	r3, #20
 8003a86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a92:	e841 2300 	strex	r3, r2, [r1]
 8003a96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1e3      	bne.n	8003a66 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	330c      	adds	r3, #12
 8003ab2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	e853 3f00 	ldrex	r3, [r3]
 8003aba:	60fb      	str	r3, [r7, #12]
   return(result);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0310 	bic.w	r3, r3, #16
 8003ac2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	330c      	adds	r3, #12
 8003acc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003ad0:	61fa      	str	r2, [r7, #28]
 8003ad2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad4:	69b9      	ldr	r1, [r7, #24]
 8003ad6:	69fa      	ldr	r2, [r7, #28]
 8003ad8:	e841 2300 	strex	r3, r2, [r1]
 8003adc:	617b      	str	r3, [r7, #20]
   return(result);
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1e3      	bne.n	8003aac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003aea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003aee:	4619      	mov	r1, r3
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f83b 	bl	8003b6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003af6:	e023      	b.n	8003b40 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d009      	beq.n	8003b18 <HAL_UART_IRQHandler+0x4f4>
 8003b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f953 	bl	8003dbc <UART_Transmit_IT>
    return;
 8003b16:	e014      	b.n	8003b42 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00e      	beq.n	8003b42 <HAL_UART_IRQHandler+0x51e>
 8003b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d008      	beq.n	8003b42 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f992 	bl	8003e5a <UART_EndTransmit_IT>
    return;
 8003b36:	e004      	b.n	8003b42 <HAL_UART_IRQHandler+0x51e>
    return;
 8003b38:	bf00      	nop
 8003b3a:	e002      	b.n	8003b42 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b3c:	bf00      	nop
 8003b3e:	e000      	b.n	8003b42 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b40:	bf00      	nop
  }
}
 8003b42:	37e8      	adds	r7, #232	@ 0xe8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr

08003b5a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr

08003b6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr

08003b82 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b090      	sub	sp, #64	@ 0x40
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	603b      	str	r3, [r7, #0]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b92:	e050      	b.n	8003c36 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9a:	d04c      	beq.n	8003c36 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d007      	beq.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ba2:	f7fd f9e1 	bl	8000f68 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d241      	bcs.n	8003c36 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	330c      	adds	r3, #12
 8003bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bbc:	e853 3f00 	ldrex	r3, [r3]
 8003bc0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	330c      	adds	r3, #12
 8003bd0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003bd2:	637a      	str	r2, [r7, #52]	@ 0x34
 8003bd4:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003bd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bda:	e841 2300 	strex	r3, r2, [r1]
 8003bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1e5      	bne.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3314      	adds	r3, #20
 8003bec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	e853 3f00 	ldrex	r3, [r3]
 8003bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f023 0301 	bic.w	r3, r3, #1
 8003bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3314      	adds	r3, #20
 8003c04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c06:	623a      	str	r2, [r7, #32]
 8003c08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0a:	69f9      	ldr	r1, [r7, #28]
 8003c0c:	6a3a      	ldr	r2, [r7, #32]
 8003c0e:	e841 2300 	strex	r3, r2, [r1]
 8003c12:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1e5      	bne.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e00f      	b.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	bf0c      	ite	eq
 8003c46:	2301      	moveq	r3, #1
 8003c48:	2300      	movne	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d09f      	beq.n	8003b94 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3740      	adds	r7, #64	@ 0x40
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b085      	sub	sp, #20
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	60f8      	str	r0, [r7, #12]
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	88fa      	ldrh	r2, [r7, #6]
 8003c76:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	88fa      	ldrh	r2, [r7, #6]
 8003c7c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2222      	movs	r2, #34	@ 0x22
 8003c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d007      	beq.n	8003ca4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ca2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695a      	ldr	r2, [r3, #20]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0220 	orr.w	r2, r2, #32
 8003cc2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr

08003cd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b095      	sub	sp, #84	@ 0x54
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce2:	e853 3f00 	ldrex	r3, [r3]
 8003ce6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	330c      	adds	r3, #12
 8003cf6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cf8:	643a      	str	r2, [r7, #64]	@ 0x40
 8003cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003cfe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d00:	e841 2300 	strex	r3, r2, [r1]
 8003d04:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1e5      	bne.n	8003cd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3314      	adds	r3, #20
 8003d12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	e853 3f00 	ldrex	r3, [r3]
 8003d1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f023 0301 	bic.w	r3, r3, #1
 8003d22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3314      	adds	r3, #20
 8003d2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d34:	e841 2300 	strex	r3, r2, [r1]
 8003d38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1e5      	bne.n	8003d0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d119      	bne.n	8003d7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	330c      	adds	r3, #12
 8003d4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	e853 3f00 	ldrex	r3, [r3]
 8003d56:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f023 0310 	bic.w	r3, r3, #16
 8003d5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	330c      	adds	r3, #12
 8003d66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d68:	61ba      	str	r2, [r7, #24]
 8003d6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6c:	6979      	ldr	r1, [r7, #20]
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	e841 2300 	strex	r3, r2, [r1]
 8003d74:	613b      	str	r3, [r7, #16]
   return(result);
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1e5      	bne.n	8003d48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d8a:	bf00      	nop
 8003d8c:	3754      	adds	r7, #84	@ 0x54
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bc80      	pop	{r7}
 8003d92:	4770      	bx	lr

08003d94 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f7ff fed3 	bl	8003b5a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003db4:	bf00      	nop
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b21      	cmp	r3, #33	@ 0x21
 8003dce:	d13e      	bne.n	8003e4e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dd8:	d114      	bne.n	8003e04 <UART_Transmit_IT+0x48>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d110      	bne.n	8003e04 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	461a      	mov	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003df6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	1c9a      	adds	r2, r3, #2
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	621a      	str	r2, [r3, #32]
 8003e02:	e008      	b.n	8003e16 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	1c59      	adds	r1, r3, #1
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6211      	str	r1, [r2, #32]
 8003e0e:	781a      	ldrb	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	4619      	mov	r1, r3
 8003e24:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10f      	bne.n	8003e4a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	e000      	b.n	8003e50 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e4e:	2302      	movs	r3, #2
  }
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bc80      	pop	{r7}
 8003e58:	4770      	bx	lr

08003e5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b082      	sub	sp, #8
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff fe64 	bl	8003b48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b08c      	sub	sp, #48	@ 0x30
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b22      	cmp	r3, #34	@ 0x22
 8003e9c:	f040 80ae 	bne.w	8003ffc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ea8:	d117      	bne.n	8003eda <UART_Receive_IT+0x50>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d113      	bne.n	8003eda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eba:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ecc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed2:	1c9a      	adds	r2, r3, #2
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ed8:	e026      	b.n	8003f28 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eec:	d007      	beq.n	8003efe <UART_Receive_IT+0x74>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10a      	bne.n	8003f0c <UART_Receive_IT+0x82>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d106      	bne.n	8003f0c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f08:	701a      	strb	r2, [r3, #0]
 8003f0a:	e008      	b.n	8003f1e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	4619      	mov	r1, r3
 8003f36:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d15d      	bne.n	8003ff8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0220 	bic.w	r2, r2, #32
 8003f4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695a      	ldr	r2, [r3, #20]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0201 	bic.w	r2, r2, #1
 8003f6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d135      	bne.n	8003fee <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	330c      	adds	r3, #12
 8003f8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	e853 3f00 	ldrex	r3, [r3]
 8003f96:	613b      	str	r3, [r7, #16]
   return(result);
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f023 0310 	bic.w	r3, r3, #16
 8003f9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	330c      	adds	r3, #12
 8003fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fa8:	623a      	str	r2, [r7, #32]
 8003faa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fac:	69f9      	ldr	r1, [r7, #28]
 8003fae:	6a3a      	ldr	r2, [r7, #32]
 8003fb0:	e841 2300 	strex	r3, r2, [r1]
 8003fb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1e5      	bne.n	8003f88 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0310 	and.w	r3, r3, #16
 8003fc6:	2b10      	cmp	r3, #16
 8003fc8:	d10a      	bne.n	8003fe0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7ff fdc0 	bl	8003b6c <HAL_UARTEx_RxEventCallback>
 8003fec:	e002      	b.n	8003ff4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fa74 	bl	80044dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	e002      	b.n	8003ffe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	e000      	b.n	8003ffe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003ffc:	2302      	movs	r3, #2
  }
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3730      	adds	r7, #48	@ 0x30
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	4313      	orrs	r3, r2
 8004036:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004042:	f023 030c 	bic.w	r3, r3, #12
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6812      	ldr	r2, [r2, #0]
 800404a:	68b9      	ldr	r1, [r7, #8]
 800404c:	430b      	orrs	r3, r1
 800404e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699a      	ldr	r2, [r3, #24]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a2c      	ldr	r2, [pc, #176]	@ (800411c <UART_SetConfig+0x114>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d103      	bne.n	8004078 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004070:	f7fe fd82 	bl	8002b78 <HAL_RCC_GetPCLK2Freq>
 8004074:	60f8      	str	r0, [r7, #12]
 8004076:	e002      	b.n	800407e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004078:	f7fe fd6a 	bl	8002b50 <HAL_RCC_GetPCLK1Freq>
 800407c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	009a      	lsls	r2, r3, #2
 8004088:	441a      	add	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	fbb2 f3f3 	udiv	r3, r2, r3
 8004094:	4a22      	ldr	r2, [pc, #136]	@ (8004120 <UART_SetConfig+0x118>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	095b      	lsrs	r3, r3, #5
 800409c:	0119      	lsls	r1, r3, #4
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	009a      	lsls	r2, r3, #2
 80040a8:	441a      	add	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004120 <UART_SetConfig+0x118>)
 80040b6:	fba3 0302 	umull	r0, r3, r3, r2
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	2064      	movs	r0, #100	@ 0x64
 80040be:	fb00 f303 	mul.w	r3, r0, r3
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	3332      	adds	r3, #50	@ 0x32
 80040c8:	4a15      	ldr	r2, [pc, #84]	@ (8004120 <UART_SetConfig+0x118>)
 80040ca:	fba2 2303 	umull	r2, r3, r2, r3
 80040ce:	095b      	lsrs	r3, r3, #5
 80040d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040d4:	4419      	add	r1, r3
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	4613      	mov	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	009a      	lsls	r2, r3, #2
 80040e0:	441a      	add	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80040ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004120 <UART_SetConfig+0x118>)
 80040ee:	fba3 0302 	umull	r0, r3, r3, r2
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	2064      	movs	r0, #100	@ 0x64
 80040f6:	fb00 f303 	mul.w	r3, r0, r3
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	3332      	adds	r3, #50	@ 0x32
 8004100:	4a07      	ldr	r2, [pc, #28]	@ (8004120 <UART_SetConfig+0x118>)
 8004102:	fba2 2303 	umull	r2, r3, r2, r3
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	f003 020f 	and.w	r2, r3, #15
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	440a      	add	r2, r1
 8004112:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004114:	bf00      	nop
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40013800 	.word	0x40013800
 8004120:	51eb851f 	.word	0x51eb851f

08004124 <NextionAddComp>:
 */

#include "Nextion.h"

uint8_t NextionAddComp(Nextion* nex, NexComp* _nexcomp, char* objectname, uint8_t __page, uint8_t __id, void (*callbackFuncOnPress)(), void (*callbackFuncOnRelease)())
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	70fb      	strb	r3, [r7, #3]
	//Make space before passing the object name to the nexcomp struct
	_nexcomp->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7fc f80a 	bl	800014c <strlen>
 8004138:	4603      	mov	r3, r0
 800413a:	3301      	adds	r3, #1
 800413c:	4618      	mov	r0, r3
 800413e:	f000 fc95 	bl	8004a6c <malloc>
 8004142:	4603      	mov	r3, r0
 8004144:	461a      	mov	r2, r3
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	60da      	str	r2, [r3, #12]
	//Pass the object name to the struct
	strcpy(_nexcomp->objname, objectname);
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fda5 	bl	8004ca0 <strcpy>

	//Pass the corresponding data from component to component struct
	_nexcomp->_id = __id;
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	7e3a      	ldrb	r2, [r7, #24]
 800415a:	705a      	strb	r2, [r3, #1]
	_nexcomp->_page = __page;
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	78fa      	ldrb	r2, [r7, #3]
 8004160:	701a      	strb	r2, [r3, #0]

	//Add the component struct to the list on the Nextion Struct
	nex->_NexCompArr[nex->_NexCompCount] = _nexcomp;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004168:	461a      	mov	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	321a      	adds	r2, #26
 800416e:	68b9      	ldr	r1, [r7, #8]
 8004170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nex->_NexCompCount++;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800417a:	3301      	adds	r3, #1
 800417c:	b2da      	uxtb	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

	//Bind the correct callback functions together
	_nexcomp->callbackOnPress = callbackFuncOnPress;
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	605a      	str	r2, [r3, #4]
	_nexcomp->callbackOnRelease = callbackFuncOnRelease;
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	6a3a      	ldr	r2, [r7, #32]
 800418e:	609a      	str	r2, [r3, #8]

	//Return OK
	return 0;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <NextionInit>:

uint8_t NextionInit(Nextion *nex, UART_HandleTypeDef *nextionUARTHandle)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b082      	sub	sp, #8
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	6039      	str	r1, [r7, #0]
	//Pass the used UART handle to the struct
	nex->nextionUARTHandle = nextionUARTHandle;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	601a      	str	r2, [r3, #0]

	//Start the parsing counters from zero
	nex->_arrCount = 0;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
	nex->_pkgCount = 0;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66

	//Start UART transaction using DMA
	HAL_UART_Receive_IT(nex->nextionUARTHandle, (uint8_t *)&nex->_RxData, 1);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6818      	ldr	r0, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3364      	adds	r3, #100	@ 0x64
 80041c2:	2201      	movs	r2, #1
 80041c4:	4619      	mov	r1, r3
 80041c6:	f7ff fa08 	bl	80035da <HAL_UART_Receive_IT>

	//Start the component count variable from zero
	nex->_NexCompCount  = 0;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

	//Return OK
	return 0;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <NextionUpdate>:

uint8_t NextionUpdate(UART_HandleTypeDef *huart, Nextion *nex)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
	if(huart->Instance == (nex->nextionUARTHandle->Instance))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	f040 80d9 	bne.w	80043a8 <NextionUpdate+0x1cc>
	{
		//Add the received byte to the array and increment the counter afterwards
		nex->_RxDataArr[nex->_arrCount] = nex->_RxData;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 80041fc:	4619      	mov	r1, r3
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	f893 2064 	ldrb.w	r2, [r3, #100]	@ 0x64
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	440b      	add	r3, r1
 8004208:	711a      	strb	r2, [r3, #4]
		nex->_arrCount++;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 8004210:	3301      	adds	r3, #1
 8004212:	b2da      	uxtb	r2, r3
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65

		//Count 0xFF
		if(nex->_RxData == 0xFF)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8004220:	2bff      	cmp	r3, #255	@ 0xff
 8004222:	d108      	bne.n	8004236 <NextionUpdate+0x5a>
			nex->_pkgCount++;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 800422a:	3301      	adds	r3, #1
 800422c:	b2da      	uxtb	r2, r3
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
 8004234:	e003      	b.n	800423e <NextionUpdate+0x62>
		else
			nex->_pkgCount = 0;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66

		//Assume a package is received after three 0xFF commands,
		//and start processing the data
		if(nex->_pkgCount == 3)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8004244:	2b03      	cmp	r3, #3
 8004246:	f040 80a7 	bne.w	8004398 <NextionUpdate+0x1bc>
		{
			//Determine the length (count) of the data
			uint8_t count = 0, FFCount = 0;
 800424a:	2300      	movs	r3, #0
 800424c:	73fb      	strb	r3, [r7, #15]
 800424e:	2300      	movs	r3, #0
 8004250:	73bb      	strb	r3, [r7, #14]
			for(uint8_t i = 0; FFCount < 3; i++)
 8004252:	2300      	movs	r3, #0
 8004254:	737b      	strb	r3, [r7, #13]
 8004256:	e00e      	b.n	8004276 <NextionUpdate+0x9a>
			{
				count++;
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	3301      	adds	r3, #1
 800425c:	73fb      	strb	r3, [r7, #15]
				if(nex->_RxDataArr[i] == 0xFF) FFCount++;
 800425e:	7b7b      	ldrb	r3, [r7, #13]
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	4413      	add	r3, r2
 8004264:	791b      	ldrb	r3, [r3, #4]
 8004266:	2bff      	cmp	r3, #255	@ 0xff
 8004268:	d102      	bne.n	8004270 <NextionUpdate+0x94>
 800426a:	7bbb      	ldrb	r3, [r7, #14]
 800426c:	3301      	adds	r3, #1
 800426e:	73bb      	strb	r3, [r7, #14]
			for(uint8_t i = 0; FFCount < 3; i++)
 8004270:	7b7b      	ldrb	r3, [r7, #13]
 8004272:	3301      	adds	r3, #1
 8004274:	737b      	strb	r3, [r7, #13]
 8004276:	7bbb      	ldrb	r3, [r7, #14]
 8004278:	2b02      	cmp	r3, #2
 800427a:	d9ed      	bls.n	8004258 <NextionUpdate+0x7c>
			}

			//In case of a touch event call the callback function accordingly,
			if(nex->_RxDataArr[0] == NEX_RET_EVENT_TOUCH_HEAD)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	791b      	ldrb	r3, [r3, #4]
 8004280:	2b65      	cmp	r3, #101	@ 0x65
 8004282:	d145      	bne.n	8004310 <NextionUpdate+0x134>
			{
				//Loop through the component struct array,
				for(uint8_t i = 0; i < nex->_NexCompCount; i++)
 8004284:	2300      	movs	r3, #0
 8004286:	733b      	strb	r3, [r7, #12]
 8004288:	e03c      	b.n	8004304 <NextionUpdate+0x128>
				{
					//Detect the affected component by its Page and ID
					if( (nex->_RxDataArr[2] == (nex->_NexCompArr[i]->_id)) && (nex->_RxDataArr[1] == (nex->_NexCompArr[i]->_page)) )
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	799a      	ldrb	r2, [r3, #6]
 800428e:	7b39      	ldrb	r1, [r7, #12]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	311a      	adds	r1, #26
 8004294:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004298:	785b      	ldrb	r3, [r3, #1]
 800429a:	429a      	cmp	r2, r3
 800429c:	d12f      	bne.n	80042fe <NextionUpdate+0x122>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	795a      	ldrb	r2, [r3, #5]
 80042a2:	7b39      	ldrb	r1, [r7, #12]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	311a      	adds	r1, #26
 80042a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d125      	bne.n	80042fe <NextionUpdate+0x122>
					{
						//Call the desired On Press or On Release callback function,
						if((nex->_RxDataArr[3] == NEX_EVENT_ON_PRESS) && (nex->_NexCompArr[i]->callbackOnPress != NULL))
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	79db      	ldrb	r3, [r3, #7]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d10e      	bne.n	80042d8 <NextionUpdate+0xfc>
 80042ba:	7b3a      	ldrb	r2, [r7, #12]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	321a      	adds	r2, #26
 80042c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d006      	beq.n	80042d8 <NextionUpdate+0xfc>
							nex->_NexCompArr[i]->callbackOnPress();
 80042ca:	7b3a      	ldrb	r2, [r7, #12]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	321a      	adds	r2, #26
 80042d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	4798      	blx	r3
						if((nex->_RxDataArr[3] == NEX_EVENT_ON_RELEASE) && (nex->_NexCompArr[i]->callbackOnRelease != NULL))
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	79db      	ldrb	r3, [r3, #7]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10e      	bne.n	80042fe <NextionUpdate+0x122>
 80042e0:	7b3a      	ldrb	r2, [r7, #12]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	321a      	adds	r2, #26
 80042e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d006      	beq.n	80042fe <NextionUpdate+0x122>
							nex->_NexCompArr[i]->callbackOnRelease();
 80042f0:	7b3a      	ldrb	r2, [r7, #12]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	321a      	adds	r2, #26
 80042f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	4798      	blx	r3
				for(uint8_t i = 0; i < nex->_NexCompCount; i++)
 80042fe:	7b3b      	ldrb	r3, [r7, #12]
 8004300:	3301      	adds	r3, #1
 8004302:	733b      	strb	r3, [r7, #12]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800430a:	7b3a      	ldrb	r2, [r7, #12]
 800430c:	429a      	cmp	r2, r3
 800430e:	d3bc      	bcc.n	800428a <NextionUpdate+0xae>
					}
				}
			}

			//If the received package contains string data
			if(nex->_RxDataArr[0] == NEX_RET_STRING_HEAD)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	791b      	ldrb	r3, [r3, #4]
 8004314:	2b70      	cmp	r3, #112	@ 0x70
 8004316:	d121      	bne.n	800435c <NextionUpdate+0x180>
			{
				nex->NextTextLen = 0;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9
				for(int i = 0; i < (count - 4); i++)
 8004320:	2300      	movs	r3, #0
 8004322:	60bb      	str	r3, [r7, #8]
 8004324:	e015      	b.n	8004352 <NextionUpdate+0x176>
				{
					nex->NexTextBuff[i] = nex->_RxDataArr[i+1];
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	3301      	adds	r3, #1
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	4413      	add	r3, r2
 800432e:	7919      	ldrb	r1, [r3, #4]
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	4413      	add	r3, r2
 8004336:	3399      	adds	r3, #153	@ 0x99
 8004338:	460a      	mov	r2, r1
 800433a:	701a      	strb	r2, [r3, #0]
					nex->NextTextLen++;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	f893 30d9 	ldrb.w	r3, [r3, #217]	@ 0xd9
 8004342:	3301      	adds	r3, #1
 8004344:	b2da      	uxtb	r2, r3
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9
				for(int i = 0; i < (count - 4); i++)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	3301      	adds	r3, #1
 8004350:	60bb      	str	r3, [r7, #8]
 8004352:	7bfb      	ldrb	r3, [r7, #15]
 8004354:	3b04      	subs	r3, #4
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	429a      	cmp	r2, r3
 800435a:	dbe4      	blt.n	8004326 <NextionUpdate+0x14a>
				}
			}

			//If the received package contains integer data
			if(nex->_RxDataArr[0] == NEX_RET_NUMBER_HEAD)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	791b      	ldrb	r3, [r3, #4]
 8004360:	2b71      	cmp	r3, #113	@ 0x71
 8004362:	d111      	bne.n	8004388 <NextionUpdate+0x1ac>
			{
				nex->NextNumBuff = ((uint32_t)nex->_RxDataArr[4]<<24)|((uint32_t)nex->_RxDataArr[3]<<16)|(nex->_RxDataArr[2]<<8)|(nex->_RxDataArr[1]);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	7a1b      	ldrb	r3, [r3, #8]
 8004368:	061a      	lsls	r2, r3, #24
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	79db      	ldrb	r3, [r3, #7]
 800436e:	041b      	lsls	r3, r3, #16
 8004370:	431a      	orrs	r2, r3
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	799b      	ldrb	r3, [r3, #6]
 8004376:	021b      	lsls	r3, r3, #8
 8004378:	4313      	orrs	r3, r2
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	7952      	ldrb	r2, [r2, #5]
 800437e:	4313      	orrs	r3, r2
 8004380:	461a      	mov	r2, r3
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
			}

			//Reset the buffer counters
			nex->_pkgCount = 0;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
			nex->_arrCount = 0;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
		}

		HAL_UART_Receive_IT(nex->nextionUARTHandle, (uint8_t *)&nex->_RxData, 1);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	3364      	adds	r3, #100	@ 0x64
 80043a0:	2201      	movs	r2, #1
 80043a2:	4619      	mov	r1, r3
 80043a4:	f7ff f919 	bl	80035da <HAL_UART_Receive_IT>
	}

	//Return OK
	return 0;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <NextionSetText>:
	//Return OK
	return 0;
}

uint8_t NextionSetText(Nextion *nex, NexComp *comp, char *usertext)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b094      	sub	sp, #80	@ 0x50
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
	//Allocate a static buffer for combining the transfer command string
	char transmitBuff[NEXTION_TEXT_BUFF_LEN] = {0};
 80043c0:	2300      	movs	r3, #0
 80043c2:	613b      	str	r3, [r7, #16]
 80043c4:	f107 0314 	add.w	r3, r7, #20
 80043c8:	223c      	movs	r2, #60	@ 0x3c
 80043ca:	2100      	movs	r1, #0
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 fc23 	bl	8004c18 <memset>

	//Combine required commands in a single string
	sprintf(transmitBuff, "%s.txt=\"%s\"", comp->objname, usertext);
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	f107 0010 	add.w	r0, r7, #16
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4906      	ldr	r1, [pc, #24]	@ (80043f8 <NextionSetText+0x44>)
 80043de:	f000 fbfb 	bl	8004bd8 <siprintf>

	//Send the combined command to Nextion and wait for the received answer
	NextionSendCommand(nex, transmitBuff);
 80043e2:	f107 0310 	add.w	r3, r7, #16
 80043e6:	4619      	mov	r1, r3
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 f82b 	bl	8004444 <NextionSendCommand>

	//Return OK
	return 0;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3750      	adds	r7, #80	@ 0x50
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	08005424 	.word	0x08005424

080043fc <NextionSetVal>:
	//Return OK
	return 0;
}

uint8_t NextionSetVal(Nextion *nex, NexComp *comp, int userval)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b094      	sub	sp, #80	@ 0x50
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
	//Allocate a static buffer for combining the transfer command string
	char transmitBuff[NEXTION_TEXT_BUFF_LEN] = {0};
 8004408:	2300      	movs	r3, #0
 800440a:	613b      	str	r3, [r7, #16]
 800440c:	f107 0314 	add.w	r3, r7, #20
 8004410:	223c      	movs	r2, #60	@ 0x3c
 8004412:	2100      	movs	r1, #0
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fbff 	bl	8004c18 <memset>

	//Combine required commands in a single string
	sprintf(transmitBuff, "%s.val=%d", comp->objname, userval);
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	f107 0010 	add.w	r0, r7, #16
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4906      	ldr	r1, [pc, #24]	@ (8004440 <NextionSetVal+0x44>)
 8004426:	f000 fbd7 	bl	8004bd8 <siprintf>

	//Send the combined command to Nextion and wait for the received answer
	NextionSendCommand(nex, transmitBuff);
 800442a:	f107 0310 	add.w	r3, r7, #16
 800442e:	4619      	mov	r1, r3
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 f807 	bl	8004444 <NextionSendCommand>

	//Return OK
	return 0;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3750      	adds	r7, #80	@ 0x50
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	0800543c 	.word	0x0800543c

08004444 <NextionSendCommand>:

char ENDTERMS[]={255,255,255};
uint8_t NextionSendCommand(Nextion *nex, char *_command)
{
 8004444:	b590      	push	{r4, r7, lr}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(nex->nextionUARTHandle, (uint8_t *)_command, strlen((const char*)_command), NEXTION_TIMEOUT);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681c      	ldr	r4, [r3, #0]
 8004452:	6838      	ldr	r0, [r7, #0]
 8004454:	f7fb fe7a 	bl	800014c <strlen>
 8004458:	4603      	mov	r3, r0
 800445a:	b29a      	uxth	r2, r3
 800445c:	23fa      	movs	r3, #250	@ 0xfa
 800445e:	6839      	ldr	r1, [r7, #0]
 8004460:	4620      	mov	r0, r4
 8004462:	f7ff f837 	bl	80034d4 <HAL_UART_Transmit>
	NextionEndCommand(nex);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f806 	bl	8004478 <NextionEndCommand>

	//Return OK
	return 0;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	bd90      	pop	{r4, r7, pc}
	...

08004478 <NextionEndCommand>:

uint8_t NextionEndCommand(Nextion *nex)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
	uint8_t EndCommand[3] = {255, 255, 255};
 8004480:	4a0c      	ldr	r2, [pc, #48]	@ (80044b4 <NextionEndCommand+0x3c>)
 8004482:	f107 030c 	add.w	r3, r7, #12
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	4611      	mov	r1, r2
 800448a:	8019      	strh	r1, [r3, #0]
 800448c:	3302      	adds	r3, #2
 800448e:	0c12      	lsrs	r2, r2, #16
 8004490:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(nex->nextionUARTHandle, EndCommand, 3, NEXTION_TIMEOUT);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6818      	ldr	r0, [r3, #0]
 8004496:	f107 010c 	add.w	r1, r7, #12
 800449a:	23fa      	movs	r3, #250	@ 0xfa
 800449c:	2203      	movs	r2, #3
 800449e:	f7ff f819 	bl	80034d4 <HAL_UART_Transmit>
	NextionRestartIT(nex);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f808 	bl	80044b8 <NextionRestartIT>

	//Return OK
	return 0;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	08005448 	.word	0x08005448

080044b8 <NextionRestartIT>:

//Following two functions are not needed anymore and will be removed in the future,
uint8_t NextionRestartIT(Nextion *nex)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(nex->nextionUARTHandle, (uint8_t *)&nex->_RxData, 1);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6818      	ldr	r0, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3364      	adds	r3, #100	@ 0x64
 80044c8:	2201      	movs	r2, #1
 80044ca:	4619      	mov	r1, r3
 80044cc:	f7ff f885 	bl	80035da <HAL_UART_Receive_IT>

	//Return OK
	return 0;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
	...

080044dc <HAL_UART_RxCpltCallback>:
static NexComp min_cellt_label;
static NexComp min_cellt_id_label;

static NexComp comm_status_label;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]

	NextionUpdate(huart, &nextion_instance);
 80044e4:	4903      	ldr	r1, [pc, #12]	@ (80044f4 <HAL_UART_RxCpltCallback+0x18>)
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7ff fe78 	bl	80041dc <NextionUpdate>
}
 80044ec:	bf00      	nop
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	200002a0 	.word	0x200002a0

080044f8 <nextion_disp_init>:

void nextion_disp_init(void) {
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af04      	add	r7, sp, #16
	NextionInit(&nextion_instance, &huart1);
 80044fe:	494b      	ldr	r1, [pc, #300]	@ (800462c <nextion_disp_init+0x134>)
 8004500:	484b      	ldr	r0, [pc, #300]	@ (8004630 <nextion_disp_init+0x138>)
 8004502:	f7ff fe4a 	bl	800419a <NextionInit>

	NextionAddComp(&nextion_instance, &batt_volt_label, "home.batt_volt", 3, 5,
 8004506:	2300      	movs	r3, #0
 8004508:	9302      	str	r3, [sp, #8]
 800450a:	2300      	movs	r3, #0
 800450c:	9301      	str	r3, [sp, #4]
 800450e:	2305      	movs	r3, #5
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	2303      	movs	r3, #3
 8004514:	4a47      	ldr	r2, [pc, #284]	@ (8004634 <nextion_disp_init+0x13c>)
 8004516:	4948      	ldr	r1, [pc, #288]	@ (8004638 <nextion_disp_init+0x140>)
 8004518:	4845      	ldr	r0, [pc, #276]	@ (8004630 <nextion_disp_init+0x138>)
 800451a:	f7ff fe03 	bl	8004124 <NextionAddComp>
	NULL, NULL);
	NextionAddComp(&nextion_instance, &batt_curr_label, "home.batt_curr", 3, 6, NULL,
 800451e:	2300      	movs	r3, #0
 8004520:	9302      	str	r3, [sp, #8]
 8004522:	2300      	movs	r3, #0
 8004524:	9301      	str	r3, [sp, #4]
 8004526:	2306      	movs	r3, #6
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	2303      	movs	r3, #3
 800452c:	4a43      	ldr	r2, [pc, #268]	@ (800463c <nextion_disp_init+0x144>)
 800452e:	4944      	ldr	r1, [pc, #272]	@ (8004640 <nextion_disp_init+0x148>)
 8004530:	483f      	ldr	r0, [pc, #252]	@ (8004630 <nextion_disp_init+0x138>)
 8004532:	f7ff fdf7 	bl	8004124 <NextionAddComp>
	NULL);
	NextionAddComp(&nextion_instance, &batt_soc_label, "home.batt_soc", 3, 7, NULL, NULL);
 8004536:	2300      	movs	r3, #0
 8004538:	9302      	str	r3, [sp, #8]
 800453a:	2300      	movs	r3, #0
 800453c:	9301      	str	r3, [sp, #4]
 800453e:	2307      	movs	r3, #7
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	2303      	movs	r3, #3
 8004544:	4a3f      	ldr	r2, [pc, #252]	@ (8004644 <nextion_disp_init+0x14c>)
 8004546:	4940      	ldr	r1, [pc, #256]	@ (8004648 <nextion_disp_init+0x150>)
 8004548:	4839      	ldr	r0, [pc, #228]	@ (8004630 <nextion_disp_init+0x138>)
 800454a:	f7ff fdeb 	bl	8004124 <NextionAddComp>
	NextionAddComp(&nextion_instance, &comm_status_label, "home.comm_status", 3, 4, NULL,
 800454e:	2300      	movs	r3, #0
 8004550:	9302      	str	r3, [sp, #8]
 8004552:	2300      	movs	r3, #0
 8004554:	9301      	str	r3, [sp, #4]
 8004556:	2304      	movs	r3, #4
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	2303      	movs	r3, #3
 800455c:	4a3b      	ldr	r2, [pc, #236]	@ (800464c <nextion_disp_init+0x154>)
 800455e:	493c      	ldr	r1, [pc, #240]	@ (8004650 <nextion_disp_init+0x158>)
 8004560:	4833      	ldr	r0, [pc, #204]	@ (8004630 <nextion_disp_init+0x138>)
 8004562:	f7ff fddf 	bl	8004124 <NextionAddComp>
	NULL);

	NextionAddComp(&nextion_instance, &max_cellv_label, "page1.max_cellv", 5, 7, NULL,
 8004566:	2300      	movs	r3, #0
 8004568:	9302      	str	r3, [sp, #8]
 800456a:	2300      	movs	r3, #0
 800456c:	9301      	str	r3, [sp, #4]
 800456e:	2307      	movs	r3, #7
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	2305      	movs	r3, #5
 8004574:	4a37      	ldr	r2, [pc, #220]	@ (8004654 <nextion_disp_init+0x15c>)
 8004576:	4938      	ldr	r1, [pc, #224]	@ (8004658 <nextion_disp_init+0x160>)
 8004578:	482d      	ldr	r0, [pc, #180]	@ (8004630 <nextion_disp_init+0x138>)
 800457a:	f7ff fdd3 	bl	8004124 <NextionAddComp>
	NULL);
	NextionAddComp(&nextion_instance, &max_cellv_id_label, "page1.max_cellv_id", 5, 8, NULL,
 800457e:	2300      	movs	r3, #0
 8004580:	9302      	str	r3, [sp, #8]
 8004582:	2300      	movs	r3, #0
 8004584:	9301      	str	r3, [sp, #4]
 8004586:	2308      	movs	r3, #8
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	2305      	movs	r3, #5
 800458c:	4a33      	ldr	r2, [pc, #204]	@ (800465c <nextion_disp_init+0x164>)
 800458e:	4934      	ldr	r1, [pc, #208]	@ (8004660 <nextion_disp_init+0x168>)
 8004590:	4827      	ldr	r0, [pc, #156]	@ (8004630 <nextion_disp_init+0x138>)
 8004592:	f7ff fdc7 	bl	8004124 <NextionAddComp>
	NULL);
	NextionAddComp(&nextion_instance, &min_cellv_label, "page1.min_cellv", 5, 9, NULL,
 8004596:	2300      	movs	r3, #0
 8004598:	9302      	str	r3, [sp, #8]
 800459a:	2300      	movs	r3, #0
 800459c:	9301      	str	r3, [sp, #4]
 800459e:	2309      	movs	r3, #9
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	2305      	movs	r3, #5
 80045a4:	4a2f      	ldr	r2, [pc, #188]	@ (8004664 <nextion_disp_init+0x16c>)
 80045a6:	4930      	ldr	r1, [pc, #192]	@ (8004668 <nextion_disp_init+0x170>)
 80045a8:	4821      	ldr	r0, [pc, #132]	@ (8004630 <nextion_disp_init+0x138>)
 80045aa:	f7ff fdbb 	bl	8004124 <NextionAddComp>
	NULL);
	NextionAddComp(&nextion_instance, &min_cellv_id_label, "page1.min_cellv_id", 5, 10, NULL,
 80045ae:	2300      	movs	r3, #0
 80045b0:	9302      	str	r3, [sp, #8]
 80045b2:	2300      	movs	r3, #0
 80045b4:	9301      	str	r3, [sp, #4]
 80045b6:	230a      	movs	r3, #10
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	2305      	movs	r3, #5
 80045bc:	4a2b      	ldr	r2, [pc, #172]	@ (800466c <nextion_disp_init+0x174>)
 80045be:	492c      	ldr	r1, [pc, #176]	@ (8004670 <nextion_disp_init+0x178>)
 80045c0:	481b      	ldr	r0, [pc, #108]	@ (8004630 <nextion_disp_init+0x138>)
 80045c2:	f7ff fdaf 	bl	8004124 <NextionAddComp>
	NULL);

	NextionAddComp(&nextion_instance, &max_cellt_label, "page2.max_cellt", 6, 7, NULL,
 80045c6:	2300      	movs	r3, #0
 80045c8:	9302      	str	r3, [sp, #8]
 80045ca:	2300      	movs	r3, #0
 80045cc:	9301      	str	r3, [sp, #4]
 80045ce:	2307      	movs	r3, #7
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	2306      	movs	r3, #6
 80045d4:	4a27      	ldr	r2, [pc, #156]	@ (8004674 <nextion_disp_init+0x17c>)
 80045d6:	4928      	ldr	r1, [pc, #160]	@ (8004678 <nextion_disp_init+0x180>)
 80045d8:	4815      	ldr	r0, [pc, #84]	@ (8004630 <nextion_disp_init+0x138>)
 80045da:	f7ff fda3 	bl	8004124 <NextionAddComp>
	NULL);
	NextionAddComp(&nextion_instance, &max_cellt_id_label, "page2.max_cellt_id", 6, 8, NULL,
 80045de:	2300      	movs	r3, #0
 80045e0:	9302      	str	r3, [sp, #8]
 80045e2:	2300      	movs	r3, #0
 80045e4:	9301      	str	r3, [sp, #4]
 80045e6:	2308      	movs	r3, #8
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	2306      	movs	r3, #6
 80045ec:	4a23      	ldr	r2, [pc, #140]	@ (800467c <nextion_disp_init+0x184>)
 80045ee:	4924      	ldr	r1, [pc, #144]	@ (8004680 <nextion_disp_init+0x188>)
 80045f0:	480f      	ldr	r0, [pc, #60]	@ (8004630 <nextion_disp_init+0x138>)
 80045f2:	f7ff fd97 	bl	8004124 <NextionAddComp>
	NULL);
	NextionAddComp(&nextion_instance, &min_cellt_label, "page2.min_cellt", 6, 9, NULL,
 80045f6:	2300      	movs	r3, #0
 80045f8:	9302      	str	r3, [sp, #8]
 80045fa:	2300      	movs	r3, #0
 80045fc:	9301      	str	r3, [sp, #4]
 80045fe:	2309      	movs	r3, #9
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	2306      	movs	r3, #6
 8004604:	4a1f      	ldr	r2, [pc, #124]	@ (8004684 <nextion_disp_init+0x18c>)
 8004606:	4920      	ldr	r1, [pc, #128]	@ (8004688 <nextion_disp_init+0x190>)
 8004608:	4809      	ldr	r0, [pc, #36]	@ (8004630 <nextion_disp_init+0x138>)
 800460a:	f7ff fd8b 	bl	8004124 <NextionAddComp>
	NULL);
	NextionAddComp(&nextion_instance, &min_cellt_id_label, "page2.min_cellt_id", 6, 10, NULL,
 800460e:	2300      	movs	r3, #0
 8004610:	9302      	str	r3, [sp, #8]
 8004612:	2300      	movs	r3, #0
 8004614:	9301      	str	r3, [sp, #4]
 8004616:	230a      	movs	r3, #10
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	2306      	movs	r3, #6
 800461c:	4a1b      	ldr	r2, [pc, #108]	@ (800468c <nextion_disp_init+0x194>)
 800461e:	491c      	ldr	r1, [pc, #112]	@ (8004690 <nextion_disp_init+0x198>)
 8004620:	4803      	ldr	r0, [pc, #12]	@ (8004630 <nextion_disp_init+0x138>)
 8004622:	f7ff fd7f 	bl	8004124 <NextionAddComp>
	NULL);

}
 8004626:	bf00      	nop
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	20000254 	.word	0x20000254
 8004630:	200002a0 	.word	0x200002a0
 8004634:	0800544c 	.word	0x0800544c
 8004638:	20000380 	.word	0x20000380
 800463c:	0800545c 	.word	0x0800545c
 8004640:	20000390 	.word	0x20000390
 8004644:	0800546c 	.word	0x0800546c
 8004648:	200003a0 	.word	0x200003a0
 800464c:	0800547c 	.word	0x0800547c
 8004650:	20000430 	.word	0x20000430
 8004654:	08005490 	.word	0x08005490
 8004658:	200003b0 	.word	0x200003b0
 800465c:	080054a0 	.word	0x080054a0
 8004660:	200003c0 	.word	0x200003c0
 8004664:	080054b4 	.word	0x080054b4
 8004668:	200003d0 	.word	0x200003d0
 800466c:	080054c4 	.word	0x080054c4
 8004670:	200003e0 	.word	0x200003e0
 8004674:	080054d8 	.word	0x080054d8
 8004678:	200003f0 	.word	0x200003f0
 800467c:	080054e8 	.word	0x080054e8
 8004680:	20000400 	.word	0x20000400
 8004684:	080054fc 	.word	0x080054fc
 8004688:	20000410 	.word	0x20000410
 800468c:	0800550c 	.word	0x0800550c
 8004690:	20000420 	.word	0x20000420

08004694 <update_batt_volt_label>:

void update_batt_volt_label(int val){
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &batt_volt_label, val);
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	4904      	ldr	r1, [pc, #16]	@ (80046b0 <update_batt_volt_label+0x1c>)
 80046a0:	4804      	ldr	r0, [pc, #16]	@ (80046b4 <update_batt_volt_label+0x20>)
 80046a2:	f7ff feab 	bl	80043fc <NextionSetVal>
}
 80046a6:	bf00      	nop
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	20000380 	.word	0x20000380
 80046b4:	200002a0 	.word	0x200002a0

080046b8 <update_batt_curr_label>:

void update_batt_curr_label(int val){
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &batt_curr_label, val);
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	4904      	ldr	r1, [pc, #16]	@ (80046d4 <update_batt_curr_label+0x1c>)
 80046c4:	4804      	ldr	r0, [pc, #16]	@ (80046d8 <update_batt_curr_label+0x20>)
 80046c6:	f7ff fe99 	bl	80043fc <NextionSetVal>
}
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20000390 	.word	0x20000390
 80046d8:	200002a0 	.word	0x200002a0

080046dc <update_batt_soc_label>:

void update_batt_soc_label(int val){
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &batt_soc_label, val);
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	4904      	ldr	r1, [pc, #16]	@ (80046f8 <update_batt_soc_label+0x1c>)
 80046e8:	4804      	ldr	r0, [pc, #16]	@ (80046fc <update_batt_soc_label+0x20>)
 80046ea:	f7ff fe87 	bl	80043fc <NextionSetVal>
}
 80046ee:	bf00      	nop
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	200003a0 	.word	0x200003a0
 80046fc:	200002a0 	.word	0x200002a0

08004700 <update_comm_status_label>:

void update_comm_status_label(char *str) {
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
	NextionSetText(&nextion_instance, &comm_status_label, str);
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	4904      	ldr	r1, [pc, #16]	@ (800471c <update_comm_status_label+0x1c>)
 800470c:	4804      	ldr	r0, [pc, #16]	@ (8004720 <update_comm_status_label+0x20>)
 800470e:	f7ff fe51 	bl	80043b4 <NextionSetText>
}
 8004712:	bf00      	nop
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20000430 	.word	0x20000430
 8004720:	200002a0 	.word	0x200002a0

08004724 <update_max_cellv_label>:


void update_max_cellv_label(int val) {
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &max_cellv_label, val);
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	4904      	ldr	r1, [pc, #16]	@ (8004740 <update_max_cellv_label+0x1c>)
 8004730:	4804      	ldr	r0, [pc, #16]	@ (8004744 <update_max_cellv_label+0x20>)
 8004732:	f7ff fe63 	bl	80043fc <NextionSetVal>
}
 8004736:	bf00      	nop
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	200003b0 	.word	0x200003b0
 8004744:	200002a0 	.word	0x200002a0

08004748 <update_max_cellv_id_label>:

void update_max_cellv_id_label(int val) {
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &max_cellv_id_label, val);
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	4904      	ldr	r1, [pc, #16]	@ (8004764 <update_max_cellv_id_label+0x1c>)
 8004754:	4804      	ldr	r0, [pc, #16]	@ (8004768 <update_max_cellv_id_label+0x20>)
 8004756:	f7ff fe51 	bl	80043fc <NextionSetVal>
}
 800475a:	bf00      	nop
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	200003c0 	.word	0x200003c0
 8004768:	200002a0 	.word	0x200002a0

0800476c <update_min_cellv_label>:

void update_min_cellv_label(int val) {
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &min_cellv_label, val);
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	4904      	ldr	r1, [pc, #16]	@ (8004788 <update_min_cellv_label+0x1c>)
 8004778:	4804      	ldr	r0, [pc, #16]	@ (800478c <update_min_cellv_label+0x20>)
 800477a:	f7ff fe3f 	bl	80043fc <NextionSetVal>
}
 800477e:	bf00      	nop
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	200003d0 	.word	0x200003d0
 800478c:	200002a0 	.word	0x200002a0

08004790 <update_min_cellv_id_label>:

void update_min_cellv_id_label(int val) {
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &min_cellv_id_label, val);
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	4904      	ldr	r1, [pc, #16]	@ (80047ac <update_min_cellv_id_label+0x1c>)
 800479c:	4804      	ldr	r0, [pc, #16]	@ (80047b0 <update_min_cellv_id_label+0x20>)
 800479e:	f7ff fe2d 	bl	80043fc <NextionSetVal>
}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	200003e0 	.word	0x200003e0
 80047b0:	200002a0 	.word	0x200002a0

080047b4 <update_max_cellt_label>:


void update_max_cellt_label(int val) {
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &max_cellt_label, val);
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	4904      	ldr	r1, [pc, #16]	@ (80047d0 <update_max_cellt_label+0x1c>)
 80047c0:	4804      	ldr	r0, [pc, #16]	@ (80047d4 <update_max_cellt_label+0x20>)
 80047c2:	f7ff fe1b 	bl	80043fc <NextionSetVal>
}
 80047c6:	bf00      	nop
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	200003f0 	.word	0x200003f0
 80047d4:	200002a0 	.word	0x200002a0

080047d8 <update_max_cellt_id_label>:

void update_max_cellt_id_label(int val) {
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &max_cellt_id_label, val);
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	4904      	ldr	r1, [pc, #16]	@ (80047f4 <update_max_cellt_id_label+0x1c>)
 80047e4:	4804      	ldr	r0, [pc, #16]	@ (80047f8 <update_max_cellt_id_label+0x20>)
 80047e6:	f7ff fe09 	bl	80043fc <NextionSetVal>
}
 80047ea:	bf00      	nop
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20000400 	.word	0x20000400
 80047f8:	200002a0 	.word	0x200002a0

080047fc <update_min_cellt_label>:

void update_min_cellt_label(int val) {
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &min_cellt_label, val);
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	4904      	ldr	r1, [pc, #16]	@ (8004818 <update_min_cellt_label+0x1c>)
 8004808:	4804      	ldr	r0, [pc, #16]	@ (800481c <update_min_cellt_label+0x20>)
 800480a:	f7ff fdf7 	bl	80043fc <NextionSetVal>
}
 800480e:	bf00      	nop
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20000410 	.word	0x20000410
 800481c:	200002a0 	.word	0x200002a0

08004820 <update_min_cellt_id_label>:

void update_min_cellt_id_label(int val) {
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &min_cellt_id_label, val);
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	4904      	ldr	r1, [pc, #16]	@ (800483c <update_min_cellt_id_label+0x1c>)
 800482c:	4804      	ldr	r0, [pc, #16]	@ (8004840 <update_min_cellt_id_label+0x20>)
 800482e:	f7ff fde5 	bl	80043fc <NextionSetVal>
}
 8004832:	bf00      	nop
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20000420 	.word	0x20000420
 8004840:	200002a0 	.word	0x200002a0

08004844 <reset_display>:



void reset_display(void) {
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
	update_batt_volt_label(0);
 8004848:	2000      	movs	r0, #0
 800484a:	f7ff ff23 	bl	8004694 <update_batt_volt_label>
	update_batt_curr_label(0);
 800484e:	2000      	movs	r0, #0
 8004850:	f7ff ff32 	bl	80046b8 <update_batt_curr_label>
	update_batt_soc_label(0);
 8004854:	2000      	movs	r0, #0
 8004856:	f7ff ff41 	bl	80046dc <update_batt_soc_label>
	update_max_cellv_label(0);
 800485a:	2000      	movs	r0, #0
 800485c:	f7ff ff62 	bl	8004724 <update_max_cellv_label>
	update_max_cellv_id_label(0);
 8004860:	2000      	movs	r0, #0
 8004862:	f7ff ff71 	bl	8004748 <update_max_cellv_id_label>
	update_min_cellv_label(0);
 8004866:	2000      	movs	r0, #0
 8004868:	f7ff ff80 	bl	800476c <update_min_cellv_label>
	update_min_cellv_id_label(0);
 800486c:	2000      	movs	r0, #0
 800486e:	f7ff ff8f 	bl	8004790 <update_min_cellv_id_label>
	update_max_cellt_label(0);
 8004872:	2000      	movs	r0, #0
 8004874:	f7ff ff9e 	bl	80047b4 <update_max_cellt_label>
	update_max_cellt_id_label(0);
 8004878:	2000      	movs	r0, #0
 800487a:	f7ff ffad 	bl	80047d8 <update_max_cellt_id_label>
	update_min_cellt_label(0);
 800487e:	2000      	movs	r0, #0
 8004880:	f7ff ffbc 	bl	80047fc <update_min_cellt_label>
	update_min_cellt_id_label(0);
 8004884:	2000      	movs	r0, #0
 8004886:	f7ff ffcb 	bl	8004820 <update_min_cellt_id_label>
}
 800488a:	bf00      	nop
 800488c:	bd80      	pop	{r7, pc}

0800488e <reset_page1_display>:

void reset_page1_display(void){
 800488e:	b580      	push	{r7, lr}
 8004890:	af00      	add	r7, sp, #0
	update_batt_volt_label(0);
 8004892:	2000      	movs	r0, #0
 8004894:	f7ff fefe 	bl	8004694 <update_batt_volt_label>
	update_batt_curr_label(0);
 8004898:	2000      	movs	r0, #0
 800489a:	f7ff ff0d 	bl	80046b8 <update_batt_curr_label>
	update_batt_soc_label(0);
 800489e:	2000      	movs	r0, #0
 80048a0:	f7ff ff1c 	bl	80046dc <update_batt_soc_label>
}
 80048a4:	bf00      	nop
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <reset_page2_display>:

void reset_page2_display(void){
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
	update_max_cellv_label(0);
 80048ac:	2000      	movs	r0, #0
 80048ae:	f7ff ff39 	bl	8004724 <update_max_cellv_label>
	update_max_cellv_id_label(0);
 80048b2:	2000      	movs	r0, #0
 80048b4:	f7ff ff48 	bl	8004748 <update_max_cellv_id_label>
	update_min_cellv_label(0);
 80048b8:	2000      	movs	r0, #0
 80048ba:	f7ff ff57 	bl	800476c <update_min_cellv_label>
	update_min_cellv_id_label(0);
 80048be:	2000      	movs	r0, #0
 80048c0:	f7ff ff66 	bl	8004790 <update_min_cellv_id_label>
}
 80048c4:	bf00      	nop
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <reset_page3_display>:


void reset_page3_display(void){
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
	update_max_cellt_label(0);
 80048cc:	2000      	movs	r0, #0
 80048ce:	f7ff ff71 	bl	80047b4 <update_max_cellt_label>
	update_max_cellt_id_label(0);
 80048d2:	2000      	movs	r0, #0
 80048d4:	f7ff ff80 	bl	80047d8 <update_max_cellt_id_label>
	update_min_cellt_label(0);
 80048d8:	2000      	movs	r0, #0
 80048da:	f7ff ff8f 	bl	80047fc <update_min_cellt_label>
	update_min_cellt_id_label(0);
 80048de:	2000      	movs	r0, #0
 80048e0:	f7ff ff9e 	bl	8004820 <update_min_cellt_id_label>
}
 80048e4:	bf00      	nop
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <queue_init>:
 *      Author: Hetesh S T
 */

#include "queue.h"

void queue_init(queue_t *q_instance, q_member_t queue_arr[], uint8_t max_len) {
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	4613      	mov	r3, r2
 80048f4:	71fb      	strb	r3, [r7, #7]
	q_instance->front_idx = 0;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	701a      	strb	r2, [r3, #0]
	q_instance->rear_idx = 0;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	705a      	strb	r2, [r3, #1]
	q_instance->q_len = 0;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	709a      	strb	r2, [r3, #2]
	q_instance->q_max_len = max_len;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	79fa      	ldrb	r2, [r7, #7]
 800490c:	70da      	strb	r2, [r3, #3]
	q_instance->q_member_ptr = queue_arr;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	605a      	str	r2, [r3, #4]
}
 8004914:	bf00      	nop
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	bc80      	pop	{r7}
 800491c:	4770      	bx	lr

0800491e <is_empty>:

bool is_empty(queue_t *q_instance) {
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
	return (q_instance->q_len == 0u);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	789b      	ldrb	r3, [r3, #2]
 800492a:	2b00      	cmp	r3, #0
 800492c:	bf0c      	ite	eq
 800492e:	2301      	moveq	r3, #1
 8004930:	2300      	movne	r3, #0
 8004932:	b2db      	uxtb	r3, r3

}
 8004934:	4618      	mov	r0, r3
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	bc80      	pop	{r7}
 800493c:	4770      	bx	lr

0800493e <is_full>:

bool is_full(queue_t *q_instance) {
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
	return (q_instance->q_len == q_instance->q_max_len);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	789a      	ldrb	r2, [r3, #2]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	78db      	ldrb	r3, [r3, #3]
 800494e:	429a      	cmp	r2, r3
 8004950:	bf0c      	ite	eq
 8004952:	2301      	moveq	r3, #1
 8004954:	2300      	movne	r3, #0
 8004956:	b2db      	uxtb	r3, r3
}
 8004958:	4618      	mov	r0, r3
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	bc80      	pop	{r7}
 8004960:	4770      	bx	lr

08004962 <enqueue>:

void enqueue(queue_t *q_instance, uint32_t rx_can_id, uint8_t rx_data[]) {
 8004962:	b580      	push	{r7, lr}
 8004964:	b086      	sub	sp, #24
 8004966:	af00      	add	r7, sp, #0
 8004968:	60f8      	str	r0, [r7, #12]
 800496a:	60b9      	str	r1, [r7, #8]
 800496c:	607a      	str	r2, [r7, #4]

	if (is_full(q_instance)) {
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f7ff ffe5 	bl	800493e <is_full>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d128      	bne.n	80049cc <enqueue+0x6a>
		return;
	}

	q_member_t *temp_member = q_instance->q_member_ptr + q_instance->rear_idx;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	785b      	ldrb	r3, [r3, #1]
 8004982:	4619      	mov	r1, r3
 8004984:	460b      	mov	r3, r1
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	440b      	add	r3, r1
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	617b      	str	r3, [r7, #20]
	temp_member->can_id = rx_can_id;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	601a      	str	r2, [r3, #0]
	(void) memcpy(temp_member->data, rx_data, 8);
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	3304      	adds	r3, #4
 800499a:	2208      	movs	r2, #8
 800499c:	6879      	ldr	r1, [r7, #4]
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 f986 	bl	8004cb0 <memcpy>

	q_instance->rear_idx = (q_instance->rear_idx + 1) % q_instance->q_max_len;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	785b      	ldrb	r3, [r3, #1]
 80049a8:	3301      	adds	r3, #1
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	78d2      	ldrb	r2, [r2, #3]
 80049ae:	fb93 f1f2 	sdiv	r1, r3, r2
 80049b2:	fb01 f202 	mul.w	r2, r1, r2
 80049b6:	1a9b      	subs	r3, r3, r2
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	705a      	strb	r2, [r3, #1]
	q_instance->q_len++;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	789b      	ldrb	r3, [r3, #2]
 80049c2:	3301      	adds	r3, #1
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	709a      	strb	r2, [r3, #2]
 80049ca:	e000      	b.n	80049ce <enqueue+0x6c>
		return;
 80049cc:	bf00      	nop

}
 80049ce:	3718      	adds	r7, #24
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <dequeue>:

void dequeue(queue_t *q_instance) {
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
	if (is_empty(q_instance)) {
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7ff ff9e 	bl	800491e <is_empty>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d122      	bne.n	8004a2e <dequeue+0x5a>
		return;
	}

	(void) memset((q_instance->q_member_ptr + q_instance->front_idx), 0,
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	4619      	mov	r1, r3
 80049f2:	460b      	mov	r3, r1
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	440b      	add	r3, r1
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	220c      	movs	r2, #12
 80049fe:	2100      	movs	r1, #0
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 f909 	bl	8004c18 <memset>
			sizeof(q_member_t));
	q_instance->front_idx = (q_instance->front_idx + 1) % q_instance->q_max_len;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	78d2      	ldrb	r2, [r2, #3]
 8004a10:	fb93 f1f2 	sdiv	r1, r3, r2
 8004a14:	fb01 f202 	mul.w	r2, r1, r2
 8004a18:	1a9b      	subs	r3, r3, r2
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	701a      	strb	r2, [r3, #0]
	q_instance->q_len--;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	789b      	ldrb	r3, [r3, #2]
 8004a24:	3b01      	subs	r3, #1
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	709a      	strb	r2, [r3, #2]
 8004a2c:	e000      	b.n	8004a30 <dequeue+0x5c>
		return;
 8004a2e:	bf00      	nop
}
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <peek>:

q_member_t* peek(queue_t *q_instance) {
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b082      	sub	sp, #8
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
	if (is_empty(q_instance)) {
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7ff ff6d 	bl	800491e <is_empty>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <peek+0x18>
		return NULL;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e009      	b.n	8004a62 <peek+0x2c>
	}

	return (q_instance->q_member_ptr + q_instance->front_idx);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	4619      	mov	r1, r3
 8004a58:	460b      	mov	r3, r1
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	440b      	add	r3, r1
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
	...

08004a6c <malloc>:
 8004a6c:	4b02      	ldr	r3, [pc, #8]	@ (8004a78 <malloc+0xc>)
 8004a6e:	4601      	mov	r1, r0
 8004a70:	6818      	ldr	r0, [r3, #0]
 8004a72:	f000 b825 	b.w	8004ac0 <_malloc_r>
 8004a76:	bf00      	nop
 8004a78:	2000000c 	.word	0x2000000c

08004a7c <sbrk_aligned>:
 8004a7c:	b570      	push	{r4, r5, r6, lr}
 8004a7e:	4e0f      	ldr	r6, [pc, #60]	@ (8004abc <sbrk_aligned+0x40>)
 8004a80:	460c      	mov	r4, r1
 8004a82:	6831      	ldr	r1, [r6, #0]
 8004a84:	4605      	mov	r5, r0
 8004a86:	b911      	cbnz	r1, 8004a8e <sbrk_aligned+0x12>
 8004a88:	f000 f8ce 	bl	8004c28 <_sbrk_r>
 8004a8c:	6030      	str	r0, [r6, #0]
 8004a8e:	4621      	mov	r1, r4
 8004a90:	4628      	mov	r0, r5
 8004a92:	f000 f8c9 	bl	8004c28 <_sbrk_r>
 8004a96:	1c43      	adds	r3, r0, #1
 8004a98:	d103      	bne.n	8004aa2 <sbrk_aligned+0x26>
 8004a9a:	f04f 34ff 	mov.w	r4, #4294967295
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	bd70      	pop	{r4, r5, r6, pc}
 8004aa2:	1cc4      	adds	r4, r0, #3
 8004aa4:	f024 0403 	bic.w	r4, r4, #3
 8004aa8:	42a0      	cmp	r0, r4
 8004aaa:	d0f8      	beq.n	8004a9e <sbrk_aligned+0x22>
 8004aac:	1a21      	subs	r1, r4, r0
 8004aae:	4628      	mov	r0, r5
 8004ab0:	f000 f8ba 	bl	8004c28 <_sbrk_r>
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	d1f2      	bne.n	8004a9e <sbrk_aligned+0x22>
 8004ab8:	e7ef      	b.n	8004a9a <sbrk_aligned+0x1e>
 8004aba:	bf00      	nop
 8004abc:	20000440 	.word	0x20000440

08004ac0 <_malloc_r>:
 8004ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ac4:	1ccd      	adds	r5, r1, #3
 8004ac6:	f025 0503 	bic.w	r5, r5, #3
 8004aca:	3508      	adds	r5, #8
 8004acc:	2d0c      	cmp	r5, #12
 8004ace:	bf38      	it	cc
 8004ad0:	250c      	movcc	r5, #12
 8004ad2:	2d00      	cmp	r5, #0
 8004ad4:	4606      	mov	r6, r0
 8004ad6:	db01      	blt.n	8004adc <_malloc_r+0x1c>
 8004ad8:	42a9      	cmp	r1, r5
 8004ada:	d904      	bls.n	8004ae6 <_malloc_r+0x26>
 8004adc:	230c      	movs	r3, #12
 8004ade:	6033      	str	r3, [r6, #0]
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ae6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004bbc <_malloc_r+0xfc>
 8004aea:	f000 f869 	bl	8004bc0 <__malloc_lock>
 8004aee:	f8d8 3000 	ldr.w	r3, [r8]
 8004af2:	461c      	mov	r4, r3
 8004af4:	bb44      	cbnz	r4, 8004b48 <_malloc_r+0x88>
 8004af6:	4629      	mov	r1, r5
 8004af8:	4630      	mov	r0, r6
 8004afa:	f7ff ffbf 	bl	8004a7c <sbrk_aligned>
 8004afe:	1c43      	adds	r3, r0, #1
 8004b00:	4604      	mov	r4, r0
 8004b02:	d158      	bne.n	8004bb6 <_malloc_r+0xf6>
 8004b04:	f8d8 4000 	ldr.w	r4, [r8]
 8004b08:	4627      	mov	r7, r4
 8004b0a:	2f00      	cmp	r7, #0
 8004b0c:	d143      	bne.n	8004b96 <_malloc_r+0xd6>
 8004b0e:	2c00      	cmp	r4, #0
 8004b10:	d04b      	beq.n	8004baa <_malloc_r+0xea>
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	4639      	mov	r1, r7
 8004b16:	4630      	mov	r0, r6
 8004b18:	eb04 0903 	add.w	r9, r4, r3
 8004b1c:	f000 f884 	bl	8004c28 <_sbrk_r>
 8004b20:	4581      	cmp	r9, r0
 8004b22:	d142      	bne.n	8004baa <_malloc_r+0xea>
 8004b24:	6821      	ldr	r1, [r4, #0]
 8004b26:	4630      	mov	r0, r6
 8004b28:	1a6d      	subs	r5, r5, r1
 8004b2a:	4629      	mov	r1, r5
 8004b2c:	f7ff ffa6 	bl	8004a7c <sbrk_aligned>
 8004b30:	3001      	adds	r0, #1
 8004b32:	d03a      	beq.n	8004baa <_malloc_r+0xea>
 8004b34:	6823      	ldr	r3, [r4, #0]
 8004b36:	442b      	add	r3, r5
 8004b38:	6023      	str	r3, [r4, #0]
 8004b3a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	bb62      	cbnz	r2, 8004b9c <_malloc_r+0xdc>
 8004b42:	f8c8 7000 	str.w	r7, [r8]
 8004b46:	e00f      	b.n	8004b68 <_malloc_r+0xa8>
 8004b48:	6822      	ldr	r2, [r4, #0]
 8004b4a:	1b52      	subs	r2, r2, r5
 8004b4c:	d420      	bmi.n	8004b90 <_malloc_r+0xd0>
 8004b4e:	2a0b      	cmp	r2, #11
 8004b50:	d917      	bls.n	8004b82 <_malloc_r+0xc2>
 8004b52:	1961      	adds	r1, r4, r5
 8004b54:	42a3      	cmp	r3, r4
 8004b56:	6025      	str	r5, [r4, #0]
 8004b58:	bf18      	it	ne
 8004b5a:	6059      	strne	r1, [r3, #4]
 8004b5c:	6863      	ldr	r3, [r4, #4]
 8004b5e:	bf08      	it	eq
 8004b60:	f8c8 1000 	streq.w	r1, [r8]
 8004b64:	5162      	str	r2, [r4, r5]
 8004b66:	604b      	str	r3, [r1, #4]
 8004b68:	4630      	mov	r0, r6
 8004b6a:	f000 f82f 	bl	8004bcc <__malloc_unlock>
 8004b6e:	f104 000b 	add.w	r0, r4, #11
 8004b72:	1d23      	adds	r3, r4, #4
 8004b74:	f020 0007 	bic.w	r0, r0, #7
 8004b78:	1ac2      	subs	r2, r0, r3
 8004b7a:	bf1c      	itt	ne
 8004b7c:	1a1b      	subne	r3, r3, r0
 8004b7e:	50a3      	strne	r3, [r4, r2]
 8004b80:	e7af      	b.n	8004ae2 <_malloc_r+0x22>
 8004b82:	6862      	ldr	r2, [r4, #4]
 8004b84:	42a3      	cmp	r3, r4
 8004b86:	bf0c      	ite	eq
 8004b88:	f8c8 2000 	streq.w	r2, [r8]
 8004b8c:	605a      	strne	r2, [r3, #4]
 8004b8e:	e7eb      	b.n	8004b68 <_malloc_r+0xa8>
 8004b90:	4623      	mov	r3, r4
 8004b92:	6864      	ldr	r4, [r4, #4]
 8004b94:	e7ae      	b.n	8004af4 <_malloc_r+0x34>
 8004b96:	463c      	mov	r4, r7
 8004b98:	687f      	ldr	r7, [r7, #4]
 8004b9a:	e7b6      	b.n	8004b0a <_malloc_r+0x4a>
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	42a3      	cmp	r3, r4
 8004ba2:	d1fb      	bne.n	8004b9c <_malloc_r+0xdc>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	6053      	str	r3, [r2, #4]
 8004ba8:	e7de      	b.n	8004b68 <_malloc_r+0xa8>
 8004baa:	230c      	movs	r3, #12
 8004bac:	4630      	mov	r0, r6
 8004bae:	6033      	str	r3, [r6, #0]
 8004bb0:	f000 f80c 	bl	8004bcc <__malloc_unlock>
 8004bb4:	e794      	b.n	8004ae0 <_malloc_r+0x20>
 8004bb6:	6005      	str	r5, [r0, #0]
 8004bb8:	e7d6      	b.n	8004b68 <_malloc_r+0xa8>
 8004bba:	bf00      	nop
 8004bbc:	20000444 	.word	0x20000444

08004bc0 <__malloc_lock>:
 8004bc0:	4801      	ldr	r0, [pc, #4]	@ (8004bc8 <__malloc_lock+0x8>)
 8004bc2:	f000 b86b 	b.w	8004c9c <__retarget_lock_acquire_recursive>
 8004bc6:	bf00      	nop
 8004bc8:	20000584 	.word	0x20000584

08004bcc <__malloc_unlock>:
 8004bcc:	4801      	ldr	r0, [pc, #4]	@ (8004bd4 <__malloc_unlock+0x8>)
 8004bce:	f000 b866 	b.w	8004c9e <__retarget_lock_release_recursive>
 8004bd2:	bf00      	nop
 8004bd4:	20000584 	.word	0x20000584

08004bd8 <siprintf>:
 8004bd8:	b40e      	push	{r1, r2, r3}
 8004bda:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004bde:	b500      	push	{lr}
 8004be0:	b09c      	sub	sp, #112	@ 0x70
 8004be2:	ab1d      	add	r3, sp, #116	@ 0x74
 8004be4:	9002      	str	r0, [sp, #8]
 8004be6:	9006      	str	r0, [sp, #24]
 8004be8:	9107      	str	r1, [sp, #28]
 8004bea:	9104      	str	r1, [sp, #16]
 8004bec:	4808      	ldr	r0, [pc, #32]	@ (8004c10 <siprintf+0x38>)
 8004bee:	4909      	ldr	r1, [pc, #36]	@ (8004c14 <siprintf+0x3c>)
 8004bf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bf4:	9105      	str	r1, [sp, #20]
 8004bf6:	6800      	ldr	r0, [r0, #0]
 8004bf8:	a902      	add	r1, sp, #8
 8004bfa:	9301      	str	r3, [sp, #4]
 8004bfc:	f000 f90a 	bl	8004e14 <_svfiprintf_r>
 8004c00:	2200      	movs	r2, #0
 8004c02:	9b02      	ldr	r3, [sp, #8]
 8004c04:	701a      	strb	r2, [r3, #0]
 8004c06:	b01c      	add	sp, #112	@ 0x70
 8004c08:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c0c:	b003      	add	sp, #12
 8004c0e:	4770      	bx	lr
 8004c10:	2000000c 	.word	0x2000000c
 8004c14:	ffff0208 	.word	0xffff0208

08004c18 <memset>:
 8004c18:	4603      	mov	r3, r0
 8004c1a:	4402      	add	r2, r0
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d100      	bne.n	8004c22 <memset+0xa>
 8004c20:	4770      	bx	lr
 8004c22:	f803 1b01 	strb.w	r1, [r3], #1
 8004c26:	e7f9      	b.n	8004c1c <memset+0x4>

08004c28 <_sbrk_r>:
 8004c28:	b538      	push	{r3, r4, r5, lr}
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	4d05      	ldr	r5, [pc, #20]	@ (8004c44 <_sbrk_r+0x1c>)
 8004c2e:	4604      	mov	r4, r0
 8004c30:	4608      	mov	r0, r1
 8004c32:	602b      	str	r3, [r5, #0]
 8004c34:	f7fb ff16 	bl	8000a64 <_sbrk>
 8004c38:	1c43      	adds	r3, r0, #1
 8004c3a:	d102      	bne.n	8004c42 <_sbrk_r+0x1a>
 8004c3c:	682b      	ldr	r3, [r5, #0]
 8004c3e:	b103      	cbz	r3, 8004c42 <_sbrk_r+0x1a>
 8004c40:	6023      	str	r3, [r4, #0]
 8004c42:	bd38      	pop	{r3, r4, r5, pc}
 8004c44:	20000580 	.word	0x20000580

08004c48 <__errno>:
 8004c48:	4b01      	ldr	r3, [pc, #4]	@ (8004c50 <__errno+0x8>)
 8004c4a:	6818      	ldr	r0, [r3, #0]
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	2000000c 	.word	0x2000000c

08004c54 <__libc_init_array>:
 8004c54:	b570      	push	{r4, r5, r6, lr}
 8004c56:	2600      	movs	r6, #0
 8004c58:	4d0c      	ldr	r5, [pc, #48]	@ (8004c8c <__libc_init_array+0x38>)
 8004c5a:	4c0d      	ldr	r4, [pc, #52]	@ (8004c90 <__libc_init_array+0x3c>)
 8004c5c:	1b64      	subs	r4, r4, r5
 8004c5e:	10a4      	asrs	r4, r4, #2
 8004c60:	42a6      	cmp	r6, r4
 8004c62:	d109      	bne.n	8004c78 <__libc_init_array+0x24>
 8004c64:	f000 fbc2 	bl	80053ec <_init>
 8004c68:	2600      	movs	r6, #0
 8004c6a:	4d0a      	ldr	r5, [pc, #40]	@ (8004c94 <__libc_init_array+0x40>)
 8004c6c:	4c0a      	ldr	r4, [pc, #40]	@ (8004c98 <__libc_init_array+0x44>)
 8004c6e:	1b64      	subs	r4, r4, r5
 8004c70:	10a4      	asrs	r4, r4, #2
 8004c72:	42a6      	cmp	r6, r4
 8004c74:	d105      	bne.n	8004c82 <__libc_init_array+0x2e>
 8004c76:	bd70      	pop	{r4, r5, r6, pc}
 8004c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c7c:	4798      	blx	r3
 8004c7e:	3601      	adds	r6, #1
 8004c80:	e7ee      	b.n	8004c60 <__libc_init_array+0xc>
 8004c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c86:	4798      	blx	r3
 8004c88:	3601      	adds	r6, #1
 8004c8a:	e7f2      	b.n	8004c72 <__libc_init_array+0x1e>
 8004c8c:	08005588 	.word	0x08005588
 8004c90:	08005588 	.word	0x08005588
 8004c94:	08005588 	.word	0x08005588
 8004c98:	0800558c 	.word	0x0800558c

08004c9c <__retarget_lock_acquire_recursive>:
 8004c9c:	4770      	bx	lr

08004c9e <__retarget_lock_release_recursive>:
 8004c9e:	4770      	bx	lr

08004ca0 <strcpy>:
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ca6:	f803 2b01 	strb.w	r2, [r3], #1
 8004caa:	2a00      	cmp	r2, #0
 8004cac:	d1f9      	bne.n	8004ca2 <strcpy+0x2>
 8004cae:	4770      	bx	lr

08004cb0 <memcpy>:
 8004cb0:	440a      	add	r2, r1
 8004cb2:	4291      	cmp	r1, r2
 8004cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cb8:	d100      	bne.n	8004cbc <memcpy+0xc>
 8004cba:	4770      	bx	lr
 8004cbc:	b510      	push	{r4, lr}
 8004cbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cc2:	4291      	cmp	r1, r2
 8004cc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cc8:	d1f9      	bne.n	8004cbe <memcpy+0xe>
 8004cca:	bd10      	pop	{r4, pc}

08004ccc <_free_r>:
 8004ccc:	b538      	push	{r3, r4, r5, lr}
 8004cce:	4605      	mov	r5, r0
 8004cd0:	2900      	cmp	r1, #0
 8004cd2:	d040      	beq.n	8004d56 <_free_r+0x8a>
 8004cd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cd8:	1f0c      	subs	r4, r1, #4
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	bfb8      	it	lt
 8004cde:	18e4      	addlt	r4, r4, r3
 8004ce0:	f7ff ff6e 	bl	8004bc0 <__malloc_lock>
 8004ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d58 <_free_r+0x8c>)
 8004ce6:	6813      	ldr	r3, [r2, #0]
 8004ce8:	b933      	cbnz	r3, 8004cf8 <_free_r+0x2c>
 8004cea:	6063      	str	r3, [r4, #4]
 8004cec:	6014      	str	r4, [r2, #0]
 8004cee:	4628      	mov	r0, r5
 8004cf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cf4:	f7ff bf6a 	b.w	8004bcc <__malloc_unlock>
 8004cf8:	42a3      	cmp	r3, r4
 8004cfa:	d908      	bls.n	8004d0e <_free_r+0x42>
 8004cfc:	6820      	ldr	r0, [r4, #0]
 8004cfe:	1821      	adds	r1, r4, r0
 8004d00:	428b      	cmp	r3, r1
 8004d02:	bf01      	itttt	eq
 8004d04:	6819      	ldreq	r1, [r3, #0]
 8004d06:	685b      	ldreq	r3, [r3, #4]
 8004d08:	1809      	addeq	r1, r1, r0
 8004d0a:	6021      	streq	r1, [r4, #0]
 8004d0c:	e7ed      	b.n	8004cea <_free_r+0x1e>
 8004d0e:	461a      	mov	r2, r3
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	b10b      	cbz	r3, 8004d18 <_free_r+0x4c>
 8004d14:	42a3      	cmp	r3, r4
 8004d16:	d9fa      	bls.n	8004d0e <_free_r+0x42>
 8004d18:	6811      	ldr	r1, [r2, #0]
 8004d1a:	1850      	adds	r0, r2, r1
 8004d1c:	42a0      	cmp	r0, r4
 8004d1e:	d10b      	bne.n	8004d38 <_free_r+0x6c>
 8004d20:	6820      	ldr	r0, [r4, #0]
 8004d22:	4401      	add	r1, r0
 8004d24:	1850      	adds	r0, r2, r1
 8004d26:	4283      	cmp	r3, r0
 8004d28:	6011      	str	r1, [r2, #0]
 8004d2a:	d1e0      	bne.n	8004cee <_free_r+0x22>
 8004d2c:	6818      	ldr	r0, [r3, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	4408      	add	r0, r1
 8004d32:	6010      	str	r0, [r2, #0]
 8004d34:	6053      	str	r3, [r2, #4]
 8004d36:	e7da      	b.n	8004cee <_free_r+0x22>
 8004d38:	d902      	bls.n	8004d40 <_free_r+0x74>
 8004d3a:	230c      	movs	r3, #12
 8004d3c:	602b      	str	r3, [r5, #0]
 8004d3e:	e7d6      	b.n	8004cee <_free_r+0x22>
 8004d40:	6820      	ldr	r0, [r4, #0]
 8004d42:	1821      	adds	r1, r4, r0
 8004d44:	428b      	cmp	r3, r1
 8004d46:	bf01      	itttt	eq
 8004d48:	6819      	ldreq	r1, [r3, #0]
 8004d4a:	685b      	ldreq	r3, [r3, #4]
 8004d4c:	1809      	addeq	r1, r1, r0
 8004d4e:	6021      	streq	r1, [r4, #0]
 8004d50:	6063      	str	r3, [r4, #4]
 8004d52:	6054      	str	r4, [r2, #4]
 8004d54:	e7cb      	b.n	8004cee <_free_r+0x22>
 8004d56:	bd38      	pop	{r3, r4, r5, pc}
 8004d58:	20000444 	.word	0x20000444

08004d5c <__ssputs_r>:
 8004d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d60:	461f      	mov	r7, r3
 8004d62:	688e      	ldr	r6, [r1, #8]
 8004d64:	4682      	mov	sl, r0
 8004d66:	42be      	cmp	r6, r7
 8004d68:	460c      	mov	r4, r1
 8004d6a:	4690      	mov	r8, r2
 8004d6c:	680b      	ldr	r3, [r1, #0]
 8004d6e:	d82d      	bhi.n	8004dcc <__ssputs_r+0x70>
 8004d70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004d78:	d026      	beq.n	8004dc8 <__ssputs_r+0x6c>
 8004d7a:	6965      	ldr	r5, [r4, #20]
 8004d7c:	6909      	ldr	r1, [r1, #16]
 8004d7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d82:	eba3 0901 	sub.w	r9, r3, r1
 8004d86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d8a:	1c7b      	adds	r3, r7, #1
 8004d8c:	444b      	add	r3, r9
 8004d8e:	106d      	asrs	r5, r5, #1
 8004d90:	429d      	cmp	r5, r3
 8004d92:	bf38      	it	cc
 8004d94:	461d      	movcc	r5, r3
 8004d96:	0553      	lsls	r3, r2, #21
 8004d98:	d527      	bpl.n	8004dea <__ssputs_r+0x8e>
 8004d9a:	4629      	mov	r1, r5
 8004d9c:	f7ff fe90 	bl	8004ac0 <_malloc_r>
 8004da0:	4606      	mov	r6, r0
 8004da2:	b360      	cbz	r0, 8004dfe <__ssputs_r+0xa2>
 8004da4:	464a      	mov	r2, r9
 8004da6:	6921      	ldr	r1, [r4, #16]
 8004da8:	f7ff ff82 	bl	8004cb0 <memcpy>
 8004dac:	89a3      	ldrh	r3, [r4, #12]
 8004dae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004db6:	81a3      	strh	r3, [r4, #12]
 8004db8:	6126      	str	r6, [r4, #16]
 8004dba:	444e      	add	r6, r9
 8004dbc:	6026      	str	r6, [r4, #0]
 8004dbe:	463e      	mov	r6, r7
 8004dc0:	6165      	str	r5, [r4, #20]
 8004dc2:	eba5 0509 	sub.w	r5, r5, r9
 8004dc6:	60a5      	str	r5, [r4, #8]
 8004dc8:	42be      	cmp	r6, r7
 8004dca:	d900      	bls.n	8004dce <__ssputs_r+0x72>
 8004dcc:	463e      	mov	r6, r7
 8004dce:	4632      	mov	r2, r6
 8004dd0:	4641      	mov	r1, r8
 8004dd2:	6820      	ldr	r0, [r4, #0]
 8004dd4:	f000 faac 	bl	8005330 <memmove>
 8004dd8:	2000      	movs	r0, #0
 8004dda:	68a3      	ldr	r3, [r4, #8]
 8004ddc:	1b9b      	subs	r3, r3, r6
 8004dde:	60a3      	str	r3, [r4, #8]
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	4433      	add	r3, r6
 8004de4:	6023      	str	r3, [r4, #0]
 8004de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dea:	462a      	mov	r2, r5
 8004dec:	f000 fac8 	bl	8005380 <_realloc_r>
 8004df0:	4606      	mov	r6, r0
 8004df2:	2800      	cmp	r0, #0
 8004df4:	d1e0      	bne.n	8004db8 <__ssputs_r+0x5c>
 8004df6:	4650      	mov	r0, sl
 8004df8:	6921      	ldr	r1, [r4, #16]
 8004dfa:	f7ff ff67 	bl	8004ccc <_free_r>
 8004dfe:	230c      	movs	r3, #12
 8004e00:	f8ca 3000 	str.w	r3, [sl]
 8004e04:	89a3      	ldrh	r3, [r4, #12]
 8004e06:	f04f 30ff 	mov.w	r0, #4294967295
 8004e0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e0e:	81a3      	strh	r3, [r4, #12]
 8004e10:	e7e9      	b.n	8004de6 <__ssputs_r+0x8a>
	...

08004e14 <_svfiprintf_r>:
 8004e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e18:	4698      	mov	r8, r3
 8004e1a:	898b      	ldrh	r3, [r1, #12]
 8004e1c:	4607      	mov	r7, r0
 8004e1e:	061b      	lsls	r3, r3, #24
 8004e20:	460d      	mov	r5, r1
 8004e22:	4614      	mov	r4, r2
 8004e24:	b09d      	sub	sp, #116	@ 0x74
 8004e26:	d510      	bpl.n	8004e4a <_svfiprintf_r+0x36>
 8004e28:	690b      	ldr	r3, [r1, #16]
 8004e2a:	b973      	cbnz	r3, 8004e4a <_svfiprintf_r+0x36>
 8004e2c:	2140      	movs	r1, #64	@ 0x40
 8004e2e:	f7ff fe47 	bl	8004ac0 <_malloc_r>
 8004e32:	6028      	str	r0, [r5, #0]
 8004e34:	6128      	str	r0, [r5, #16]
 8004e36:	b930      	cbnz	r0, 8004e46 <_svfiprintf_r+0x32>
 8004e38:	230c      	movs	r3, #12
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e40:	b01d      	add	sp, #116	@ 0x74
 8004e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e46:	2340      	movs	r3, #64	@ 0x40
 8004e48:	616b      	str	r3, [r5, #20]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e4e:	2320      	movs	r3, #32
 8004e50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e54:	2330      	movs	r3, #48	@ 0x30
 8004e56:	f04f 0901 	mov.w	r9, #1
 8004e5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e5e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004ff8 <_svfiprintf_r+0x1e4>
 8004e62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e66:	4623      	mov	r3, r4
 8004e68:	469a      	mov	sl, r3
 8004e6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e6e:	b10a      	cbz	r2, 8004e74 <_svfiprintf_r+0x60>
 8004e70:	2a25      	cmp	r2, #37	@ 0x25
 8004e72:	d1f9      	bne.n	8004e68 <_svfiprintf_r+0x54>
 8004e74:	ebba 0b04 	subs.w	fp, sl, r4
 8004e78:	d00b      	beq.n	8004e92 <_svfiprintf_r+0x7e>
 8004e7a:	465b      	mov	r3, fp
 8004e7c:	4622      	mov	r2, r4
 8004e7e:	4629      	mov	r1, r5
 8004e80:	4638      	mov	r0, r7
 8004e82:	f7ff ff6b 	bl	8004d5c <__ssputs_r>
 8004e86:	3001      	adds	r0, #1
 8004e88:	f000 80a7 	beq.w	8004fda <_svfiprintf_r+0x1c6>
 8004e8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e8e:	445a      	add	r2, fp
 8004e90:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e92:	f89a 3000 	ldrb.w	r3, [sl]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 809f 	beq.w	8004fda <_svfiprintf_r+0x1c6>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004ea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ea6:	f10a 0a01 	add.w	sl, sl, #1
 8004eaa:	9304      	str	r3, [sp, #16]
 8004eac:	9307      	str	r3, [sp, #28]
 8004eae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004eb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8004eb4:	4654      	mov	r4, sl
 8004eb6:	2205      	movs	r2, #5
 8004eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ebc:	484e      	ldr	r0, [pc, #312]	@ (8004ff8 <_svfiprintf_r+0x1e4>)
 8004ebe:	f000 fa51 	bl	8005364 <memchr>
 8004ec2:	9a04      	ldr	r2, [sp, #16]
 8004ec4:	b9d8      	cbnz	r0, 8004efe <_svfiprintf_r+0xea>
 8004ec6:	06d0      	lsls	r0, r2, #27
 8004ec8:	bf44      	itt	mi
 8004eca:	2320      	movmi	r3, #32
 8004ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ed0:	0711      	lsls	r1, r2, #28
 8004ed2:	bf44      	itt	mi
 8004ed4:	232b      	movmi	r3, #43	@ 0x2b
 8004ed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004eda:	f89a 3000 	ldrb.w	r3, [sl]
 8004ede:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ee0:	d015      	beq.n	8004f0e <_svfiprintf_r+0xfa>
 8004ee2:	4654      	mov	r4, sl
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	f04f 0c0a 	mov.w	ip, #10
 8004eea:	9a07      	ldr	r2, [sp, #28]
 8004eec:	4621      	mov	r1, r4
 8004eee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ef2:	3b30      	subs	r3, #48	@ 0x30
 8004ef4:	2b09      	cmp	r3, #9
 8004ef6:	d94b      	bls.n	8004f90 <_svfiprintf_r+0x17c>
 8004ef8:	b1b0      	cbz	r0, 8004f28 <_svfiprintf_r+0x114>
 8004efa:	9207      	str	r2, [sp, #28]
 8004efc:	e014      	b.n	8004f28 <_svfiprintf_r+0x114>
 8004efe:	eba0 0308 	sub.w	r3, r0, r8
 8004f02:	fa09 f303 	lsl.w	r3, r9, r3
 8004f06:	4313      	orrs	r3, r2
 8004f08:	46a2      	mov	sl, r4
 8004f0a:	9304      	str	r3, [sp, #16]
 8004f0c:	e7d2      	b.n	8004eb4 <_svfiprintf_r+0xa0>
 8004f0e:	9b03      	ldr	r3, [sp, #12]
 8004f10:	1d19      	adds	r1, r3, #4
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	9103      	str	r1, [sp, #12]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	bfbb      	ittet	lt
 8004f1a:	425b      	neglt	r3, r3
 8004f1c:	f042 0202 	orrlt.w	r2, r2, #2
 8004f20:	9307      	strge	r3, [sp, #28]
 8004f22:	9307      	strlt	r3, [sp, #28]
 8004f24:	bfb8      	it	lt
 8004f26:	9204      	strlt	r2, [sp, #16]
 8004f28:	7823      	ldrb	r3, [r4, #0]
 8004f2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f2c:	d10a      	bne.n	8004f44 <_svfiprintf_r+0x130>
 8004f2e:	7863      	ldrb	r3, [r4, #1]
 8004f30:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f32:	d132      	bne.n	8004f9a <_svfiprintf_r+0x186>
 8004f34:	9b03      	ldr	r3, [sp, #12]
 8004f36:	3402      	adds	r4, #2
 8004f38:	1d1a      	adds	r2, r3, #4
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	9203      	str	r2, [sp, #12]
 8004f3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f42:	9305      	str	r3, [sp, #20]
 8004f44:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004ffc <_svfiprintf_r+0x1e8>
 8004f48:	2203      	movs	r2, #3
 8004f4a:	4650      	mov	r0, sl
 8004f4c:	7821      	ldrb	r1, [r4, #0]
 8004f4e:	f000 fa09 	bl	8005364 <memchr>
 8004f52:	b138      	cbz	r0, 8004f64 <_svfiprintf_r+0x150>
 8004f54:	2240      	movs	r2, #64	@ 0x40
 8004f56:	9b04      	ldr	r3, [sp, #16]
 8004f58:	eba0 000a 	sub.w	r0, r0, sl
 8004f5c:	4082      	lsls	r2, r0
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	3401      	adds	r4, #1
 8004f62:	9304      	str	r3, [sp, #16]
 8004f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f68:	2206      	movs	r2, #6
 8004f6a:	4825      	ldr	r0, [pc, #148]	@ (8005000 <_svfiprintf_r+0x1ec>)
 8004f6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f70:	f000 f9f8 	bl	8005364 <memchr>
 8004f74:	2800      	cmp	r0, #0
 8004f76:	d036      	beq.n	8004fe6 <_svfiprintf_r+0x1d2>
 8004f78:	4b22      	ldr	r3, [pc, #136]	@ (8005004 <_svfiprintf_r+0x1f0>)
 8004f7a:	bb1b      	cbnz	r3, 8004fc4 <_svfiprintf_r+0x1b0>
 8004f7c:	9b03      	ldr	r3, [sp, #12]
 8004f7e:	3307      	adds	r3, #7
 8004f80:	f023 0307 	bic.w	r3, r3, #7
 8004f84:	3308      	adds	r3, #8
 8004f86:	9303      	str	r3, [sp, #12]
 8004f88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f8a:	4433      	add	r3, r6
 8004f8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f8e:	e76a      	b.n	8004e66 <_svfiprintf_r+0x52>
 8004f90:	460c      	mov	r4, r1
 8004f92:	2001      	movs	r0, #1
 8004f94:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f98:	e7a8      	b.n	8004eec <_svfiprintf_r+0xd8>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	f04f 0c0a 	mov.w	ip, #10
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	3401      	adds	r4, #1
 8004fa4:	9305      	str	r3, [sp, #20]
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fac:	3a30      	subs	r2, #48	@ 0x30
 8004fae:	2a09      	cmp	r2, #9
 8004fb0:	d903      	bls.n	8004fba <_svfiprintf_r+0x1a6>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0c6      	beq.n	8004f44 <_svfiprintf_r+0x130>
 8004fb6:	9105      	str	r1, [sp, #20]
 8004fb8:	e7c4      	b.n	8004f44 <_svfiprintf_r+0x130>
 8004fba:	4604      	mov	r4, r0
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fc2:	e7f0      	b.n	8004fa6 <_svfiprintf_r+0x192>
 8004fc4:	ab03      	add	r3, sp, #12
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	462a      	mov	r2, r5
 8004fca:	4638      	mov	r0, r7
 8004fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8005008 <_svfiprintf_r+0x1f4>)
 8004fce:	a904      	add	r1, sp, #16
 8004fd0:	f3af 8000 	nop.w
 8004fd4:	1c42      	adds	r2, r0, #1
 8004fd6:	4606      	mov	r6, r0
 8004fd8:	d1d6      	bne.n	8004f88 <_svfiprintf_r+0x174>
 8004fda:	89ab      	ldrh	r3, [r5, #12]
 8004fdc:	065b      	lsls	r3, r3, #25
 8004fde:	f53f af2d 	bmi.w	8004e3c <_svfiprintf_r+0x28>
 8004fe2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004fe4:	e72c      	b.n	8004e40 <_svfiprintf_r+0x2c>
 8004fe6:	ab03      	add	r3, sp, #12
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	462a      	mov	r2, r5
 8004fec:	4638      	mov	r0, r7
 8004fee:	4b06      	ldr	r3, [pc, #24]	@ (8005008 <_svfiprintf_r+0x1f4>)
 8004ff0:	a904      	add	r1, sp, #16
 8004ff2:	f000 f87d 	bl	80050f0 <_printf_i>
 8004ff6:	e7ed      	b.n	8004fd4 <_svfiprintf_r+0x1c0>
 8004ff8:	0800554a 	.word	0x0800554a
 8004ffc:	08005550 	.word	0x08005550
 8005000:	08005554 	.word	0x08005554
 8005004:	00000000 	.word	0x00000000
 8005008:	08004d5d 	.word	0x08004d5d

0800500c <_printf_common>:
 800500c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005010:	4616      	mov	r6, r2
 8005012:	4698      	mov	r8, r3
 8005014:	688a      	ldr	r2, [r1, #8]
 8005016:	690b      	ldr	r3, [r1, #16]
 8005018:	4607      	mov	r7, r0
 800501a:	4293      	cmp	r3, r2
 800501c:	bfb8      	it	lt
 800501e:	4613      	movlt	r3, r2
 8005020:	6033      	str	r3, [r6, #0]
 8005022:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005026:	460c      	mov	r4, r1
 8005028:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800502c:	b10a      	cbz	r2, 8005032 <_printf_common+0x26>
 800502e:	3301      	adds	r3, #1
 8005030:	6033      	str	r3, [r6, #0]
 8005032:	6823      	ldr	r3, [r4, #0]
 8005034:	0699      	lsls	r1, r3, #26
 8005036:	bf42      	ittt	mi
 8005038:	6833      	ldrmi	r3, [r6, #0]
 800503a:	3302      	addmi	r3, #2
 800503c:	6033      	strmi	r3, [r6, #0]
 800503e:	6825      	ldr	r5, [r4, #0]
 8005040:	f015 0506 	ands.w	r5, r5, #6
 8005044:	d106      	bne.n	8005054 <_printf_common+0x48>
 8005046:	f104 0a19 	add.w	sl, r4, #25
 800504a:	68e3      	ldr	r3, [r4, #12]
 800504c:	6832      	ldr	r2, [r6, #0]
 800504e:	1a9b      	subs	r3, r3, r2
 8005050:	42ab      	cmp	r3, r5
 8005052:	dc2b      	bgt.n	80050ac <_printf_common+0xa0>
 8005054:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005058:	6822      	ldr	r2, [r4, #0]
 800505a:	3b00      	subs	r3, #0
 800505c:	bf18      	it	ne
 800505e:	2301      	movne	r3, #1
 8005060:	0692      	lsls	r2, r2, #26
 8005062:	d430      	bmi.n	80050c6 <_printf_common+0xba>
 8005064:	4641      	mov	r1, r8
 8005066:	4638      	mov	r0, r7
 8005068:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800506c:	47c8      	blx	r9
 800506e:	3001      	adds	r0, #1
 8005070:	d023      	beq.n	80050ba <_printf_common+0xae>
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	6922      	ldr	r2, [r4, #16]
 8005076:	f003 0306 	and.w	r3, r3, #6
 800507a:	2b04      	cmp	r3, #4
 800507c:	bf14      	ite	ne
 800507e:	2500      	movne	r5, #0
 8005080:	6833      	ldreq	r3, [r6, #0]
 8005082:	f04f 0600 	mov.w	r6, #0
 8005086:	bf08      	it	eq
 8005088:	68e5      	ldreq	r5, [r4, #12]
 800508a:	f104 041a 	add.w	r4, r4, #26
 800508e:	bf08      	it	eq
 8005090:	1aed      	subeq	r5, r5, r3
 8005092:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005096:	bf08      	it	eq
 8005098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800509c:	4293      	cmp	r3, r2
 800509e:	bfc4      	itt	gt
 80050a0:	1a9b      	subgt	r3, r3, r2
 80050a2:	18ed      	addgt	r5, r5, r3
 80050a4:	42b5      	cmp	r5, r6
 80050a6:	d11a      	bne.n	80050de <_printf_common+0xd2>
 80050a8:	2000      	movs	r0, #0
 80050aa:	e008      	b.n	80050be <_printf_common+0xb2>
 80050ac:	2301      	movs	r3, #1
 80050ae:	4652      	mov	r2, sl
 80050b0:	4641      	mov	r1, r8
 80050b2:	4638      	mov	r0, r7
 80050b4:	47c8      	blx	r9
 80050b6:	3001      	adds	r0, #1
 80050b8:	d103      	bne.n	80050c2 <_printf_common+0xb6>
 80050ba:	f04f 30ff 	mov.w	r0, #4294967295
 80050be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050c2:	3501      	adds	r5, #1
 80050c4:	e7c1      	b.n	800504a <_printf_common+0x3e>
 80050c6:	2030      	movs	r0, #48	@ 0x30
 80050c8:	18e1      	adds	r1, r4, r3
 80050ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80050d4:	4422      	add	r2, r4
 80050d6:	3302      	adds	r3, #2
 80050d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80050dc:	e7c2      	b.n	8005064 <_printf_common+0x58>
 80050de:	2301      	movs	r3, #1
 80050e0:	4622      	mov	r2, r4
 80050e2:	4641      	mov	r1, r8
 80050e4:	4638      	mov	r0, r7
 80050e6:	47c8      	blx	r9
 80050e8:	3001      	adds	r0, #1
 80050ea:	d0e6      	beq.n	80050ba <_printf_common+0xae>
 80050ec:	3601      	adds	r6, #1
 80050ee:	e7d9      	b.n	80050a4 <_printf_common+0x98>

080050f0 <_printf_i>:
 80050f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050f4:	7e0f      	ldrb	r7, [r1, #24]
 80050f6:	4691      	mov	r9, r2
 80050f8:	2f78      	cmp	r7, #120	@ 0x78
 80050fa:	4680      	mov	r8, r0
 80050fc:	460c      	mov	r4, r1
 80050fe:	469a      	mov	sl, r3
 8005100:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005102:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005106:	d807      	bhi.n	8005118 <_printf_i+0x28>
 8005108:	2f62      	cmp	r7, #98	@ 0x62
 800510a:	d80a      	bhi.n	8005122 <_printf_i+0x32>
 800510c:	2f00      	cmp	r7, #0
 800510e:	f000 80d3 	beq.w	80052b8 <_printf_i+0x1c8>
 8005112:	2f58      	cmp	r7, #88	@ 0x58
 8005114:	f000 80ba 	beq.w	800528c <_printf_i+0x19c>
 8005118:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800511c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005120:	e03a      	b.n	8005198 <_printf_i+0xa8>
 8005122:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005126:	2b15      	cmp	r3, #21
 8005128:	d8f6      	bhi.n	8005118 <_printf_i+0x28>
 800512a:	a101      	add	r1, pc, #4	@ (adr r1, 8005130 <_printf_i+0x40>)
 800512c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005130:	08005189 	.word	0x08005189
 8005134:	0800519d 	.word	0x0800519d
 8005138:	08005119 	.word	0x08005119
 800513c:	08005119 	.word	0x08005119
 8005140:	08005119 	.word	0x08005119
 8005144:	08005119 	.word	0x08005119
 8005148:	0800519d 	.word	0x0800519d
 800514c:	08005119 	.word	0x08005119
 8005150:	08005119 	.word	0x08005119
 8005154:	08005119 	.word	0x08005119
 8005158:	08005119 	.word	0x08005119
 800515c:	0800529f 	.word	0x0800529f
 8005160:	080051c7 	.word	0x080051c7
 8005164:	08005259 	.word	0x08005259
 8005168:	08005119 	.word	0x08005119
 800516c:	08005119 	.word	0x08005119
 8005170:	080052c1 	.word	0x080052c1
 8005174:	08005119 	.word	0x08005119
 8005178:	080051c7 	.word	0x080051c7
 800517c:	08005119 	.word	0x08005119
 8005180:	08005119 	.word	0x08005119
 8005184:	08005261 	.word	0x08005261
 8005188:	6833      	ldr	r3, [r6, #0]
 800518a:	1d1a      	adds	r2, r3, #4
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6032      	str	r2, [r6, #0]
 8005190:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005194:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005198:	2301      	movs	r3, #1
 800519a:	e09e      	b.n	80052da <_printf_i+0x1ea>
 800519c:	6833      	ldr	r3, [r6, #0]
 800519e:	6820      	ldr	r0, [r4, #0]
 80051a0:	1d19      	adds	r1, r3, #4
 80051a2:	6031      	str	r1, [r6, #0]
 80051a4:	0606      	lsls	r6, r0, #24
 80051a6:	d501      	bpl.n	80051ac <_printf_i+0xbc>
 80051a8:	681d      	ldr	r5, [r3, #0]
 80051aa:	e003      	b.n	80051b4 <_printf_i+0xc4>
 80051ac:	0645      	lsls	r5, r0, #25
 80051ae:	d5fb      	bpl.n	80051a8 <_printf_i+0xb8>
 80051b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051b4:	2d00      	cmp	r5, #0
 80051b6:	da03      	bge.n	80051c0 <_printf_i+0xd0>
 80051b8:	232d      	movs	r3, #45	@ 0x2d
 80051ba:	426d      	negs	r5, r5
 80051bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051c0:	230a      	movs	r3, #10
 80051c2:	4859      	ldr	r0, [pc, #356]	@ (8005328 <_printf_i+0x238>)
 80051c4:	e011      	b.n	80051ea <_printf_i+0xfa>
 80051c6:	6821      	ldr	r1, [r4, #0]
 80051c8:	6833      	ldr	r3, [r6, #0]
 80051ca:	0608      	lsls	r0, r1, #24
 80051cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80051d0:	d402      	bmi.n	80051d8 <_printf_i+0xe8>
 80051d2:	0649      	lsls	r1, r1, #25
 80051d4:	bf48      	it	mi
 80051d6:	b2ad      	uxthmi	r5, r5
 80051d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80051da:	6033      	str	r3, [r6, #0]
 80051dc:	bf14      	ite	ne
 80051de:	230a      	movne	r3, #10
 80051e0:	2308      	moveq	r3, #8
 80051e2:	4851      	ldr	r0, [pc, #324]	@ (8005328 <_printf_i+0x238>)
 80051e4:	2100      	movs	r1, #0
 80051e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80051ea:	6866      	ldr	r6, [r4, #4]
 80051ec:	2e00      	cmp	r6, #0
 80051ee:	bfa8      	it	ge
 80051f0:	6821      	ldrge	r1, [r4, #0]
 80051f2:	60a6      	str	r6, [r4, #8]
 80051f4:	bfa4      	itt	ge
 80051f6:	f021 0104 	bicge.w	r1, r1, #4
 80051fa:	6021      	strge	r1, [r4, #0]
 80051fc:	b90d      	cbnz	r5, 8005202 <_printf_i+0x112>
 80051fe:	2e00      	cmp	r6, #0
 8005200:	d04b      	beq.n	800529a <_printf_i+0x1aa>
 8005202:	4616      	mov	r6, r2
 8005204:	fbb5 f1f3 	udiv	r1, r5, r3
 8005208:	fb03 5711 	mls	r7, r3, r1, r5
 800520c:	5dc7      	ldrb	r7, [r0, r7]
 800520e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005212:	462f      	mov	r7, r5
 8005214:	42bb      	cmp	r3, r7
 8005216:	460d      	mov	r5, r1
 8005218:	d9f4      	bls.n	8005204 <_printf_i+0x114>
 800521a:	2b08      	cmp	r3, #8
 800521c:	d10b      	bne.n	8005236 <_printf_i+0x146>
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	07df      	lsls	r7, r3, #31
 8005222:	d508      	bpl.n	8005236 <_printf_i+0x146>
 8005224:	6923      	ldr	r3, [r4, #16]
 8005226:	6861      	ldr	r1, [r4, #4]
 8005228:	4299      	cmp	r1, r3
 800522a:	bfde      	ittt	le
 800522c:	2330      	movle	r3, #48	@ 0x30
 800522e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005232:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005236:	1b92      	subs	r2, r2, r6
 8005238:	6122      	str	r2, [r4, #16]
 800523a:	464b      	mov	r3, r9
 800523c:	4621      	mov	r1, r4
 800523e:	4640      	mov	r0, r8
 8005240:	f8cd a000 	str.w	sl, [sp]
 8005244:	aa03      	add	r2, sp, #12
 8005246:	f7ff fee1 	bl	800500c <_printf_common>
 800524a:	3001      	adds	r0, #1
 800524c:	d14a      	bne.n	80052e4 <_printf_i+0x1f4>
 800524e:	f04f 30ff 	mov.w	r0, #4294967295
 8005252:	b004      	add	sp, #16
 8005254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005258:	6823      	ldr	r3, [r4, #0]
 800525a:	f043 0320 	orr.w	r3, r3, #32
 800525e:	6023      	str	r3, [r4, #0]
 8005260:	2778      	movs	r7, #120	@ 0x78
 8005262:	4832      	ldr	r0, [pc, #200]	@ (800532c <_printf_i+0x23c>)
 8005264:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005268:	6823      	ldr	r3, [r4, #0]
 800526a:	6831      	ldr	r1, [r6, #0]
 800526c:	061f      	lsls	r7, r3, #24
 800526e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005272:	d402      	bmi.n	800527a <_printf_i+0x18a>
 8005274:	065f      	lsls	r7, r3, #25
 8005276:	bf48      	it	mi
 8005278:	b2ad      	uxthmi	r5, r5
 800527a:	6031      	str	r1, [r6, #0]
 800527c:	07d9      	lsls	r1, r3, #31
 800527e:	bf44      	itt	mi
 8005280:	f043 0320 	orrmi.w	r3, r3, #32
 8005284:	6023      	strmi	r3, [r4, #0]
 8005286:	b11d      	cbz	r5, 8005290 <_printf_i+0x1a0>
 8005288:	2310      	movs	r3, #16
 800528a:	e7ab      	b.n	80051e4 <_printf_i+0xf4>
 800528c:	4826      	ldr	r0, [pc, #152]	@ (8005328 <_printf_i+0x238>)
 800528e:	e7e9      	b.n	8005264 <_printf_i+0x174>
 8005290:	6823      	ldr	r3, [r4, #0]
 8005292:	f023 0320 	bic.w	r3, r3, #32
 8005296:	6023      	str	r3, [r4, #0]
 8005298:	e7f6      	b.n	8005288 <_printf_i+0x198>
 800529a:	4616      	mov	r6, r2
 800529c:	e7bd      	b.n	800521a <_printf_i+0x12a>
 800529e:	6833      	ldr	r3, [r6, #0]
 80052a0:	6825      	ldr	r5, [r4, #0]
 80052a2:	1d18      	adds	r0, r3, #4
 80052a4:	6961      	ldr	r1, [r4, #20]
 80052a6:	6030      	str	r0, [r6, #0]
 80052a8:	062e      	lsls	r6, r5, #24
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	d501      	bpl.n	80052b2 <_printf_i+0x1c2>
 80052ae:	6019      	str	r1, [r3, #0]
 80052b0:	e002      	b.n	80052b8 <_printf_i+0x1c8>
 80052b2:	0668      	lsls	r0, r5, #25
 80052b4:	d5fb      	bpl.n	80052ae <_printf_i+0x1be>
 80052b6:	8019      	strh	r1, [r3, #0]
 80052b8:	2300      	movs	r3, #0
 80052ba:	4616      	mov	r6, r2
 80052bc:	6123      	str	r3, [r4, #16]
 80052be:	e7bc      	b.n	800523a <_printf_i+0x14a>
 80052c0:	6833      	ldr	r3, [r6, #0]
 80052c2:	2100      	movs	r1, #0
 80052c4:	1d1a      	adds	r2, r3, #4
 80052c6:	6032      	str	r2, [r6, #0]
 80052c8:	681e      	ldr	r6, [r3, #0]
 80052ca:	6862      	ldr	r2, [r4, #4]
 80052cc:	4630      	mov	r0, r6
 80052ce:	f000 f849 	bl	8005364 <memchr>
 80052d2:	b108      	cbz	r0, 80052d8 <_printf_i+0x1e8>
 80052d4:	1b80      	subs	r0, r0, r6
 80052d6:	6060      	str	r0, [r4, #4]
 80052d8:	6863      	ldr	r3, [r4, #4]
 80052da:	6123      	str	r3, [r4, #16]
 80052dc:	2300      	movs	r3, #0
 80052de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052e2:	e7aa      	b.n	800523a <_printf_i+0x14a>
 80052e4:	4632      	mov	r2, r6
 80052e6:	4649      	mov	r1, r9
 80052e8:	4640      	mov	r0, r8
 80052ea:	6923      	ldr	r3, [r4, #16]
 80052ec:	47d0      	blx	sl
 80052ee:	3001      	adds	r0, #1
 80052f0:	d0ad      	beq.n	800524e <_printf_i+0x15e>
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	079b      	lsls	r3, r3, #30
 80052f6:	d413      	bmi.n	8005320 <_printf_i+0x230>
 80052f8:	68e0      	ldr	r0, [r4, #12]
 80052fa:	9b03      	ldr	r3, [sp, #12]
 80052fc:	4298      	cmp	r0, r3
 80052fe:	bfb8      	it	lt
 8005300:	4618      	movlt	r0, r3
 8005302:	e7a6      	b.n	8005252 <_printf_i+0x162>
 8005304:	2301      	movs	r3, #1
 8005306:	4632      	mov	r2, r6
 8005308:	4649      	mov	r1, r9
 800530a:	4640      	mov	r0, r8
 800530c:	47d0      	blx	sl
 800530e:	3001      	adds	r0, #1
 8005310:	d09d      	beq.n	800524e <_printf_i+0x15e>
 8005312:	3501      	adds	r5, #1
 8005314:	68e3      	ldr	r3, [r4, #12]
 8005316:	9903      	ldr	r1, [sp, #12]
 8005318:	1a5b      	subs	r3, r3, r1
 800531a:	42ab      	cmp	r3, r5
 800531c:	dcf2      	bgt.n	8005304 <_printf_i+0x214>
 800531e:	e7eb      	b.n	80052f8 <_printf_i+0x208>
 8005320:	2500      	movs	r5, #0
 8005322:	f104 0619 	add.w	r6, r4, #25
 8005326:	e7f5      	b.n	8005314 <_printf_i+0x224>
 8005328:	0800555b 	.word	0x0800555b
 800532c:	0800556c 	.word	0x0800556c

08005330 <memmove>:
 8005330:	4288      	cmp	r0, r1
 8005332:	b510      	push	{r4, lr}
 8005334:	eb01 0402 	add.w	r4, r1, r2
 8005338:	d902      	bls.n	8005340 <memmove+0x10>
 800533a:	4284      	cmp	r4, r0
 800533c:	4623      	mov	r3, r4
 800533e:	d807      	bhi.n	8005350 <memmove+0x20>
 8005340:	1e43      	subs	r3, r0, #1
 8005342:	42a1      	cmp	r1, r4
 8005344:	d008      	beq.n	8005358 <memmove+0x28>
 8005346:	f811 2b01 	ldrb.w	r2, [r1], #1
 800534a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800534e:	e7f8      	b.n	8005342 <memmove+0x12>
 8005350:	4601      	mov	r1, r0
 8005352:	4402      	add	r2, r0
 8005354:	428a      	cmp	r2, r1
 8005356:	d100      	bne.n	800535a <memmove+0x2a>
 8005358:	bd10      	pop	{r4, pc}
 800535a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800535e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005362:	e7f7      	b.n	8005354 <memmove+0x24>

08005364 <memchr>:
 8005364:	4603      	mov	r3, r0
 8005366:	b510      	push	{r4, lr}
 8005368:	b2c9      	uxtb	r1, r1
 800536a:	4402      	add	r2, r0
 800536c:	4293      	cmp	r3, r2
 800536e:	4618      	mov	r0, r3
 8005370:	d101      	bne.n	8005376 <memchr+0x12>
 8005372:	2000      	movs	r0, #0
 8005374:	e003      	b.n	800537e <memchr+0x1a>
 8005376:	7804      	ldrb	r4, [r0, #0]
 8005378:	3301      	adds	r3, #1
 800537a:	428c      	cmp	r4, r1
 800537c:	d1f6      	bne.n	800536c <memchr+0x8>
 800537e:	bd10      	pop	{r4, pc}

08005380 <_realloc_r>:
 8005380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005384:	4680      	mov	r8, r0
 8005386:	4615      	mov	r5, r2
 8005388:	460c      	mov	r4, r1
 800538a:	b921      	cbnz	r1, 8005396 <_realloc_r+0x16>
 800538c:	4611      	mov	r1, r2
 800538e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005392:	f7ff bb95 	b.w	8004ac0 <_malloc_r>
 8005396:	b92a      	cbnz	r2, 80053a4 <_realloc_r+0x24>
 8005398:	f7ff fc98 	bl	8004ccc <_free_r>
 800539c:	2400      	movs	r4, #0
 800539e:	4620      	mov	r0, r4
 80053a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053a4:	f000 f81a 	bl	80053dc <_malloc_usable_size_r>
 80053a8:	4285      	cmp	r5, r0
 80053aa:	4606      	mov	r6, r0
 80053ac:	d802      	bhi.n	80053b4 <_realloc_r+0x34>
 80053ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80053b2:	d8f4      	bhi.n	800539e <_realloc_r+0x1e>
 80053b4:	4629      	mov	r1, r5
 80053b6:	4640      	mov	r0, r8
 80053b8:	f7ff fb82 	bl	8004ac0 <_malloc_r>
 80053bc:	4607      	mov	r7, r0
 80053be:	2800      	cmp	r0, #0
 80053c0:	d0ec      	beq.n	800539c <_realloc_r+0x1c>
 80053c2:	42b5      	cmp	r5, r6
 80053c4:	462a      	mov	r2, r5
 80053c6:	4621      	mov	r1, r4
 80053c8:	bf28      	it	cs
 80053ca:	4632      	movcs	r2, r6
 80053cc:	f7ff fc70 	bl	8004cb0 <memcpy>
 80053d0:	4621      	mov	r1, r4
 80053d2:	4640      	mov	r0, r8
 80053d4:	f7ff fc7a 	bl	8004ccc <_free_r>
 80053d8:	463c      	mov	r4, r7
 80053da:	e7e0      	b.n	800539e <_realloc_r+0x1e>

080053dc <_malloc_usable_size_r>:
 80053dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053e0:	1f18      	subs	r0, r3, #4
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	bfbc      	itt	lt
 80053e6:	580b      	ldrlt	r3, [r1, r0]
 80053e8:	18c0      	addlt	r0, r0, r3
 80053ea:	4770      	bx	lr

080053ec <_init>:
 80053ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ee:	bf00      	nop
 80053f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053f2:	bc08      	pop	{r3}
 80053f4:	469e      	mov	lr, r3
 80053f6:	4770      	bx	lr

080053f8 <_fini>:
 80053f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fa:	bf00      	nop
 80053fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053fe:	bc08      	pop	{r3}
 8005400:	469e      	mov	lr, r3
 8005402:	4770      	bx	lr
