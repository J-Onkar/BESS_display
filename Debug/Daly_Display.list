
Daly_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053b0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  080054bc  080054bc  000064bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800565c  0800565c  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  0800565c  0800565c  0000665c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005664  08005664  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005664  08005664  00006664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005668  08005668  00006668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800566c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000534  2000005c  080056c8  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000590  080056c8  00007590  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001071b  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ecd  00000000  00000000  000177a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  0001a670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c5f  00000000  00000000  0001b690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001993e  00000000  00000000  0001c2ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014576  00000000  00000000  00035c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dfb5  00000000  00000000  0004a1a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8158  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004650  00000000  00000000  000d819c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000dc7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080054a4 	.word	0x080054a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080054a4 	.word	0x080054a4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HTONS>:
static uint32_t tim1, tim2, tim3, tim4;

udan_14_t msg_14;
udan_13_t msg_13;

static inline uint16_t HTONS(uint16_t x) {
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	80fb      	strh	r3, [r7, #6]
	return ((x << 8) | ((x >> 8) & 0xFF));
 8000166:	88fb      	ldrh	r3, [r7, #6]
 8000168:	021b      	lsls	r3, r3, #8
 800016a:	b21a      	sxth	r2, r3
 800016c:	88fb      	ldrh	r3, [r7, #6]
 800016e:	0a1b      	lsrs	r3, r3, #8
 8000170:	b29b      	uxth	r3, r3
 8000172:	b21b      	sxth	r3, r3
 8000174:	4313      	orrs	r3, r2
 8000176:	b21b      	sxth	r3, r3
 8000178:	b29b      	uxth	r3, r3
}
 800017a:	4618      	mov	r0, r3
 800017c:	370c      	adds	r7, #12
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr

08000184 <send_can_message>:

static void send_can_message() {
 8000184:	b580      	push	{r7, lr}
 8000186:	b084      	sub	sp, #16
 8000188:	af00      	add	r7, sp, #0

	tx_hdr.ExtId = curr_id;
 800018a:	4b22      	ldr	r3, [pc, #136]	@ (8000214 <send_can_message+0x90>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	4a22      	ldr	r2, [pc, #136]	@ (8000218 <send_can_message+0x94>)
 8000190:	6053      	str	r3, [r2, #4]
	switch (curr_id) {
 8000192:	4b20      	ldr	r3, [pc, #128]	@ (8000214 <send_can_message+0x90>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	4a21      	ldr	r2, [pc, #132]	@ (800021c <send_can_message+0x98>)
 8000198:	4293      	cmp	r3, r2
 800019a:	d01b      	beq.n	80001d4 <send_can_message+0x50>
 800019c:	4a1f      	ldr	r2, [pc, #124]	@ (800021c <send_can_message+0x98>)
 800019e:	4293      	cmp	r3, r2
 80001a0:	d81d      	bhi.n	80001de <send_can_message+0x5a>
 80001a2:	4a1f      	ldr	r2, [pc, #124]	@ (8000220 <send_can_message+0x9c>)
 80001a4:	4293      	cmp	r3, r2
 80001a6:	d011      	beq.n	80001cc <send_can_message+0x48>
 80001a8:	4a1d      	ldr	r2, [pc, #116]	@ (8000220 <send_can_message+0x9c>)
 80001aa:	4293      	cmp	r3, r2
 80001ac:	d817      	bhi.n	80001de <send_can_message+0x5a>
 80001ae:	4a1d      	ldr	r2, [pc, #116]	@ (8000224 <send_can_message+0xa0>)
 80001b0:	4293      	cmp	r3, r2
 80001b2:	d003      	beq.n	80001bc <send_can_message+0x38>
 80001b4:	4a1c      	ldr	r2, [pc, #112]	@ (8000228 <send_can_message+0xa4>)
 80001b6:	4293      	cmp	r3, r2
 80001b8:	d004      	beq.n	80001c4 <send_can_message+0x40>
 80001ba:	e010      	b.n	80001de <send_can_message+0x5a>
	case MSG_QUERY_90: {
		curr_id = MSG_QUERY_91;
 80001bc:	4b15      	ldr	r3, [pc, #84]	@ (8000214 <send_can_message+0x90>)
 80001be:	4a1a      	ldr	r2, [pc, #104]	@ (8000228 <send_can_message+0xa4>)
 80001c0:	601a      	str	r2, [r3, #0]
		break;
 80001c2:	e00c      	b.n	80001de <send_can_message+0x5a>
	}

	case MSG_QUERY_91: {
		curr_id = MSG_QUERY_92;
 80001c4:	4b13      	ldr	r3, [pc, #76]	@ (8000214 <send_can_message+0x90>)
 80001c6:	4a16      	ldr	r2, [pc, #88]	@ (8000220 <send_can_message+0x9c>)
 80001c8:	601a      	str	r2, [r3, #0]
		break;
 80001ca:	e008      	b.n	80001de <send_can_message+0x5a>
	}

	case MSG_QUERY_92: {
		curr_id = MSG_QUERY_93;
 80001cc:	4b11      	ldr	r3, [pc, #68]	@ (8000214 <send_can_message+0x90>)
 80001ce:	4a13      	ldr	r2, [pc, #76]	@ (800021c <send_can_message+0x98>)
 80001d0:	601a      	str	r2, [r3, #0]
		break;
 80001d2:	e004      	b.n	80001de <send_can_message+0x5a>
	}

	case MSG_QUERY_93: {
		curr_id = INVALID_ID;
 80001d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000214 <send_can_message+0x90>)
 80001d6:	f04f 32ff 	mov.w	r2, #4294967295
 80001da:	601a      	str	r2, [r3, #0]
		break;
 80001dc:	bf00      	nop
	}
	}

	uint32_t mailbox;
	uint8_t data[8] = { 0 };
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	2300      	movs	r3, #0
 80001e4:	60bb      	str	r3, [r7, #8]

	if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) > 0) {
 80001e6:	4811      	ldr	r0, [pc, #68]	@ (800022c <send_can_message+0xa8>)
 80001e8:	f001 f9fb 	bl	80015e2 <HAL_CAN_GetTxMailboxesFreeLevel>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d00b      	beq.n	800020a <send_can_message+0x86>
		if (HAL_CAN_AddTxMessage(&hcan, &tx_hdr, data, &mailbox) != HAL_OK) {
 80001f2:	f107 030c 	add.w	r3, r7, #12
 80001f6:	1d3a      	adds	r2, r7, #4
 80001f8:	4907      	ldr	r1, [pc, #28]	@ (8000218 <send_can_message+0x94>)
 80001fa:	480c      	ldr	r0, [pc, #48]	@ (800022c <send_can_message+0xa8>)
 80001fc:	f001 f922 	bl	8001444 <HAL_CAN_AddTxMessage>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <send_can_message+0x86>
			Error_Handler();
 8000206:	f000 fbd4 	bl	80009b2 <Error_Handler>
		}
	}

}
 800020a:	bf00      	nop
 800020c:	3710      	adds	r7, #16
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	20000078 	.word	0x20000078
 8000218:	20000114 	.word	0x20000114
 800021c:	18930140 	.word	0x18930140
 8000220:	18920140 	.word	0x18920140
 8000224:	18900140 	.word	0x18900140
 8000228:	18910140 	.word	0x18910140
 800022c:	2000014c 	.word	0x2000014c

08000230 <tx_hdr_init>:

static void tx_hdr_init(void) {
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
	tx_hdr.DLC = 8;
 8000234:	4b09      	ldr	r3, [pc, #36]	@ (800025c <tx_hdr_init+0x2c>)
 8000236:	2208      	movs	r2, #8
 8000238:	611a      	str	r2, [r3, #16]
	tx_hdr.ExtId = INVALID_ID;
 800023a:	4b08      	ldr	r3, [pc, #32]	@ (800025c <tx_hdr_init+0x2c>)
 800023c:	f04f 32ff 	mov.w	r2, #4294967295
 8000240:	605a      	str	r2, [r3, #4]
	tx_hdr.IDE = CAN_ID_EXT;
 8000242:	4b06      	ldr	r3, [pc, #24]	@ (800025c <tx_hdr_init+0x2c>)
 8000244:	2204      	movs	r2, #4
 8000246:	609a      	str	r2, [r3, #8]
	tx_hdr.RTR = CAN_RTR_DATA;
 8000248:	4b04      	ldr	r3, [pc, #16]	@ (800025c <tx_hdr_init+0x2c>)
 800024a:	2200      	movs	r2, #0
 800024c:	60da      	str	r2, [r3, #12]
	tx_hdr.TransmitGlobalTime = DISABLE;
 800024e:	4b03      	ldr	r3, [pc, #12]	@ (800025c <tx_hdr_init+0x2c>)
 8000250:	2200      	movs	r2, #0
 8000252:	751a      	strb	r2, [r3, #20]
}
 8000254:	bf00      	nop
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr
 800025c:	20000114 	.word	0x20000114

08000260 <update_udan_14>:

static void update_udan_14(uint8_t data[]) {
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]

	(void) memcpy(msg_14.gen_data, data, 8);
 8000268:	4b1a      	ldr	r3, [pc, #104]	@ (80002d4 <update_udan_14+0x74>)
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	6810      	ldr	r0, [r2, #0]
 800026e:	6851      	ldr	r1, [r2, #4]
 8000270:	c303      	stmia	r3!, {r0, r1}

	update_batt_volt_label(HTONS(msg_14.batt_volt));
 8000272:	4b18      	ldr	r3, [pc, #96]	@ (80002d4 <update_udan_14+0x74>)
 8000274:	881b      	ldrh	r3, [r3, #0]
 8000276:	4618      	mov	r0, r3
 8000278:	f7ff ff70 	bl	800015c <HTONS>
 800027c:	4603      	mov	r3, r0
 800027e:	4618      	mov	r0, r3
 8000280:	f004 fa64 	bl	800474c <update_batt_volt_label>
	update_batt_curr_label((HTONS(msg_14.batt_curr))-10000);
 8000284:	4b13      	ldr	r3, [pc, #76]	@ (80002d4 <update_udan_14+0x74>)
 8000286:	885b      	ldrh	r3, [r3, #2]
 8000288:	4618      	mov	r0, r3
 800028a:	f7ff ff67 	bl	800015c <HTONS>
 800028e:	4603      	mov	r3, r0
 8000290:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8000294:	3b10      	subs	r3, #16
 8000296:	4618      	mov	r0, r3
 8000298:	f004 fa6a 	bl	8004770 <update_batt_curr_label>
	update_batt_soc_label(HTONS(msg_14.batt_soc));
 800029c:	4b0d      	ldr	r3, [pc, #52]	@ (80002d4 <update_udan_14+0x74>)
 800029e:	889b      	ldrh	r3, [r3, #4]
 80002a0:	4618      	mov	r0, r3
 80002a2:	f7ff ff5b 	bl	800015c <HTONS>
 80002a6:	4603      	mov	r3, r0
 80002a8:	4618      	mov	r0, r3
 80002aa:	f004 fa73 	bl	8004794 <update_batt_soc_label>
	update_soc_bar_label((HTONS(msg_14.batt_soc))/10);
 80002ae:	4b09      	ldr	r3, [pc, #36]	@ (80002d4 <update_udan_14+0x74>)
 80002b0:	889b      	ldrh	r3, [r3, #4]
 80002b2:	4618      	mov	r0, r3
 80002b4:	f7ff ff52 	bl	800015c <HTONS>
 80002b8:	4603      	mov	r3, r0
 80002ba:	461a      	mov	r2, r3
 80002bc:	4b06      	ldr	r3, [pc, #24]	@ (80002d8 <update_udan_14+0x78>)
 80002be:	fba3 2302 	umull	r2, r3, r3, r2
 80002c2:	08db      	lsrs	r3, r3, #3
 80002c4:	b29b      	uxth	r3, r3
 80002c6:	4618      	mov	r0, r3
 80002c8:	f004 fa76 	bl	80047b8 <update_soc_bar_label>
}
 80002cc:	bf00      	nop
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	2000013c 	.word	0x2000013c
 80002d8:	cccccccd 	.word	0xcccccccd

080002dc <update_udan_13>:

static void update_udan_13(uint8_t data[]) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]

	(void) memcpy(msg_13.gen_data, data, 8);
 80002e4:	4b14      	ldr	r3, [pc, #80]	@ (8000338 <update_udan_13+0x5c>)
 80002e6:	687a      	ldr	r2, [r7, #4]
 80002e8:	6810      	ldr	r0, [r2, #0]
 80002ea:	6851      	ldr	r1, [r2, #4]
 80002ec:	c303      	stmia	r3!, {r0, r1}

	if(msg_13.batt_chg_state == 0)
 80002ee:	4b12      	ldr	r3, [pc, #72]	@ (8000338 <update_udan_13+0x5c>)
 80002f0:	79db      	ldrb	r3, [r3, #7]
 80002f2:	f003 0318 	and.w	r3, r3, #24
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d103      	bne.n	8000304 <update_udan_13+0x28>
	{update_batt_status_label("Idle");}
 80002fc:	480f      	ldr	r0, [pc, #60]	@ (800033c <update_udan_13+0x60>)
 80002fe:	f004 fa7f 	bl	8004800 <update_batt_status_label>
	else if (msg_13.batt_chg_state == 1)
		{	update_batt_status_label("Charging");}
	else if (msg_13.batt_chg_state == 2)
		{	update_batt_status_label("Discharging");}

}
 8000302:	e014      	b.n	800032e <update_udan_13+0x52>
	else if (msg_13.batt_chg_state == 1)
 8000304:	4b0c      	ldr	r3, [pc, #48]	@ (8000338 <update_udan_13+0x5c>)
 8000306:	79db      	ldrb	r3, [r3, #7]
 8000308:	f003 0318 	and.w	r3, r3, #24
 800030c:	b2db      	uxtb	r3, r3
 800030e:	2b08      	cmp	r3, #8
 8000310:	d103      	bne.n	800031a <update_udan_13+0x3e>
		{	update_batt_status_label("Charging");}
 8000312:	480b      	ldr	r0, [pc, #44]	@ (8000340 <update_udan_13+0x64>)
 8000314:	f004 fa74 	bl	8004800 <update_batt_status_label>
}
 8000318:	e009      	b.n	800032e <update_udan_13+0x52>
	else if (msg_13.batt_chg_state == 2)
 800031a:	4b07      	ldr	r3, [pc, #28]	@ (8000338 <update_udan_13+0x5c>)
 800031c:	79db      	ldrb	r3, [r3, #7]
 800031e:	f003 0318 	and.w	r3, r3, #24
 8000322:	b2db      	uxtb	r3, r3
 8000324:	2b10      	cmp	r3, #16
 8000326:	d102      	bne.n	800032e <update_udan_13+0x52>
		{	update_batt_status_label("Discharging");}
 8000328:	4806      	ldr	r0, [pc, #24]	@ (8000344 <update_udan_13+0x68>)
 800032a:	f004 fa69 	bl	8004800 <update_batt_status_label>
}
 800032e:	bf00      	nop
 8000330:	3708      	adds	r7, #8
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000144 	.word	0x20000144
 800033c:	080054bc 	.word	0x080054bc
 8000340:	080054c4 	.word	0x080054c4
 8000344:	080054d0 	.word	0x080054d0

08000348 <read_can_message>:


static void read_can_message(void) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0

	q_member_t *q_member = peek(&rx_queue);
 800034e:	4816      	ldr	r0, [pc, #88]	@ (80003a8 <read_can_message+0x60>)
 8000350:	f004 fbcd 	bl	8004aee <peek>
 8000354:	6078      	str	r0, [r7, #4]

	if (q_member != NULL) {
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d020      	beq.n	800039e <read_can_message+0x56>

		switch (q_member->can_id) {
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f5b3 5f98 	cmp.w	r3, #4864	@ 0x1300
 8000364:	d00d      	beq.n	8000382 <read_can_message+0x3a>
 8000366:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800036a:	d115      	bne.n	8000398 <read_can_message+0x50>

		case UDAN_14: {
			update_udan_14(q_member->data);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3304      	adds	r3, #4
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ff75 	bl	8000260 <update_udan_14>
			tim1 = HAL_GetTick();
 8000376:	f000 fe53 	bl	8001020 <HAL_GetTick>
 800037a:	4603      	mov	r3, r0
 800037c:	4a0b      	ldr	r2, [pc, #44]	@ (80003ac <read_can_message+0x64>)
 800037e:	6013      	str	r3, [r2, #0]
			break;
 8000380:	e00a      	b.n	8000398 <read_can_message+0x50>
		}

		case UDAN_13: {
			update_udan_13(q_member->data);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	3304      	adds	r3, #4
 8000386:	4618      	mov	r0, r3
 8000388:	f7ff ffa8 	bl	80002dc <update_udan_13>
			tim2 = HAL_GetTick();
 800038c:	f000 fe48 	bl	8001020 <HAL_GetTick>
 8000390:	4603      	mov	r3, r0
 8000392:	4a07      	ldr	r2, [pc, #28]	@ (80003b0 <read_can_message+0x68>)
 8000394:	6013      	str	r3, [r2, #0]
			break;
 8000396:	bf00      	nop
		}

		}
		dequeue(&rx_queue);
 8000398:	4803      	ldr	r0, [pc, #12]	@ (80003a8 <read_can_message+0x60>)
 800039a:	f004 fb77 	bl	8004a8c <dequeue>

	}

}
 800039e:	bf00      	nop
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	2000007c 	.word	0x2000007c
 80003ac:	2000012c 	.word	0x2000012c
 80003b0:	20000130 	.word	0x20000130

080003b4 <timer_check>:

static void timer_check(void) {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0

	if ((HAL_GetTick() - tim1) > 5000U) {
 80003b8:	f000 fe32 	bl	8001020 <HAL_GetTick>
 80003bc:	4602      	mov	r2, r0
 80003be:	4b1a      	ldr	r3, [pc, #104]	@ (8000428 <timer_check+0x74>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	1ad3      	subs	r3, r2, r3
 80003c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d907      	bls.n	80003dc <timer_check+0x28>
		reset_page1_display();
 80003cc:	f004 fabe 	bl	800494c <reset_page1_display>
		tim1 = HAL_GetTick();
 80003d0:	f000 fe26 	bl	8001020 <HAL_GetTick>
 80003d4:	4603      	mov	r3, r0
 80003d6:	4a14      	ldr	r2, [pc, #80]	@ (8000428 <timer_check+0x74>)
 80003d8:	6013      	str	r3, [r2, #0]

		reset_page3_display();
		tim3 = HAL_GetTick();

	}
}
 80003da:	e022      	b.n	8000422 <timer_check+0x6e>
	else if ((HAL_GetTick() - tim2) > 5000U) {
 80003dc:	f000 fe20 	bl	8001020 <HAL_GetTick>
 80003e0:	4602      	mov	r2, r0
 80003e2:	4b12      	ldr	r3, [pc, #72]	@ (800042c <timer_check+0x78>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	1ad3      	subs	r3, r2, r3
 80003e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d907      	bls.n	8000400 <timer_check+0x4c>
		reset_page2_display();
 80003f0:	f004 fabc 	bl	800496c <reset_page2_display>
		tim2 = HAL_GetTick();
 80003f4:	f000 fe14 	bl	8001020 <HAL_GetTick>
 80003f8:	4603      	mov	r3, r0
 80003fa:	4a0c      	ldr	r2, [pc, #48]	@ (800042c <timer_check+0x78>)
 80003fc:	6013      	str	r3, [r2, #0]
}
 80003fe:	e010      	b.n	8000422 <timer_check+0x6e>
	else if ((HAL_GetTick() - tim3) > 5000U) {
 8000400:	f000 fe0e 	bl	8001020 <HAL_GetTick>
 8000404:	4602      	mov	r2, r0
 8000406:	4b0a      	ldr	r3, [pc, #40]	@ (8000430 <timer_check+0x7c>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	1ad3      	subs	r3, r2, r3
 800040c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000410:	4293      	cmp	r3, r2
 8000412:	d906      	bls.n	8000422 <timer_check+0x6e>
		reset_page3_display();
 8000414:	f004 fab4 	bl	8004980 <reset_page3_display>
		tim3 = HAL_GetTick();
 8000418:	f000 fe02 	bl	8001020 <HAL_GetTick>
 800041c:	4603      	mov	r3, r0
 800041e:	4a04      	ldr	r2, [pc, #16]	@ (8000430 <timer_check+0x7c>)
 8000420:	6013      	str	r3, [r2, #0]
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	2000012c 	.word	0x2000012c
 800042c:	20000130 	.word	0x20000130
 8000430:	20000134 	.word	0x20000134

08000434 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM1) {
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a17      	ldr	r2, [pc, #92]	@ (80004a0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d105      	bne.n	8000452 <HAL_TIM_PeriodElapsedCallback+0x1e>
		curr_id = MSG_QUERY_90;
 8000446:	4b17      	ldr	r3, [pc, #92]	@ (80004a4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000448:	4a17      	ldr	r2, [pc, #92]	@ (80004a8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800044a:	601a      	str	r2, [r3, #0]
		send_can_message();
 800044c:	f7ff fe9a 	bl	8000184 <send_can_message>
		if (htim->Instance == TIM3) {
			HAL_GPIO_TogglePin(Buzzer_pin_GPIO_Port, Buzzer_pin_Pin);
		}
	}

}
 8000450:	e021      	b.n	8000496 <HAL_TIM_PeriodElapsedCallback+0x62>
	else if (htim->Instance == TIM2) {
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800045a:	d113      	bne.n	8000484 <HAL_TIM_PeriodElapsedCallback+0x50>
		update_comm_status_label("Loss of Comm");
 800045c:	4813      	ldr	r0, [pc, #76]	@ (80004ac <HAL_TIM_PeriodElapsedCallback+0x78>)
 800045e:	f004 f9bd 	bl	80047dc <update_comm_status_label>
		reset_display();
 8000462:	f004 fa4b 	bl	80048fc <reset_display>
		if (htim3.State != HAL_TIM_STATE_READY) {
 8000466:	4b12      	ldr	r3, [pc, #72]	@ (80004b0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000468:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800046c:	b2db      	uxtb	r3, r3
 800046e:	2b01      	cmp	r3, #1
 8000470:	d011      	beq.n	8000496 <HAL_TIM_PeriodElapsedCallback+0x62>
			HAL_GPIO_WritePin(Buzzer_pin_GPIO_Port, Buzzer_pin_Pin,
 8000472:	2200      	movs	r2, #0
 8000474:	2120      	movs	r1, #32
 8000476:	480f      	ldr	r0, [pc, #60]	@ (80004b4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000478:	f001 ff7a 	bl	8002370 <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop_IT(&htim3);
 800047c:	480c      	ldr	r0, [pc, #48]	@ (80004b0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800047e:	f002 fcab 	bl	8002dd8 <HAL_TIM_Base_Stop_IT>
}
 8000482:	e008      	b.n	8000496 <HAL_TIM_PeriodElapsedCallback+0x62>
		if (htim->Instance == TIM3) {
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a0b      	ldr	r2, [pc, #44]	@ (80004b8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d103      	bne.n	8000496 <HAL_TIM_PeriodElapsedCallback+0x62>
			HAL_GPIO_TogglePin(Buzzer_pin_GPIO_Port, Buzzer_pin_Pin);
 800048e:	2120      	movs	r1, #32
 8000490:	4808      	ldr	r0, [pc, #32]	@ (80004b4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000492:	f001 ff85 	bl	80023a0 <HAL_GPIO_TogglePin>
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40012c00 	.word	0x40012c00
 80004a4:	20000078 	.word	0x20000078
 80004a8:	18900140 	.word	0x18900140
 80004ac:	080054dc 	.word	0x080054dc
 80004b0:	20000214 	.word	0x20000214
 80004b4:	40010800 	.word	0x40010800
 80004b8:	40000400 	.word	0x40000400

080004bc <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	if (curr_id != INVALID_ID) {
 80004c4:	4b05      	ldr	r3, [pc, #20]	@ (80004dc <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004cc:	d001      	beq.n	80004d2 <HAL_CAN_TxMailbox0CompleteCallback+0x16>
		send_can_message();
 80004ce:	f7ff fe59 	bl	8000184 <send_can_message>
	}
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000078 	.word	0x20000078

080004e0 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	if (curr_id != INVALID_ID) {
 80004e8:	4b05      	ldr	r3, [pc, #20]	@ (8000500 <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004f0:	d001      	beq.n	80004f6 <HAL_CAN_TxMailbox1CompleteCallback+0x16>
		send_can_message();
 80004f2:	f7ff fe47 	bl	8000184 <send_can_message>
	}
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000078 	.word	0x20000078

08000504 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	if (curr_id != INVALID_ID) {
 800050c:	4b05      	ldr	r3, [pc, #20]	@ (8000524 <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000514:	d001      	beq.n	800051a <HAL_CAN_TxMailbox2CompleteCallback+0x16>
		send_can_message();
 8000516:	f7ff fe35 	bl	8000184 <send_can_message>
	}
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000078 	.word	0x20000078

08000528 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b08c      	sub	sp, #48	@ 0x30
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]

	CAN_RxHeaderTypeDef rx_hdr;
	uint8_t rx_data[8] = { 0 };
 8000530:	2300      	movs	r3, #0
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	2300      	movs	r3, #0
 8000536:	613b      	str	r3, [r7, #16]

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_hdr, rx_data) != HAL_OK) {
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	f107 0214 	add.w	r2, r7, #20
 8000540:	2100      	movs	r1, #0
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f001 f881 	bl	800164a <HAL_CAN_GetRxMessage>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
		Error_Handler();
 800054e:	f000 fa30 	bl	80009b2 <Error_Handler>
	}

	enqueue(&rx_queue, rx_hdr.ExtId, rx_data);
 8000552:	69bb      	ldr	r3, [r7, #24]
 8000554:	f107 020c 	add.w	r2, r7, #12
 8000558:	4619      	mov	r1, r3
 800055a:	4803      	ldr	r0, [pc, #12]	@ (8000568 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800055c:	f004 fa5d 	bl	8004a1a <enqueue>
}
 8000560:	bf00      	nop
 8000562:	3730      	adds	r7, #48	@ 0x30
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	2000007c 	.word	0x2000007c

0800056c <app_init>:

void app_init(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	curr_id = INVALID_ID;
 8000570:	4b13      	ldr	r3, [pc, #76]	@ (80005c0 <app_init+0x54>)
 8000572:	f04f 32ff 	mov.w	r2, #4294967295
 8000576:	601a      	str	r2, [r3, #0]
	tx_hdr_init();
 8000578:	f7ff fe5a 	bl	8000230 <tx_hdr_init>
	queue_init(&rx_queue, queue_arr, QUEUE_LEN);
 800057c:	220c      	movs	r2, #12
 800057e:	4911      	ldr	r1, [pc, #68]	@ (80005c4 <app_init+0x58>)
 8000580:	4811      	ldr	r0, [pc, #68]	@ (80005c8 <app_init+0x5c>)
 8000582:	f004 fa0d 	bl	80049a0 <queue_init>
	nextion_disp_init();
 8000586:	f004 f813 	bl	80045b0 <nextion_disp_init>
	reset_display();
 800058a:	f004 f9b7 	bl	80048fc <reset_display>
	tim1 = HAL_GetTick();
 800058e:	f000 fd47 	bl	8001020 <HAL_GetTick>
 8000592:	4603      	mov	r3, r0
 8000594:	4a0d      	ldr	r2, [pc, #52]	@ (80005cc <app_init+0x60>)
 8000596:	6013      	str	r3, [r2, #0]
	tim2 = HAL_GetTick();
 8000598:	f000 fd42 	bl	8001020 <HAL_GetTick>
 800059c:	4603      	mov	r3, r0
 800059e:	4a0c      	ldr	r2, [pc, #48]	@ (80005d0 <app_init+0x64>)
 80005a0:	6013      	str	r3, [r2, #0]
	tim3 = HAL_GetTick();
 80005a2:	f000 fd3d 	bl	8001020 <HAL_GetTick>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a0a      	ldr	r2, [pc, #40]	@ (80005d4 <app_init+0x68>)
 80005aa:	6013      	str	r3, [r2, #0]
	tim4 = HAL_GetTick();
 80005ac:	f000 fd38 	bl	8001020 <HAL_GetTick>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a09      	ldr	r2, [pc, #36]	@ (80005d8 <app_init+0x6c>)
 80005b4:	6013      	str	r3, [r2, #0]
	update_comm_status_label("");
 80005b6:	4809      	ldr	r0, [pc, #36]	@ (80005dc <app_init+0x70>)
 80005b8:	f004 f910 	bl	80047dc <update_comm_status_label>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000078 	.word	0x20000078
 80005c4:	20000084 	.word	0x20000084
 80005c8:	2000007c 	.word	0x2000007c
 80005cc:	2000012c 	.word	0x2000012c
 80005d0:	20000130 	.word	0x20000130
 80005d4:	20000134 	.word	0x20000134
 80005d8:	20000138 	.word	0x20000138
 80005dc:	080054ec 	.word	0x080054ec

080005e0 <can_init>:

void can_init(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	@ 0x28
 80005e4:	af00      	add	r7, sp, #0

	CAN_FilterTypeDef filter1;

	filter1.FilterActivation = CAN_FILTER_ENABLE;
 80005e6:	2301      	movs	r3, #1
 80005e8:	623b      	str	r3, [r7, #32]
	filter1.FilterBank = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
	filter1.FilterFIFOAssignment = CAN_RX_FIFO0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
	filter1.FilterMode = CAN_FILTERMODE_IDMASK;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61bb      	str	r3, [r7, #24]
	filter1.FilterScale = CAN_FILTERSCALE_32BIT;
 80005f6:	2301      	movs	r3, #1
 80005f8:	61fb      	str	r3, [r7, #28]
	filter1.FilterIdHigh = 0x0000;
 80005fa:	2300      	movs	r3, #0
 80005fc:	603b      	str	r3, [r7, #0]
	filter1.FilterIdLow = 0x8000;
 80005fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000602:	607b      	str	r3, [r7, #4]
	filter1.FilterMaskIdHigh = 0x0000;
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
	filter1.FilterMaskIdLow = 0x8000;
 8000608:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800060c:	60fb      	str	r3, [r7, #12]


	if (HAL_CAN_ConfigFilter(&hcan, &filter1) != HAL_OK) {
 800060e:	463b      	mov	r3, r7
 8000610:	4619      	mov	r1, r3
 8000612:	4813      	ldr	r0, [pc, #76]	@ (8000660 <can_init+0x80>)
 8000614:	f000 fe09 	bl	800122a <HAL_CAN_ConfigFilter>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <can_init+0x42>
		Error_Handler();
 800061e:	f000 f9c8 	bl	80009b2 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000622:	2102      	movs	r1, #2
 8000624:	480e      	ldr	r0, [pc, #56]	@ (8000660 <can_init+0x80>)
 8000626:	f001 f931 	bl	800188c <HAL_CAN_ActivateNotification>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <can_init+0x54>
			!= HAL_OK) {
		Error_Handler();
 8000630:	f000 f9bf 	bl	80009b2 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_TX_MAILBOX_EMPTY)
 8000634:	2101      	movs	r1, #1
 8000636:	480a      	ldr	r0, [pc, #40]	@ (8000660 <can_init+0x80>)
 8000638:	f001 f928 	bl	800188c <HAL_CAN_ActivateNotification>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <can_init+0x66>
			!= HAL_OK) {
		Error_Handler();
 8000642:	f000 f9b6 	bl	80009b2 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8000646:	4806      	ldr	r0, [pc, #24]	@ (8000660 <can_init+0x80>)
 8000648:	f000 feb8 	bl	80013bc <HAL_CAN_Start>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <can_init+0x76>
		Error_Handler();
 8000652:	f000 f9ae 	bl	80009b2 <Error_Handler>
	}

}
 8000656:	bf00      	nop
 8000658:	3728      	adds	r7, #40	@ 0x28
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	2000014c 	.word	0x2000014c

08000664 <timer_init>:

void timer_init(void) {
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0

	if (HAL_TIM_Base_Start_IT(&htim1)) {
 8000668:	480b      	ldr	r0, [pc, #44]	@ (8000698 <timer_init+0x34>)
 800066a:	f002 fb63 	bl	8002d34 <HAL_TIM_Base_Start_IT>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <timer_init+0x14>
		Error_Handler();
 8000674:	f000 f99d 	bl	80009b2 <Error_Handler>
	}

	__HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 8000678:	4b08      	ldr	r3, [pc, #32]	@ (800069c <timer_init+0x38>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f06f 0201 	mvn.w	r2, #1
 8000680:	611a      	str	r2, [r3, #16]

	if (HAL_TIM_Base_Start_IT(&htim2)) {
 8000682:	4806      	ldr	r0, [pc, #24]	@ (800069c <timer_init+0x38>)
 8000684:	f002 fb56 	bl	8002d34 <HAL_TIM_Base_Start_IT>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <timer_init+0x2e>
		Error_Handler();
 800068e:	f000 f990 	bl	80009b2 <Error_Handler>
	}

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000184 	.word	0x20000184
 800069c:	200001cc 	.word	0x200001cc

080006a0 <app_handler>:

void app_handler(void) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0

	while (1) {
		timer_check();
 80006a4:	f7ff fe86 	bl	80003b4 <timer_check>

		if (!is_empty(&rx_queue)) {
 80006a8:	480a      	ldr	r0, [pc, #40]	@ (80006d4 <app_handler+0x34>)
 80006aa:	f004 f994 	bl	80049d6 <is_empty>
 80006ae:	4603      	mov	r3, r0
 80006b0:	f083 0301 	eor.w	r3, r3, #1
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d008      	beq.n	80006cc <app_handler+0x2c>
			read_can_message();
 80006ba:	f7ff fe45 	bl	8000348 <read_can_message>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 80006be:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <app_handler+0x38>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2200      	movs	r2, #0
 80006c4:	625a      	str	r2, [r3, #36]	@ 0x24
			update_comm_status_label("");
 80006c6:	4805      	ldr	r0, [pc, #20]	@ (80006dc <app_handler+0x3c>)
 80006c8:	f004 f888 	bl	80047dc <update_comm_status_label>
		}
		HAL_IWDG_Refresh(&hiwdg);
 80006cc:	4804      	ldr	r0, [pc, #16]	@ (80006e0 <app_handler+0x40>)
 80006ce:	f001 fec2 	bl	8002456 <HAL_IWDG_Refresh>
		timer_check();
 80006d2:	e7e7      	b.n	80006a4 <app_handler+0x4>
 80006d4:	2000007c 	.word	0x2000007c
 80006d8:	200001cc 	.word	0x200001cc
 80006dc:	080054ec 	.word	0x080054ec
 80006e0:	20000174 	.word	0x20000174

080006e4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80006e8:	4b17      	ldr	r3, [pc, #92]	@ (8000748 <MX_CAN_Init+0x64>)
 80006ea:	4a18      	ldr	r2, [pc, #96]	@ (800074c <MX_CAN_Init+0x68>)
 80006ec:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 80006ee:	4b16      	ldr	r3, [pc, #88]	@ (8000748 <MX_CAN_Init+0x64>)
 80006f0:	2208      	movs	r2, #8
 80006f2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80006f4:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <MX_CAN_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006fa:	4b13      	ldr	r3, [pc, #76]	@ (8000748 <MX_CAN_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000700:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <MX_CAN_Init+0x64>)
 8000702:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000706:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000708:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <MX_CAN_Init+0x64>)
 800070a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800070e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000710:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <MX_CAN_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000716:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <MX_CAN_Init+0x64>)
 8000718:	2200      	movs	r2, #0
 800071a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800071c:	4b0a      	ldr	r3, [pc, #40]	@ (8000748 <MX_CAN_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000722:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <MX_CAN_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000728:	4b07      	ldr	r3, [pc, #28]	@ (8000748 <MX_CAN_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800072e:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <MX_CAN_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	@ (8000748 <MX_CAN_Init+0x64>)
 8000736:	f000 fc7d 	bl	8001034 <HAL_CAN_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000740:	f000 f937 	bl	80009b2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000014c 	.word	0x2000014c
 800074c:	40006400 	.word	0x40006400

08000750 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a2c      	ldr	r2, [pc, #176]	@ (800081c <HAL_CAN_MspInit+0xcc>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d151      	bne.n	8000814 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000770:	4b2b      	ldr	r3, [pc, #172]	@ (8000820 <HAL_CAN_MspInit+0xd0>)
 8000772:	69db      	ldr	r3, [r3, #28]
 8000774:	4a2a      	ldr	r2, [pc, #168]	@ (8000820 <HAL_CAN_MspInit+0xd0>)
 8000776:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800077a:	61d3      	str	r3, [r2, #28]
 800077c:	4b28      	ldr	r3, [pc, #160]	@ (8000820 <HAL_CAN_MspInit+0xd0>)
 800077e:	69db      	ldr	r3, [r3, #28]
 8000780:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000788:	4b25      	ldr	r3, [pc, #148]	@ (8000820 <HAL_CAN_MspInit+0xd0>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a24      	ldr	r2, [pc, #144]	@ (8000820 <HAL_CAN_MspInit+0xd0>)
 800078e:	f043 0304 	orr.w	r3, r3, #4
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b22      	ldr	r3, [pc, #136]	@ (8000820 <HAL_CAN_MspInit+0xd0>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f003 0304 	and.w	r3, r3, #4
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ae:	f107 0310 	add.w	r3, r7, #16
 80007b2:	4619      	mov	r1, r3
 80007b4:	481b      	ldr	r0, [pc, #108]	@ (8000824 <HAL_CAN_MspInit+0xd4>)
 80007b6:	f001 fc57 	bl	8002068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c4:	2303      	movs	r3, #3
 80007c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	f107 0310 	add.w	r3, r7, #16
 80007cc:	4619      	mov	r1, r3
 80007ce:	4815      	ldr	r0, [pc, #84]	@ (8000824 <HAL_CAN_MspInit+0xd4>)
 80007d0:	f001 fc4a 	bl	8002068 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2100      	movs	r1, #0
 80007d8:	2013      	movs	r0, #19
 80007da:	f001 fb5c 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80007de:	2013      	movs	r0, #19
 80007e0:	f001 fb75 	bl	8001ece <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2100      	movs	r1, #0
 80007e8:	2014      	movs	r0, #20
 80007ea:	f001 fb54 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80007ee:	2014      	movs	r0, #20
 80007f0:	f001 fb6d 	bl	8001ece <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2100      	movs	r1, #0
 80007f8:	2015      	movs	r0, #21
 80007fa:	f001 fb4c 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80007fe:	2015      	movs	r0, #21
 8000800:	f001 fb65 	bl	8001ece <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2100      	movs	r1, #0
 8000808:	2016      	movs	r0, #22
 800080a:	f001 fb44 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800080e:	2016      	movs	r0, #22
 8000810:	f001 fb5d 	bl	8001ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000814:	bf00      	nop
 8000816:	3720      	adds	r7, #32
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40006400 	.word	0x40006400
 8000820:	40021000 	.word	0x40021000
 8000824:	40010800 	.word	0x40010800

08000828 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 0310 	add.w	r3, r7, #16
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083c:	4b1d      	ldr	r3, [pc, #116]	@ (80008b4 <MX_GPIO_Init+0x8c>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4a1c      	ldr	r2, [pc, #112]	@ (80008b4 <MX_GPIO_Init+0x8c>)
 8000842:	f043 0310 	orr.w	r3, r3, #16
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <MX_GPIO_Init+0x8c>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f003 0310 	and.w	r3, r3, #16
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000854:	4b17      	ldr	r3, [pc, #92]	@ (80008b4 <MX_GPIO_Init+0x8c>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a16      	ldr	r2, [pc, #88]	@ (80008b4 <MX_GPIO_Init+0x8c>)
 800085a:	f043 0320 	orr.w	r3, r3, #32
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <MX_GPIO_Init+0x8c>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f003 0320 	and.w	r3, r3, #32
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086c:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_GPIO_Init+0x8c>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	4a10      	ldr	r2, [pc, #64]	@ (80008b4 <MX_GPIO_Init+0x8c>)
 8000872:	f043 0304 	orr.w	r3, r3, #4
 8000876:	6193      	str	r3, [r2, #24]
 8000878:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <MX_GPIO_Init+0x8c>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f003 0304 	and.w	r3, r3, #4
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_pin_GPIO_Port, Buzzer_pin_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2120      	movs	r1, #32
 8000888:	480b      	ldr	r0, [pc, #44]	@ (80008b8 <MX_GPIO_Init+0x90>)
 800088a:	f001 fd71 	bl	8002370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_pin_Pin;
 800088e:	2320      	movs	r3, #32
 8000890:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2302      	movs	r3, #2
 800089c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Buzzer_pin_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 0310 	add.w	r3, r7, #16
 80008a2:	4619      	mov	r1, r3
 80008a4:	4804      	ldr	r0, [pc, #16]	@ (80008b8 <MX_GPIO_Init+0x90>)
 80008a6:	f001 fbdf 	bl	8002068 <HAL_GPIO_Init>

}
 80008aa:	bf00      	nop
 80008ac:	3720      	adds	r7, #32
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40010800 	.word	0x40010800

080008bc <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80008c0:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <MX_IWDG_Init+0x2c>)
 80008c2:	4a0a      	ldr	r2, [pc, #40]	@ (80008ec <MX_IWDG_Init+0x30>)
 80008c4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80008c6:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <MX_IWDG_Init+0x2c>)
 80008c8:	2203      	movs	r2, #3
 80008ca:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4000;
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <MX_IWDG_Init+0x2c>)
 80008ce:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80008d2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	@ (80008e8 <MX_IWDG_Init+0x2c>)
 80008d6:	f001 fd7c 	bl	80023d2 <HAL_IWDG_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80008e0:	f000 f867 	bl	80009b2 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000174 	.word	0x20000174
 80008ec:	40003000 	.word	0x40003000

080008f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f4:	f000 fb3c 	bl	8000f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f8:	f000 f818 	bl	800092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fc:	f7ff ff94 	bl	8000828 <MX_GPIO_Init>
  MX_CAN_Init();
 8000900:	f7ff fef0 	bl	80006e4 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000904:	f000 fa90 	bl	8000e28 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000908:	f000 f944 	bl	8000b94 <MX_TIM1_Init>
  MX_TIM2_Init();
 800090c:	f000 f994 	bl	8000c38 <MX_TIM2_Init>
  MX_IWDG_Init();
 8000910:	f7ff ffd4 	bl	80008bc <MX_IWDG_Init>
  MX_TIM3_Init();
 8000914:	f000 f9de 	bl	8000cd4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  app_init();
 8000918:	f7ff fe28 	bl	800056c <app_init>
  can_init();
 800091c:	f7ff fe60 	bl	80005e0 <can_init>
  timer_init();
 8000920:	f7ff fea0 	bl	8000664 <timer_init>
  app_handler();
 8000924:	f7ff febc 	bl	80006a0 <app_handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <main+0x38>

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b090      	sub	sp, #64	@ 0x40
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0318 	add.w	r3, r7, #24
 8000936:	2228      	movs	r2, #40	@ 0x28
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f004 f9c8 	bl	8004cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800094e:	230a      	movs	r3, #10
 8000950:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000952:	2301      	movs	r3, #1
 8000954:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000956:	2310      	movs	r3, #16
 8000958:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800095a:	2301      	movs	r3, #1
 800095c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095e:	2302      	movs	r3, #2
 8000960:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000962:	2300      	movs	r3, #0
 8000964:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000966:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800096a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096c:	f107 0318 	add.w	r3, r7, #24
 8000970:	4618      	mov	r0, r3
 8000972:	f001 fd7f 	bl	8002474 <HAL_RCC_OscConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800097c:	f000 f819 	bl	80009b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000980:	230f      	movs	r3, #15
 8000982:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000984:	2302      	movs	r3, #2
 8000986:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800098c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000990:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2102      	movs	r1, #2
 800099a:	4618      	mov	r0, r3
 800099c:	f001 ffec 	bl	8002978 <HAL_RCC_ClockConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80009a6:	f000 f804 	bl	80009b2 <Error_Handler>
  }
}
 80009aa:	bf00      	nop
 80009ac:	3740      	adds	r7, #64	@ 0x40
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b6:	b672      	cpsid	i
}
 80009b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ba:	bf00      	nop
 80009bc:	e7fd      	b.n	80009ba <Error_Handler+0x8>
	...

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009c6:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <HAL_MspInit+0x5c>)
 80009c8:	699b      	ldr	r3, [r3, #24]
 80009ca:	4a14      	ldr	r2, [pc, #80]	@ (8000a1c <HAL_MspInit+0x5c>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6193      	str	r3, [r2, #24]
 80009d2:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <HAL_MspInit+0x5c>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <HAL_MspInit+0x5c>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	4a0e      	ldr	r2, [pc, #56]	@ (8000a1c <HAL_MspInit+0x5c>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e8:	61d3      	str	r3, [r2, #28]
 80009ea:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <HAL_MspInit+0x5c>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <HAL_MspInit+0x60>)
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	4a04      	ldr	r2, [pc, #16]	@ (8000a20 <HAL_MspInit+0x60>)
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a12:	bf00      	nop
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40010000 	.word	0x40010000

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <NMI_Handler+0x4>

08000a2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr

08000a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr

08000a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a74:	f000 fac2 	bl	8000ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000a80:	4802      	ldr	r0, [pc, #8]	@ (8000a8c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000a82:	f000 ff28 	bl	80018d6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2000014c 	.word	0x2000014c

08000a90 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000a94:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a96:	f000 ff1e 	bl	80018d6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000014c 	.word	0x2000014c

08000aa4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000aa8:	4802      	ldr	r0, [pc, #8]	@ (8000ab4 <CAN1_RX1_IRQHandler+0x10>)
 8000aaa:	f000 ff14 	bl	80018d6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	2000014c 	.word	0x2000014c

08000ab8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000abc:	4802      	ldr	r0, [pc, #8]	@ (8000ac8 <CAN1_SCE_IRQHandler+0x10>)
 8000abe:	f000 ff0a 	bl	80018d6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2000014c 	.word	0x2000014c

08000acc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ad0:	4802      	ldr	r0, [pc, #8]	@ (8000adc <TIM1_UP_IRQHandler+0x10>)
 8000ad2:	f002 f9af 	bl	8002e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000184 	.word	0x20000184

08000ae0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ae4:	4802      	ldr	r0, [pc, #8]	@ (8000af0 <TIM2_IRQHandler+0x10>)
 8000ae6:	f002 f9a5 	bl	8002e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200001cc 	.word	0x200001cc

08000af4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000af8:	4802      	ldr	r0, [pc, #8]	@ (8000b04 <TIM3_IRQHandler+0x10>)
 8000afa:	f002 f99b 	bl	8002e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000214 	.word	0x20000214

08000b08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b0c:	4802      	ldr	r0, [pc, #8]	@ (8000b18 <USART1_IRQHandler+0x10>)
 8000b0e:	f002 fde5 	bl	80036dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	2000025c 	.word	0x2000025c

08000b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b24:	4a14      	ldr	r2, [pc, #80]	@ (8000b78 <_sbrk+0x5c>)
 8000b26:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <_sbrk+0x60>)
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b30:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d102      	bne.n	8000b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b38:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <_sbrk+0x64>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	@ (8000b84 <_sbrk+0x68>)
 8000b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3e:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <_sbrk+0x64>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d207      	bcs.n	8000b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b4c:	f004 f8d8 	bl	8004d00 <__errno>
 8000b50:	4603      	mov	r3, r0
 8000b52:	220c      	movs	r2, #12
 8000b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5a:	e009      	b.n	8000b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b5c:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <_sbrk+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b62:	4b07      	ldr	r3, [pc, #28]	@ (8000b80 <_sbrk+0x64>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	4a05      	ldr	r2, [pc, #20]	@ (8000b80 <_sbrk+0x64>)
 8000b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20005000 	.word	0x20005000
 8000b7c:	00000400 	.word	0x00000400
 8000b80:	20000180 	.word	0x20000180
 8000b84:	20000590 	.word	0x20000590

08000b88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9a:	f107 0308 	add.w	r3, r7, #8
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba8:	463b      	mov	r3, r7
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c30 <MX_TIM1_Init+0x9c>)
 8000bb2:	4a20      	ldr	r2, [pc, #128]	@ (8000c34 <MX_TIM1_Init+0xa0>)
 8000bb4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400;
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c30 <MX_TIM1_Init+0x9c>)
 8000bb8:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 8000bbc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000c30 <MX_TIM1_Init+0x9c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c30 <MX_TIM1_Init+0x9c>)
 8000bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000bca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bcc:	4b18      	ldr	r3, [pc, #96]	@ (8000c30 <MX_TIM1_Init+0x9c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bd2:	4b17      	ldr	r3, [pc, #92]	@ (8000c30 <MX_TIM1_Init+0x9c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd8:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <MX_TIM1_Init+0x9c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bde:	4814      	ldr	r0, [pc, #80]	@ (8000c30 <MX_TIM1_Init+0x9c>)
 8000be0:	f002 f858 	bl	8002c94 <HAL_TIM_Base_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000bea:	f7ff fee2 	bl	80009b2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bf2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bf4:	f107 0308 	add.w	r3, r7, #8
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480d      	ldr	r0, [pc, #52]	@ (8000c30 <MX_TIM1_Init+0x9c>)
 8000bfc:	f002 fa22 	bl	8003044 <HAL_TIM_ConfigClockSource>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000c06:	f7ff fed4 	bl	80009b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c12:	463b      	mov	r3, r7
 8000c14:	4619      	mov	r1, r3
 8000c16:	4806      	ldr	r0, [pc, #24]	@ (8000c30 <MX_TIM1_Init+0x9c>)
 8000c18:	f002 fbf8 	bl	800340c <HAL_TIMEx_MasterConfigSynchronization>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000c22:	f7ff fec6 	bl	80009b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000184 	.word	0x20000184
 8000c34:	40012c00 	.word	0x40012c00

08000c38 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3e:	f107 0308 	add.w	r3, r7, #8
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c54:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd0 <MX_TIM2_Init+0x98>)
 8000c56:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64000;
 8000c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd0 <MX_TIM2_Init+0x98>)
 8000c5e:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 8000c62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c64:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <MX_TIM2_Init+0x98>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8000c6a:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <MX_TIM2_Init+0x98>)
 8000c6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c72:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <MX_TIM2_Init+0x98>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c78:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <MX_TIM2_Init+0x98>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c7e:	4814      	ldr	r0, [pc, #80]	@ (8000cd0 <MX_TIM2_Init+0x98>)
 8000c80:	f002 f808 	bl	8002c94 <HAL_TIM_Base_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c8a:	f7ff fe92 	bl	80009b2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480d      	ldr	r0, [pc, #52]	@ (8000cd0 <MX_TIM2_Init+0x98>)
 8000c9c:	f002 f9d2 	bl	8003044 <HAL_TIM_ConfigClockSource>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ca6:	f7ff fe84 	bl	80009b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000caa:	2300      	movs	r3, #0
 8000cac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4806      	ldr	r0, [pc, #24]	@ (8000cd0 <MX_TIM2_Init+0x98>)
 8000cb8:	f002 fba8 	bl	800340c <HAL_TIMEx_MasterConfigSynchronization>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000cc2:	f7ff fe76 	bl	80009b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200001cc 	.word	0x200001cc

08000cd4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce8:	463b      	mov	r3, r7
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d68 <MX_TIM3_Init+0x94>)
 8000cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d6c <MX_TIM3_Init+0x98>)
 8000cf4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d68 <MX_TIM3_Init+0x94>)
 8000cf8:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 8000cfc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000d68 <MX_TIM3_Init+0x94>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8000d04:	4b18      	ldr	r3, [pc, #96]	@ (8000d68 <MX_TIM3_Init+0x94>)
 8000d06:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000d0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0c:	4b16      	ldr	r3, [pc, #88]	@ (8000d68 <MX_TIM3_Init+0x94>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d12:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <MX_TIM3_Init+0x94>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d18:	4813      	ldr	r0, [pc, #76]	@ (8000d68 <MX_TIM3_Init+0x94>)
 8000d1a:	f001 ffbb 	bl	8002c94 <HAL_TIM_Base_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000d24:	f7ff fe45 	bl	80009b2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d2e:	f107 0308 	add.w	r3, r7, #8
 8000d32:	4619      	mov	r1, r3
 8000d34:	480c      	ldr	r0, [pc, #48]	@ (8000d68 <MX_TIM3_Init+0x94>)
 8000d36:	f002 f985 	bl	8003044 <HAL_TIM_ConfigClockSource>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000d40:	f7ff fe37 	bl	80009b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d44:	2300      	movs	r3, #0
 8000d46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <MX_TIM3_Init+0x94>)
 8000d52:	f002 fb5b 	bl	800340c <HAL_TIMEx_MasterConfigSynchronization>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000d5c:	f7ff fe29 	bl	80009b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000214 	.word	0x20000214
 8000d6c:	40000400 	.word	0x40000400

08000d70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a27      	ldr	r2, [pc, #156]	@ (8000e1c <HAL_TIM_Base_MspInit+0xac>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d114      	bne.n	8000dac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d82:	4b27      	ldr	r3, [pc, #156]	@ (8000e20 <HAL_TIM_Base_MspInit+0xb0>)
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	4a26      	ldr	r2, [pc, #152]	@ (8000e20 <HAL_TIM_Base_MspInit+0xb0>)
 8000d88:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d8c:	6193      	str	r3, [r2, #24]
 8000d8e:	4b24      	ldr	r3, [pc, #144]	@ (8000e20 <HAL_TIM_Base_MspInit+0xb0>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	2019      	movs	r0, #25
 8000da0:	f001 f879 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000da4:	2019      	movs	r0, #25
 8000da6:	f001 f892 	bl	8001ece <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000daa:	e032      	b.n	8000e12 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM2)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000db4:	d114      	bne.n	8000de0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000db6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <HAL_TIM_Base_MspInit+0xb0>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	4a19      	ldr	r2, [pc, #100]	@ (8000e20 <HAL_TIM_Base_MspInit+0xb0>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	61d3      	str	r3, [r2, #28]
 8000dc2:	4b17      	ldr	r3, [pc, #92]	@ (8000e20 <HAL_TIM_Base_MspInit+0xb0>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	201c      	movs	r0, #28
 8000dd4:	f001 f85f 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dd8:	201c      	movs	r0, #28
 8000dda:	f001 f878 	bl	8001ece <HAL_NVIC_EnableIRQ>
}
 8000dde:	e018      	b.n	8000e12 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0f      	ldr	r2, [pc, #60]	@ (8000e24 <HAL_TIM_Base_MspInit+0xb4>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d113      	bne.n	8000e12 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dea:	4b0d      	ldr	r3, [pc, #52]	@ (8000e20 <HAL_TIM_Base_MspInit+0xb0>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	4a0c      	ldr	r2, [pc, #48]	@ (8000e20 <HAL_TIM_Base_MspInit+0xb0>)
 8000df0:	f043 0302 	orr.w	r3, r3, #2
 8000df4:	61d3      	str	r3, [r2, #28]
 8000df6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e20 <HAL_TIM_Base_MspInit+0xb0>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	201d      	movs	r0, #29
 8000e08:	f001 f845 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e0c:	201d      	movs	r0, #29
 8000e0e:	f001 f85e 	bl	8001ece <HAL_NVIC_EnableIRQ>
}
 8000e12:	bf00      	nop
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40012c00 	.word	0x40012c00
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40000400 	.word	0x40000400

08000e28 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	@ (8000e78 <MX_USART1_UART_Init+0x50>)
 8000e30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e32:	4b10      	ldr	r3, [pc, #64]	@ (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e34:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000e38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e40:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	@ (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e4c:	4b09      	ldr	r3, [pc, #36]	@ (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e4e:	220c      	movs	r2, #12
 8000e50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e52:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e58:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e5e:	4805      	ldr	r0, [pc, #20]	@ (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e60:	f002 fb44 	bl	80034ec <HAL_UART_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e6a:	f7ff fda2 	bl	80009b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000025c 	.word	0x2000025c
 8000e78:	40013800 	.word	0x40013800

08000e7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0310 	add.w	r3, r7, #16
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a20      	ldr	r2, [pc, #128]	@ (8000f18 <HAL_UART_MspInit+0x9c>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d139      	bne.n	8000f10 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f1c <HAL_UART_MspInit+0xa0>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	4a1e      	ldr	r2, [pc, #120]	@ (8000f1c <HAL_UART_MspInit+0xa0>)
 8000ea2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ea6:	6193      	str	r3, [r2, #24]
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f1c <HAL_UART_MspInit+0xa0>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	4b19      	ldr	r3, [pc, #100]	@ (8000f1c <HAL_UART_MspInit+0xa0>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a18      	ldr	r2, [pc, #96]	@ (8000f1c <HAL_UART_MspInit+0xa0>)
 8000eba:	f043 0304 	orr.w	r3, r3, #4
 8000ebe:	6193      	str	r3, [r2, #24]
 8000ec0:	4b16      	ldr	r3, [pc, #88]	@ (8000f1c <HAL_UART_MspInit+0xa0>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ecc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ed0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 0310 	add.w	r3, r7, #16
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480f      	ldr	r0, [pc, #60]	@ (8000f20 <HAL_UART_MspInit+0xa4>)
 8000ee2:	f001 f8c1 	bl	8002068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ee6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000eea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4809      	ldr	r0, [pc, #36]	@ (8000f20 <HAL_UART_MspInit+0xa4>)
 8000efc:	f001 f8b4 	bl	8002068 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2100      	movs	r1, #0
 8000f04:	2025      	movs	r0, #37	@ 0x25
 8000f06:	f000 ffc6 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f0a:	2025      	movs	r0, #37	@ 0x25
 8000f0c:	f000 ffdf 	bl	8001ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f10:	bf00      	nop
 8000f12:	3720      	adds	r7, #32
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40013800 	.word	0x40013800
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40010800 	.word	0x40010800

08000f24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f24:	f7ff fe30 	bl	8000b88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f28:	480b      	ldr	r0, [pc, #44]	@ (8000f58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f2a:	490c      	ldr	r1, [pc, #48]	@ (8000f5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f2c:	4a0c      	ldr	r2, [pc, #48]	@ (8000f60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a09      	ldr	r2, [pc, #36]	@ (8000f64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f40:	4c09      	ldr	r4, [pc, #36]	@ (8000f68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f003 fedd 	bl	8004d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f52:	f7ff fccd 	bl	80008f0 <main>
  bx lr
 8000f56:	4770      	bx	lr
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f60:	0800566c 	.word	0x0800566c
  ldr r2, =_sbss
 8000f64:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f68:	20000590 	.word	0x20000590

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>
	...

08000f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f74:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <HAL_Init+0x28>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a07      	ldr	r2, [pc, #28]	@ (8000f98 <HAL_Init+0x28>)
 8000f7a:	f043 0310 	orr.w	r3, r3, #16
 8000f7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f80:	2003      	movs	r0, #3
 8000f82:	f000 ff7d 	bl	8001e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f86:	200f      	movs	r0, #15
 8000f88:	f000 f808 	bl	8000f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f8c:	f7ff fd18 	bl	80009c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40022000 	.word	0x40022000

08000f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa4:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <HAL_InitTick+0x54>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b12      	ldr	r3, [pc, #72]	@ (8000ff4 <HAL_InitTick+0x58>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 ff95 	bl	8001eea <HAL_SYSTICK_Config>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00e      	b.n	8000fe8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b0f      	cmp	r3, #15
 8000fce:	d80a      	bhi.n	8000fe6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd8:	f000 ff5d 	bl	8001e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fdc:	4a06      	ldr	r2, [pc, #24]	@ (8000ff8 <HAL_InitTick+0x5c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e000      	b.n	8000fe8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	20000004 	.word	0x20000004

08000ffc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001000:	4b05      	ldr	r3, [pc, #20]	@ (8001018 <HAL_IncTick+0x1c>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b05      	ldr	r3, [pc, #20]	@ (800101c <HAL_IncTick+0x20>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	4a03      	ldr	r2, [pc, #12]	@ (800101c <HAL_IncTick+0x20>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	20000008 	.word	0x20000008
 800101c:	200002a4 	.word	0x200002a4

08001020 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b02      	ldr	r3, [pc, #8]	@ (8001030 <HAL_GetTick+0x10>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	200002a4 	.word	0x200002a4

08001034 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e0ed      	b.n	8001222 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 3020 	ldrb.w	r3, [r3, #32]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d102      	bne.n	8001058 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff fb7c 	bl	8000750 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f042 0201 	orr.w	r2, r2, #1
 8001066:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001068:	f7ff ffda 	bl	8001020 <HAL_GetTick>
 800106c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800106e:	e012      	b.n	8001096 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001070:	f7ff ffd6 	bl	8001020 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b0a      	cmp	r3, #10
 800107c:	d90b      	bls.n	8001096 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001082:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2205      	movs	r2, #5
 800108e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e0c5      	b.n	8001222 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d0e5      	beq.n	8001070 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f022 0202 	bic.w	r2, r2, #2
 80010b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010b4:	f7ff ffb4 	bl	8001020 <HAL_GetTick>
 80010b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010ba:	e012      	b.n	80010e2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010bc:	f7ff ffb0 	bl	8001020 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b0a      	cmp	r3, #10
 80010c8:	d90b      	bls.n	80010e2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2205      	movs	r2, #5
 80010da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e09f      	b.n	8001222 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1e5      	bne.n	80010bc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	7e1b      	ldrb	r3, [r3, #24]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d108      	bne.n	800110a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	e007      	b.n	800111a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001118:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	7e5b      	ldrb	r3, [r3, #25]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d108      	bne.n	8001134 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	e007      	b.n	8001144 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001142:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	7e9b      	ldrb	r3, [r3, #26]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d108      	bne.n	800115e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0220 	orr.w	r2, r2, #32
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	e007      	b.n	800116e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 0220 	bic.w	r2, r2, #32
 800116c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7edb      	ldrb	r3, [r3, #27]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d108      	bne.n	8001188 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 0210 	bic.w	r2, r2, #16
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	e007      	b.n	8001198 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 0210 	orr.w	r2, r2, #16
 8001196:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	7f1b      	ldrb	r3, [r3, #28]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d108      	bne.n	80011b2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f042 0208 	orr.w	r2, r2, #8
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	e007      	b.n	80011c2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 0208 	bic.w	r2, r2, #8
 80011c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	7f5b      	ldrb	r3, [r3, #29]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d108      	bne.n	80011dc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f042 0204 	orr.w	r2, r2, #4
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	e007      	b.n	80011ec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0204 	bic.w	r2, r2, #4
 80011ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	431a      	orrs	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	ea42 0103 	orr.w	r1, r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	1e5a      	subs	r2, r3, #1
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	430a      	orrs	r2, r1
 8001210:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800122a:	b480      	push	{r7}
 800122c:	b087      	sub	sp, #28
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001240:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001242:	7cfb      	ldrb	r3, [r7, #19]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d003      	beq.n	8001250 <HAL_CAN_ConfigFilter+0x26>
 8001248:	7cfb      	ldrb	r3, [r7, #19]
 800124a:	2b02      	cmp	r3, #2
 800124c:	f040 80aa 	bne.w	80013a4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001256:	f043 0201 	orr.w	r2, r3, #1
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	f003 031f 	and.w	r3, r3, #31
 8001268:	2201      	movs	r2, #1
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	43db      	mvns	r3, r3
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d123      	bne.n	80012d2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	43db      	mvns	r3, r3
 8001294:	401a      	ands	r2, r3
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012ac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3248      	adds	r2, #72	@ 0x48
 80012b2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012c8:	6979      	ldr	r1, [r7, #20]
 80012ca:	3348      	adds	r3, #72	@ 0x48
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	440b      	add	r3, r1
 80012d0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d122      	bne.n	8001320 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	431a      	orrs	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012fa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	3248      	adds	r2, #72	@ 0x48
 8001300:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001314:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001316:	6979      	ldr	r1, [r7, #20]
 8001318:	3348      	adds	r3, #72	@ 0x48
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	440b      	add	r3, r1
 800131e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d109      	bne.n	800133c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	43db      	mvns	r3, r3
 8001332:	401a      	ands	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800133a:	e007      	b.n	800134c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	431a      	orrs	r2, r3
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d109      	bne.n	8001368 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	43db      	mvns	r3, r3
 800135e:	401a      	ands	r2, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001366:	e007      	b.n	8001378 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	431a      	orrs	r2, r3
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d107      	bne.n	8001390 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	431a      	orrs	r2, r3
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001396:	f023 0201 	bic.w	r2, r3, #1
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	e006      	b.n	80013b2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
  }
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	371c      	adds	r7, #28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d12e      	bne.n	800142e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2202      	movs	r2, #2
 80013d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0201 	bic.w	r2, r2, #1
 80013e6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013e8:	f7ff fe1a 	bl	8001020 <HAL_GetTick>
 80013ec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013ee:	e012      	b.n	8001416 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013f0:	f7ff fe16 	bl	8001020 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b0a      	cmp	r3, #10
 80013fc:	d90b      	bls.n	8001416 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001402:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2205      	movs	r2, #5
 800140e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e012      	b.n	800143c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1e5      	bne.n	80013f0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	e006      	b.n	800143c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001432:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
  }
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	@ 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
 8001450:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001458:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001462:	7ffb      	ldrb	r3, [r7, #31]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d003      	beq.n	8001470 <HAL_CAN_AddTxMessage+0x2c>
 8001468:	7ffb      	ldrb	r3, [r7, #31]
 800146a:	2b02      	cmp	r3, #2
 800146c:	f040 80ad 	bne.w	80015ca <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10a      	bne.n	8001490 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001480:	2b00      	cmp	r3, #0
 8001482:	d105      	bne.n	8001490 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 8095 	beq.w	80015ba <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	0e1b      	lsrs	r3, r3, #24
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800149a:	2201      	movs	r2, #1
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	409a      	lsls	r2, r3
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10d      	bne.n	80014c8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014b6:	68f9      	ldr	r1, [r7, #12]
 80014b8:	6809      	ldr	r1, [r1, #0]
 80014ba:	431a      	orrs	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3318      	adds	r3, #24
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	440b      	add	r3, r1
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	e00f      	b.n	80014e8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014d2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014d8:	68f9      	ldr	r1, [r7, #12]
 80014da:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80014dc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	3318      	adds	r3, #24
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	440b      	add	r3, r1
 80014e6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6819      	ldr	r1, [r3, #0]
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	691a      	ldr	r2, [r3, #16]
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	3318      	adds	r3, #24
 80014f4:	011b      	lsls	r3, r3, #4
 80014f6:	440b      	add	r3, r1
 80014f8:	3304      	adds	r3, #4
 80014fa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	7d1b      	ldrb	r3, [r3, #20]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d111      	bne.n	8001528 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	3318      	adds	r3, #24
 800150c:	011b      	lsls	r3, r3, #4
 800150e:	4413      	add	r3, r2
 8001510:	3304      	adds	r3, #4
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	6811      	ldr	r1, [r2, #0]
 8001518:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	3318      	adds	r3, #24
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	440b      	add	r3, r1
 8001524:	3304      	adds	r3, #4
 8001526:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3307      	adds	r3, #7
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	061a      	lsls	r2, r3, #24
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3306      	adds	r3, #6
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	041b      	lsls	r3, r3, #16
 8001538:	431a      	orrs	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3305      	adds	r3, #5
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	021b      	lsls	r3, r3, #8
 8001542:	4313      	orrs	r3, r2
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	3204      	adds	r2, #4
 8001548:	7812      	ldrb	r2, [r2, #0]
 800154a:	4610      	mov	r0, r2
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	6811      	ldr	r1, [r2, #0]
 8001550:	ea43 0200 	orr.w	r2, r3, r0
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	440b      	add	r3, r1
 800155a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800155e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3303      	adds	r3, #3
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	061a      	lsls	r2, r3, #24
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3302      	adds	r3, #2
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	041b      	lsls	r3, r3, #16
 8001570:	431a      	orrs	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3301      	adds	r3, #1
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	4313      	orrs	r3, r2
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	7812      	ldrb	r2, [r2, #0]
 8001580:	4610      	mov	r0, r2
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	6811      	ldr	r1, [r2, #0]
 8001586:	ea43 0200 	orr.w	r2, r3, r0
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	011b      	lsls	r3, r3, #4
 800158e:	440b      	add	r3, r1
 8001590:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001594:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3318      	adds	r3, #24
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	4413      	add	r3, r2
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	6811      	ldr	r1, [r2, #0]
 80015a8:	f043 0201 	orr.w	r2, r3, #1
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	3318      	adds	r3, #24
 80015b0:	011b      	lsls	r3, r3, #4
 80015b2:	440b      	add	r3, r1
 80015b4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e00e      	b.n	80015d8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015be:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e006      	b.n	80015d8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
  }
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3724      	adds	r7, #36	@ 0x24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr

080015e2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b085      	sub	sp, #20
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015f4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80015f6:	7afb      	ldrb	r3, [r7, #11]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d002      	beq.n	8001602 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80015fc:	7afb      	ldrb	r3, [r7, #11]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d11d      	bne.n	800163e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d002      	beq.n	8001616 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	3301      	adds	r3, #1
 8001614:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d002      	beq.n	800162a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	3301      	adds	r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d002      	beq.n	800163e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	3301      	adds	r3, #1
 800163c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800163e:	68fb      	ldr	r3, [r7, #12]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr

0800164a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800164a:	b480      	push	{r7}
 800164c:	b087      	sub	sp, #28
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800165e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001660:	7dfb      	ldrb	r3, [r7, #23]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d003      	beq.n	800166e <HAL_CAN_GetRxMessage+0x24>
 8001666:	7dfb      	ldrb	r3, [r7, #23]
 8001668:	2b02      	cmp	r3, #2
 800166a:	f040 8103 	bne.w	8001874 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10e      	bne.n	8001692 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d116      	bne.n	80016b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001686:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e0f7      	b.n	8001882 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d107      	bne.n	80016b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e0e8      	b.n	8001882 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	331b      	adds	r3, #27
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	4413      	add	r3, r2
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0204 	and.w	r2, r3, #4
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10c      	bne.n	80016e8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	331b      	adds	r3, #27
 80016d6:	011b      	lsls	r3, r3, #4
 80016d8:	4413      	add	r3, r2
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	0d5b      	lsrs	r3, r3, #21
 80016de:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	e00b      	b.n	8001700 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	331b      	adds	r3, #27
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	4413      	add	r3, r2
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	08db      	lsrs	r3, r3, #3
 80016f8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	331b      	adds	r3, #27
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	4413      	add	r3, r2
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0202 	and.w	r2, r3, #2
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	331b      	adds	r3, #27
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	4413      	add	r3, r2
 8001722:	3304      	adds	r3, #4
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2208      	movs	r2, #8
 8001732:	611a      	str	r2, [r3, #16]
 8001734:	e00b      	b.n	800174e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	331b      	adds	r3, #27
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	4413      	add	r3, r2
 8001742:	3304      	adds	r3, #4
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 020f 	and.w	r2, r3, #15
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	331b      	adds	r3, #27
 8001756:	011b      	lsls	r3, r3, #4
 8001758:	4413      	add	r3, r2
 800175a:	3304      	adds	r3, #4
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	0a1b      	lsrs	r3, r3, #8
 8001760:	b2da      	uxtb	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	331b      	adds	r3, #27
 800176e:	011b      	lsls	r3, r3, #4
 8001770:	4413      	add	r3, r2
 8001772:	3304      	adds	r3, #4
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	0c1b      	lsrs	r3, r3, #16
 8001778:	b29a      	uxth	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	011b      	lsls	r3, r3, #4
 8001786:	4413      	add	r3, r2
 8001788:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	b2da      	uxtb	r2, r3
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	4413      	add	r3, r2
 800179e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	0a1a      	lsrs	r2, r3, #8
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	3301      	adds	r3, #1
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	011b      	lsls	r3, r3, #4
 80017b6:	4413      	add	r3, r2
 80017b8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	0c1a      	lsrs	r2, r3, #16
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	3302      	adds	r3, #2
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	4413      	add	r3, r2
 80017d2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	0e1a      	lsrs	r2, r3, #24
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	3303      	adds	r3, #3
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	011b      	lsls	r3, r3, #4
 80017ea:	4413      	add	r3, r2
 80017ec:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	3304      	adds	r3, #4
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	4413      	add	r3, r2
 8001804:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	0a1a      	lsrs	r2, r3, #8
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	3305      	adds	r3, #5
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	011b      	lsls	r3, r3, #4
 800181c:	4413      	add	r3, r2
 800181e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	0c1a      	lsrs	r2, r3, #16
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	3306      	adds	r3, #6
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	011b      	lsls	r3, r3, #4
 8001836:	4413      	add	r3, r2
 8001838:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	0e1a      	lsrs	r2, r3, #24
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	3307      	adds	r3, #7
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d108      	bne.n	8001860 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f042 0220 	orr.w	r2, r2, #32
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	e007      	b.n	8001870 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	691a      	ldr	r2, [r3, #16]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f042 0220 	orr.w	r2, r2, #32
 800186e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	e006      	b.n	8001882 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001878:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
  }
}
 8001882:	4618      	mov	r0, r3
 8001884:	371c      	adds	r7, #28
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 3020 	ldrb.w	r3, [r3, #32]
 800189c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d002      	beq.n	80018aa <HAL_CAN_ActivateNotification+0x1e>
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d109      	bne.n	80018be <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6959      	ldr	r1, [r3, #20]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e006      	b.n	80018cc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
  }
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr

080018d6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b08a      	sub	sp, #40	@ 0x28
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	d07c      	beq.n	8001a16 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d023      	beq.n	800196e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2201      	movs	r2, #1
 800192c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7fe fdbf 	bl	80004bc <HAL_CAN_TxMailbox0CompleteCallback>
 800193e:	e016      	b.n	800196e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	2b00      	cmp	r3, #0
 8001948:	d004      	beq.n	8001954 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800194a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001950:	627b      	str	r3, [r7, #36]	@ 0x24
 8001952:	e00c      	b.n	800196e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b00      	cmp	r3, #0
 800195c:	d004      	beq.n	8001968 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001960:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001964:	627b      	str	r3, [r7, #36]	@ 0x24
 8001966:	e002      	b.n	800196e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f96b 	bl	8001c44 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001974:	2b00      	cmp	r3, #0
 8001976:	d024      	beq.n	80019c2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001980:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7fe fda7 	bl	80004e0 <HAL_CAN_TxMailbox1CompleteCallback>
 8001992:	e016      	b.n	80019c2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800199a:	2b00      	cmp	r3, #0
 800199c:	d004      	beq.n	80019a8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800199e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80019a6:	e00c      	b.n	80019c2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d004      	beq.n	80019bc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80019b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80019ba:	e002      	b.n	80019c2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f94a 	bl	8001c56 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d024      	beq.n	8001a16 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80019d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7fe fd8f 	bl	8000504 <HAL_CAN_TxMailbox2CompleteCallback>
 80019e6:	e016      	b.n	8001a16 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d004      	beq.n	80019fc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80019f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80019fa:	e00c      	b.n	8001a16 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d004      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a0e:	e002      	b.n	8001a16 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 f929 	bl	8001c68 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a16:	6a3b      	ldr	r3, [r7, #32]
 8001a18:	f003 0308 	and.w	r3, r3, #8
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00c      	beq.n	8001a3a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f003 0310 	and.w	r3, r3, #16
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d007      	beq.n	8001a3a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2210      	movs	r2, #16
 8001a38:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00b      	beq.n	8001a5c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d006      	beq.n	8001a5c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2208      	movs	r2, #8
 8001a54:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f90f 	bl	8001c7a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d009      	beq.n	8001a7a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d002      	beq.n	8001a7a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7fe fd57 	bl	8000528 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00c      	beq.n	8001a9e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	f003 0310 	and.w	r3, r3, #16
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a94:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2210      	movs	r2, #16
 8001a9c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	f003 0320 	and.w	r3, r3, #32
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00b      	beq.n	8001ac0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d006      	beq.n	8001ac0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2208      	movs	r2, #8
 8001ab8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f8ef 	bl	8001c9e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	f003 0310 	and.w	r3, r3, #16
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d009      	beq.n	8001ade <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d002      	beq.n	8001ade <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 f8d7 	bl	8001c8c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00b      	beq.n	8001b00 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f003 0310 	and.w	r3, r3, #16
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d006      	beq.n	8001b00 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2210      	movs	r2, #16
 8001af8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f8d8 	bl	8001cb0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b00:	6a3b      	ldr	r3, [r7, #32]
 8001b02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00b      	beq.n	8001b22 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d006      	beq.n	8001b22 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2208      	movs	r2, #8
 8001b1a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f8d0 	bl	8001cc2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d07b      	beq.n	8001c24 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d072      	beq.n	8001c1c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d008      	beq.n	8001b52 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b52:	6a3b      	ldr	r3, [r7, #32]
 8001b54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d008      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b68:	f043 0302 	orr.w	r3, r3, #2
 8001b6c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d008      	beq.n	8001b8a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b84:	f043 0304 	orr.w	r3, r3, #4
 8001b88:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d043      	beq.n	8001c1c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d03e      	beq.n	8001c1c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ba4:	2b60      	cmp	r3, #96	@ 0x60
 8001ba6:	d02b      	beq.n	8001c00 <HAL_CAN_IRQHandler+0x32a>
 8001ba8:	2b60      	cmp	r3, #96	@ 0x60
 8001baa:	d82e      	bhi.n	8001c0a <HAL_CAN_IRQHandler+0x334>
 8001bac:	2b50      	cmp	r3, #80	@ 0x50
 8001bae:	d022      	beq.n	8001bf6 <HAL_CAN_IRQHandler+0x320>
 8001bb0:	2b50      	cmp	r3, #80	@ 0x50
 8001bb2:	d82a      	bhi.n	8001c0a <HAL_CAN_IRQHandler+0x334>
 8001bb4:	2b40      	cmp	r3, #64	@ 0x40
 8001bb6:	d019      	beq.n	8001bec <HAL_CAN_IRQHandler+0x316>
 8001bb8:	2b40      	cmp	r3, #64	@ 0x40
 8001bba:	d826      	bhi.n	8001c0a <HAL_CAN_IRQHandler+0x334>
 8001bbc:	2b30      	cmp	r3, #48	@ 0x30
 8001bbe:	d010      	beq.n	8001be2 <HAL_CAN_IRQHandler+0x30c>
 8001bc0:	2b30      	cmp	r3, #48	@ 0x30
 8001bc2:	d822      	bhi.n	8001c0a <HAL_CAN_IRQHandler+0x334>
 8001bc4:	2b10      	cmp	r3, #16
 8001bc6:	d002      	beq.n	8001bce <HAL_CAN_IRQHandler+0x2f8>
 8001bc8:	2b20      	cmp	r3, #32
 8001bca:	d005      	beq.n	8001bd8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001bcc:	e01d      	b.n	8001c0a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd0:	f043 0308 	orr.w	r3, r3, #8
 8001bd4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bd6:	e019      	b.n	8001c0c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bda:	f043 0310 	orr.w	r3, r3, #16
 8001bde:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001be0:	e014      	b.n	8001c0c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be4:	f043 0320 	orr.w	r3, r3, #32
 8001be8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bea:	e00f      	b.n	8001c0c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bf2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bf4:	e00a      	b.n	8001c0c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bfe:	e005      	b.n	8001c0c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c06:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c08:	e000      	b.n	8001c0c <HAL_CAN_IRQHandler+0x336>
            break;
 8001c0a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699a      	ldr	r2, [r3, #24]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001c1a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2204      	movs	r2, #4
 8001c22:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d008      	beq.n	8001c3c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f84c 	bl	8001cd4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	3728      	adds	r7, #40	@ 0x28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr

08001c56 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr

08001c9e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
	...

08001ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <__NVIC_SetPriorityGrouping+0x44>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d04:	4013      	ands	r3, r2
 8001d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1a:	4a04      	ldr	r2, [pc, #16]	@ (8001d2c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	60d3      	str	r3, [r2, #12]
}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d34:	4b04      	ldr	r3, [pc, #16]	@ (8001d48 <__NVIC_GetPriorityGrouping+0x18>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	0a1b      	lsrs	r3, r3, #8
 8001d3a:	f003 0307 	and.w	r3, r3, #7
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	db0b      	blt.n	8001d76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	f003 021f 	and.w	r2, r3, #31
 8001d64:	4906      	ldr	r1, [pc, #24]	@ (8001d80 <__NVIC_EnableIRQ+0x34>)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr
 8001d80:	e000e100 	.word	0xe000e100

08001d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	db0a      	blt.n	8001dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	490c      	ldr	r1, [pc, #48]	@ (8001dd0 <__NVIC_SetPriority+0x4c>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	0112      	lsls	r2, r2, #4
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	440b      	add	r3, r1
 8001da8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dac:	e00a      	b.n	8001dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4908      	ldr	r1, [pc, #32]	@ (8001dd4 <__NVIC_SetPriority+0x50>)
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	3b04      	subs	r3, #4
 8001dbc:	0112      	lsls	r2, r2, #4
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	761a      	strb	r2, [r3, #24]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000e100 	.word	0xe000e100
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	@ 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f1c3 0307 	rsb	r3, r3, #7
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	bf28      	it	cs
 8001df6:	2304      	movcs	r3, #4
 8001df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	2b06      	cmp	r3, #6
 8001e00:	d902      	bls.n	8001e08 <NVIC_EncodePriority+0x30>
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3b03      	subs	r3, #3
 8001e06:	e000      	b.n	8001e0a <NVIC_EncodePriority+0x32>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	43d9      	mvns	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	4313      	orrs	r3, r2
         );
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3724      	adds	r7, #36	@ 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e4c:	d301      	bcc.n	8001e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00f      	b.n	8001e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e52:	4a0a      	ldr	r2, [pc, #40]	@ (8001e7c <SysTick_Config+0x40>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5a:	210f      	movs	r1, #15
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e60:	f7ff ff90 	bl	8001d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e64:	4b05      	ldr	r3, [pc, #20]	@ (8001e7c <SysTick_Config+0x40>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6a:	4b04      	ldr	r3, [pc, #16]	@ (8001e7c <SysTick_Config+0x40>)
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	e000e010 	.word	0xe000e010

08001e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ff2d 	bl	8001ce8 <__NVIC_SetPriorityGrouping>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea8:	f7ff ff42 	bl	8001d30 <__NVIC_GetPriorityGrouping>
 8001eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	6978      	ldr	r0, [r7, #20]
 8001eb4:	f7ff ff90 	bl	8001dd8 <NVIC_EncodePriority>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff5f 	bl	8001d84 <__NVIC_SetPriority>
}
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff35 	bl	8001d4c <__NVIC_EnableIRQ>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ffa2 	bl	8001e3c <SysTick_Config>
 8001ef8:	4603      	mov	r3, r0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b085      	sub	sp, #20
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d008      	beq.n	8001f2c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2204      	movs	r2, #4
 8001f1e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e020      	b.n	8001f6e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 020e 	bic.w	r2, r2, #14
 8001f3a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0201 	bic.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f54:	2101      	movs	r1, #1
 8001f56:	fa01 f202 	lsl.w	r2, r1, r2
 8001f5a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d005      	beq.n	8001f9c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2204      	movs	r2, #4
 8001f94:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	73fb      	strb	r3, [r7, #15]
 8001f9a:	e051      	b.n	8002040 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 020e 	bic.w	r2, r2, #14
 8001faa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0201 	bic.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a22      	ldr	r2, [pc, #136]	@ (800204c <HAL_DMA_Abort_IT+0xd4>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d029      	beq.n	800201a <HAL_DMA_Abort_IT+0xa2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a21      	ldr	r2, [pc, #132]	@ (8002050 <HAL_DMA_Abort_IT+0xd8>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d022      	beq.n	8002016 <HAL_DMA_Abort_IT+0x9e>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a1f      	ldr	r2, [pc, #124]	@ (8002054 <HAL_DMA_Abort_IT+0xdc>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d01a      	beq.n	8002010 <HAL_DMA_Abort_IT+0x98>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a1e      	ldr	r2, [pc, #120]	@ (8002058 <HAL_DMA_Abort_IT+0xe0>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d012      	beq.n	800200a <HAL_DMA_Abort_IT+0x92>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a1c      	ldr	r2, [pc, #112]	@ (800205c <HAL_DMA_Abort_IT+0xe4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d00a      	beq.n	8002004 <HAL_DMA_Abort_IT+0x8c>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a1b      	ldr	r2, [pc, #108]	@ (8002060 <HAL_DMA_Abort_IT+0xe8>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d102      	bne.n	8001ffe <HAL_DMA_Abort_IT+0x86>
 8001ff8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001ffc:	e00e      	b.n	800201c <HAL_DMA_Abort_IT+0xa4>
 8001ffe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002002:	e00b      	b.n	800201c <HAL_DMA_Abort_IT+0xa4>
 8002004:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002008:	e008      	b.n	800201c <HAL_DMA_Abort_IT+0xa4>
 800200a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800200e:	e005      	b.n	800201c <HAL_DMA_Abort_IT+0xa4>
 8002010:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002014:	e002      	b.n	800201c <HAL_DMA_Abort_IT+0xa4>
 8002016:	2310      	movs	r3, #16
 8002018:	e000      	b.n	800201c <HAL_DMA_Abort_IT+0xa4>
 800201a:	2301      	movs	r3, #1
 800201c:	4a11      	ldr	r2, [pc, #68]	@ (8002064 <HAL_DMA_Abort_IT+0xec>)
 800201e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	4798      	blx	r3
    } 
  }
  return status;
 8002040:	7bfb      	ldrb	r3, [r7, #15]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40020008 	.word	0x40020008
 8002050:	4002001c 	.word	0x4002001c
 8002054:	40020030 	.word	0x40020030
 8002058:	40020044 	.word	0x40020044
 800205c:	40020058 	.word	0x40020058
 8002060:	4002006c 	.word	0x4002006c
 8002064:	40020000 	.word	0x40020000

08002068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002068:	b480      	push	{r7}
 800206a:	b08b      	sub	sp, #44	@ 0x2c
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002072:	2300      	movs	r3, #0
 8002074:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002076:	2300      	movs	r3, #0
 8002078:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800207a:	e169      	b.n	8002350 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800207c:	2201      	movs	r2, #1
 800207e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	429a      	cmp	r2, r3
 8002096:	f040 8158 	bne.w	800234a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4a9a      	ldr	r2, [pc, #616]	@ (8002308 <HAL_GPIO_Init+0x2a0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d05e      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020a4:	4a98      	ldr	r2, [pc, #608]	@ (8002308 <HAL_GPIO_Init+0x2a0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d875      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020aa:	4a98      	ldr	r2, [pc, #608]	@ (800230c <HAL_GPIO_Init+0x2a4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d058      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020b0:	4a96      	ldr	r2, [pc, #600]	@ (800230c <HAL_GPIO_Init+0x2a4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d86f      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020b6:	4a96      	ldr	r2, [pc, #600]	@ (8002310 <HAL_GPIO_Init+0x2a8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d052      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020bc:	4a94      	ldr	r2, [pc, #592]	@ (8002310 <HAL_GPIO_Init+0x2a8>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d869      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020c2:	4a94      	ldr	r2, [pc, #592]	@ (8002314 <HAL_GPIO_Init+0x2ac>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d04c      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020c8:	4a92      	ldr	r2, [pc, #584]	@ (8002314 <HAL_GPIO_Init+0x2ac>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d863      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020ce:	4a92      	ldr	r2, [pc, #584]	@ (8002318 <HAL_GPIO_Init+0x2b0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d046      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020d4:	4a90      	ldr	r2, [pc, #576]	@ (8002318 <HAL_GPIO_Init+0x2b0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d85d      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020da:	2b12      	cmp	r3, #18
 80020dc:	d82a      	bhi.n	8002134 <HAL_GPIO_Init+0xcc>
 80020de:	2b12      	cmp	r3, #18
 80020e0:	d859      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020e2:	a201      	add	r2, pc, #4	@ (adr r2, 80020e8 <HAL_GPIO_Init+0x80>)
 80020e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e8:	08002163 	.word	0x08002163
 80020ec:	0800213d 	.word	0x0800213d
 80020f0:	0800214f 	.word	0x0800214f
 80020f4:	08002191 	.word	0x08002191
 80020f8:	08002197 	.word	0x08002197
 80020fc:	08002197 	.word	0x08002197
 8002100:	08002197 	.word	0x08002197
 8002104:	08002197 	.word	0x08002197
 8002108:	08002197 	.word	0x08002197
 800210c:	08002197 	.word	0x08002197
 8002110:	08002197 	.word	0x08002197
 8002114:	08002197 	.word	0x08002197
 8002118:	08002197 	.word	0x08002197
 800211c:	08002197 	.word	0x08002197
 8002120:	08002197 	.word	0x08002197
 8002124:	08002197 	.word	0x08002197
 8002128:	08002197 	.word	0x08002197
 800212c:	08002145 	.word	0x08002145
 8002130:	08002159 	.word	0x08002159
 8002134:	4a79      	ldr	r2, [pc, #484]	@ (800231c <HAL_GPIO_Init+0x2b4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d013      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800213a:	e02c      	b.n	8002196 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	623b      	str	r3, [r7, #32]
          break;
 8002142:	e029      	b.n	8002198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	3304      	adds	r3, #4
 800214a:	623b      	str	r3, [r7, #32]
          break;
 800214c:	e024      	b.n	8002198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	3308      	adds	r3, #8
 8002154:	623b      	str	r3, [r7, #32]
          break;
 8002156:	e01f      	b.n	8002198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	330c      	adds	r3, #12
 800215e:	623b      	str	r3, [r7, #32]
          break;
 8002160:	e01a      	b.n	8002198 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d102      	bne.n	8002170 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800216a:	2304      	movs	r3, #4
 800216c:	623b      	str	r3, [r7, #32]
          break;
 800216e:	e013      	b.n	8002198 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d105      	bne.n	8002184 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002178:	2308      	movs	r3, #8
 800217a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	611a      	str	r2, [r3, #16]
          break;
 8002182:	e009      	b.n	8002198 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002184:	2308      	movs	r3, #8
 8002186:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	615a      	str	r2, [r3, #20]
          break;
 800218e:	e003      	b.n	8002198 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002190:	2300      	movs	r3, #0
 8002192:	623b      	str	r3, [r7, #32]
          break;
 8002194:	e000      	b.n	8002198 <HAL_GPIO_Init+0x130>
          break;
 8002196:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	2bff      	cmp	r3, #255	@ 0xff
 800219c:	d801      	bhi.n	80021a2 <HAL_GPIO_Init+0x13a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	e001      	b.n	80021a6 <HAL_GPIO_Init+0x13e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3304      	adds	r3, #4
 80021a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	2bff      	cmp	r3, #255	@ 0xff
 80021ac:	d802      	bhi.n	80021b4 <HAL_GPIO_Init+0x14c>
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	e002      	b.n	80021ba <HAL_GPIO_Init+0x152>
 80021b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b6:	3b08      	subs	r3, #8
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	210f      	movs	r1, #15
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	fa01 f303 	lsl.w	r3, r1, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	401a      	ands	r2, r3
 80021cc:	6a39      	ldr	r1, [r7, #32]
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	fa01 f303 	lsl.w	r3, r1, r3
 80021d4:	431a      	orrs	r2, r3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 80b1 	beq.w	800234a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021e8:	4b4d      	ldr	r3, [pc, #308]	@ (8002320 <HAL_GPIO_Init+0x2b8>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	4a4c      	ldr	r2, [pc, #304]	@ (8002320 <HAL_GPIO_Init+0x2b8>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6193      	str	r3, [r2, #24]
 80021f4:	4b4a      	ldr	r3, [pc, #296]	@ (8002320 <HAL_GPIO_Init+0x2b8>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002200:	4a48      	ldr	r2, [pc, #288]	@ (8002324 <HAL_GPIO_Init+0x2bc>)
 8002202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002204:	089b      	lsrs	r3, r3, #2
 8002206:	3302      	adds	r3, #2
 8002208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800220e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	220f      	movs	r2, #15
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4013      	ands	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a40      	ldr	r2, [pc, #256]	@ (8002328 <HAL_GPIO_Init+0x2c0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d013      	beq.n	8002254 <HAL_GPIO_Init+0x1ec>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a3f      	ldr	r2, [pc, #252]	@ (800232c <HAL_GPIO_Init+0x2c4>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d00d      	beq.n	8002250 <HAL_GPIO_Init+0x1e8>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a3e      	ldr	r2, [pc, #248]	@ (8002330 <HAL_GPIO_Init+0x2c8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d007      	beq.n	800224c <HAL_GPIO_Init+0x1e4>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a3d      	ldr	r2, [pc, #244]	@ (8002334 <HAL_GPIO_Init+0x2cc>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d101      	bne.n	8002248 <HAL_GPIO_Init+0x1e0>
 8002244:	2303      	movs	r3, #3
 8002246:	e006      	b.n	8002256 <HAL_GPIO_Init+0x1ee>
 8002248:	2304      	movs	r3, #4
 800224a:	e004      	b.n	8002256 <HAL_GPIO_Init+0x1ee>
 800224c:	2302      	movs	r3, #2
 800224e:	e002      	b.n	8002256 <HAL_GPIO_Init+0x1ee>
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <HAL_GPIO_Init+0x1ee>
 8002254:	2300      	movs	r3, #0
 8002256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002258:	f002 0203 	and.w	r2, r2, #3
 800225c:	0092      	lsls	r2, r2, #2
 800225e:	4093      	lsls	r3, r2
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002266:	492f      	ldr	r1, [pc, #188]	@ (8002324 <HAL_GPIO_Init+0x2bc>)
 8002268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	3302      	adds	r3, #2
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d006      	beq.n	800228e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002280:	4b2d      	ldr	r3, [pc, #180]	@ (8002338 <HAL_GPIO_Init+0x2d0>)
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	492c      	ldr	r1, [pc, #176]	@ (8002338 <HAL_GPIO_Init+0x2d0>)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	608b      	str	r3, [r1, #8]
 800228c:	e006      	b.n	800229c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800228e:	4b2a      	ldr	r3, [pc, #168]	@ (8002338 <HAL_GPIO_Init+0x2d0>)
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	43db      	mvns	r3, r3
 8002296:	4928      	ldr	r1, [pc, #160]	@ (8002338 <HAL_GPIO_Init+0x2d0>)
 8002298:	4013      	ands	r3, r2
 800229a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d006      	beq.n	80022b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022a8:	4b23      	ldr	r3, [pc, #140]	@ (8002338 <HAL_GPIO_Init+0x2d0>)
 80022aa:	68da      	ldr	r2, [r3, #12]
 80022ac:	4922      	ldr	r1, [pc, #136]	@ (8002338 <HAL_GPIO_Init+0x2d0>)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	60cb      	str	r3, [r1, #12]
 80022b4:	e006      	b.n	80022c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022b6:	4b20      	ldr	r3, [pc, #128]	@ (8002338 <HAL_GPIO_Init+0x2d0>)
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	43db      	mvns	r3, r3
 80022be:	491e      	ldr	r1, [pc, #120]	@ (8002338 <HAL_GPIO_Init+0x2d0>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d006      	beq.n	80022de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022d0:	4b19      	ldr	r3, [pc, #100]	@ (8002338 <HAL_GPIO_Init+0x2d0>)
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	4918      	ldr	r1, [pc, #96]	@ (8002338 <HAL_GPIO_Init+0x2d0>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	604b      	str	r3, [r1, #4]
 80022dc:	e006      	b.n	80022ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022de:	4b16      	ldr	r3, [pc, #88]	@ (8002338 <HAL_GPIO_Init+0x2d0>)
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	4914      	ldr	r1, [pc, #80]	@ (8002338 <HAL_GPIO_Init+0x2d0>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d021      	beq.n	800233c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002338 <HAL_GPIO_Init+0x2d0>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	490e      	ldr	r1, [pc, #56]	@ (8002338 <HAL_GPIO_Init+0x2d0>)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	4313      	orrs	r3, r2
 8002302:	600b      	str	r3, [r1, #0]
 8002304:	e021      	b.n	800234a <HAL_GPIO_Init+0x2e2>
 8002306:	bf00      	nop
 8002308:	10320000 	.word	0x10320000
 800230c:	10310000 	.word	0x10310000
 8002310:	10220000 	.word	0x10220000
 8002314:	10210000 	.word	0x10210000
 8002318:	10120000 	.word	0x10120000
 800231c:	10110000 	.word	0x10110000
 8002320:	40021000 	.word	0x40021000
 8002324:	40010000 	.word	0x40010000
 8002328:	40010800 	.word	0x40010800
 800232c:	40010c00 	.word	0x40010c00
 8002330:	40011000 	.word	0x40011000
 8002334:	40011400 	.word	0x40011400
 8002338:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800233c:	4b0b      	ldr	r3, [pc, #44]	@ (800236c <HAL_GPIO_Init+0x304>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	43db      	mvns	r3, r3
 8002344:	4909      	ldr	r1, [pc, #36]	@ (800236c <HAL_GPIO_Init+0x304>)
 8002346:	4013      	ands	r3, r2
 8002348:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800234a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234c:	3301      	adds	r3, #1
 800234e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002356:	fa22 f303 	lsr.w	r3, r2, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	f47f ae8e 	bne.w	800207c <HAL_GPIO_Init+0x14>
  }
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	372c      	adds	r7, #44	@ 0x2c
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr
 800236c:	40010400 	.word	0x40010400

08002370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	807b      	strh	r3, [r7, #2]
 800237c:	4613      	mov	r3, r2
 800237e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002380:	787b      	ldrb	r3, [r7, #1]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002386:	887a      	ldrh	r2, [r7, #2]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800238c:	e003      	b.n	8002396 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800238e:	887b      	ldrh	r3, [r7, #2]
 8002390:	041a      	lsls	r2, r3, #16
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	611a      	str	r2, [r3, #16]
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr

080023a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023b2:	887a      	ldrh	r2, [r7, #2]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4013      	ands	r3, r2
 80023b8:	041a      	lsls	r2, r3, #16
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	43d9      	mvns	r1, r3
 80023be:	887b      	ldrh	r3, [r7, #2]
 80023c0:	400b      	ands	r3, r1
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	611a      	str	r2, [r3, #16]
}
 80023c8:	bf00      	nop
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr

080023d2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b084      	sub	sp, #16
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e034      	b.n	800244e <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80023ec:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f245 5255 	movw	r2, #21845	@ 0x5555
 80023f6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6852      	ldr	r2, [r2, #4]
 8002400:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6892      	ldr	r2, [r2, #8]
 800240a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800240c:	f7fe fe08 	bl	8001020 <HAL_GetTick>
 8002410:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002412:	e00f      	b.n	8002434 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002414:	f7fe fe04 	bl	8001020 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b27      	cmp	r3, #39	@ 0x27
 8002420:	d908      	bls.n	8002434 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e00c      	b.n	800244e <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1e8      	bne.n	8002414 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800244a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8002466:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e272      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 8087 	beq.w	80025a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002494:	4b92      	ldr	r3, [pc, #584]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 030c 	and.w	r3, r3, #12
 800249c:	2b04      	cmp	r3, #4
 800249e:	d00c      	beq.n	80024ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024a0:	4b8f      	ldr	r3, [pc, #572]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	d112      	bne.n	80024d2 <HAL_RCC_OscConfig+0x5e>
 80024ac:	4b8c      	ldr	r3, [pc, #560]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024b8:	d10b      	bne.n	80024d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ba:	4b89      	ldr	r3, [pc, #548]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d06c      	beq.n	80025a0 <HAL_RCC_OscConfig+0x12c>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d168      	bne.n	80025a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e24c      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024da:	d106      	bne.n	80024ea <HAL_RCC_OscConfig+0x76>
 80024dc:	4b80      	ldr	r3, [pc, #512]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a7f      	ldr	r2, [pc, #508]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80024e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	e02e      	b.n	8002548 <HAL_RCC_OscConfig+0xd4>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0x98>
 80024f2:	4b7b      	ldr	r3, [pc, #492]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a7a      	ldr	r2, [pc, #488]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80024f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	4b78      	ldr	r3, [pc, #480]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a77      	ldr	r2, [pc, #476]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002504:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e01d      	b.n	8002548 <HAL_RCC_OscConfig+0xd4>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002514:	d10c      	bne.n	8002530 <HAL_RCC_OscConfig+0xbc>
 8002516:	4b72      	ldr	r3, [pc, #456]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a71      	ldr	r2, [pc, #452]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 800251c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	4b6f      	ldr	r3, [pc, #444]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a6e      	ldr	r2, [pc, #440]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e00b      	b.n	8002548 <HAL_RCC_OscConfig+0xd4>
 8002530:	4b6b      	ldr	r3, [pc, #428]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a6a      	ldr	r2, [pc, #424]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002536:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	4b68      	ldr	r3, [pc, #416]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a67      	ldr	r2, [pc, #412]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002542:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002546:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d013      	beq.n	8002578 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7fe fd66 	bl	8001020 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002558:	f7fe fd62 	bl	8001020 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b64      	cmp	r3, #100	@ 0x64
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e200      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256a:	4b5d      	ldr	r3, [pc, #372]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0xe4>
 8002576:	e014      	b.n	80025a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7fe fd52 	bl	8001020 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002580:	f7fe fd4e 	bl	8001020 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	@ 0x64
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e1ec      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002592:	4b53      	ldr	r3, [pc, #332]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x10c>
 800259e:	e000      	b.n	80025a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d063      	beq.n	8002676 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025ae:	4b4c      	ldr	r3, [pc, #304]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00b      	beq.n	80025d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025ba:	4b49      	ldr	r3, [pc, #292]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d11c      	bne.n	8002600 <HAL_RCC_OscConfig+0x18c>
 80025c6:	4b46      	ldr	r3, [pc, #280]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d116      	bne.n	8002600 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d2:	4b43      	ldr	r3, [pc, #268]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_RCC_OscConfig+0x176>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e1c0      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ea:	4b3d      	ldr	r3, [pc, #244]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4939      	ldr	r1, [pc, #228]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fe:	e03a      	b.n	8002676 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d020      	beq.n	800264a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002608:	4b36      	ldr	r3, [pc, #216]	@ (80026e4 <HAL_RCC_OscConfig+0x270>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260e:	f7fe fd07 	bl	8001020 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002616:	f7fe fd03 	bl	8001020 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e1a1      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002628:	4b2d      	ldr	r3, [pc, #180]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002634:	4b2a      	ldr	r3, [pc, #168]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4927      	ldr	r1, [pc, #156]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002644:	4313      	orrs	r3, r2
 8002646:	600b      	str	r3, [r1, #0]
 8002648:	e015      	b.n	8002676 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264a:	4b26      	ldr	r3, [pc, #152]	@ (80026e4 <HAL_RCC_OscConfig+0x270>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7fe fce6 	bl	8001020 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002658:	f7fe fce2 	bl	8001020 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e180      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266a:	4b1d      	ldr	r3, [pc, #116]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d03a      	beq.n	80026f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d019      	beq.n	80026be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800268a:	4b17      	ldr	r3, [pc, #92]	@ (80026e8 <HAL_RCC_OscConfig+0x274>)
 800268c:	2201      	movs	r2, #1
 800268e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002690:	f7fe fcc6 	bl	8001020 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002698:	f7fe fcc2 	bl	8001020 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e160      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026aa:	4b0d      	ldr	r3, [pc, #52]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026b6:	2001      	movs	r0, #1
 80026b8:	f000 face 	bl	8002c58 <RCC_Delay>
 80026bc:	e01c      	b.n	80026f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026be:	4b0a      	ldr	r3, [pc, #40]	@ (80026e8 <HAL_RCC_OscConfig+0x274>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c4:	f7fe fcac 	bl	8001020 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ca:	e00f      	b.n	80026ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026cc:	f7fe fca8 	bl	8001020 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d908      	bls.n	80026ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e146      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000
 80026e4:	42420000 	.word	0x42420000
 80026e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ec:	4b92      	ldr	r3, [pc, #584]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80026ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1e9      	bne.n	80026cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 80a6 	beq.w	8002852 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002706:	2300      	movs	r3, #0
 8002708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800270a:	4b8b      	ldr	r3, [pc, #556]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10d      	bne.n	8002732 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002716:	4b88      	ldr	r3, [pc, #544]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	4a87      	ldr	r2, [pc, #540]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 800271c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002720:	61d3      	str	r3, [r2, #28]
 8002722:	4b85      	ldr	r3, [pc, #532]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272e:	2301      	movs	r3, #1
 8002730:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002732:	4b82      	ldr	r3, [pc, #520]	@ (800293c <HAL_RCC_OscConfig+0x4c8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800273a:	2b00      	cmp	r3, #0
 800273c:	d118      	bne.n	8002770 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273e:	4b7f      	ldr	r3, [pc, #508]	@ (800293c <HAL_RCC_OscConfig+0x4c8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a7e      	ldr	r2, [pc, #504]	@ (800293c <HAL_RCC_OscConfig+0x4c8>)
 8002744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274a:	f7fe fc69 	bl	8001020 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002752:	f7fe fc65 	bl	8001020 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b64      	cmp	r3, #100	@ 0x64
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e103      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002764:	4b75      	ldr	r3, [pc, #468]	@ (800293c <HAL_RCC_OscConfig+0x4c8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d106      	bne.n	8002786 <HAL_RCC_OscConfig+0x312>
 8002778:	4b6f      	ldr	r3, [pc, #444]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	4a6e      	ldr	r2, [pc, #440]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6213      	str	r3, [r2, #32]
 8002784:	e02d      	b.n	80027e2 <HAL_RCC_OscConfig+0x36e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10c      	bne.n	80027a8 <HAL_RCC_OscConfig+0x334>
 800278e:	4b6a      	ldr	r3, [pc, #424]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	4a69      	ldr	r2, [pc, #420]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	f023 0301 	bic.w	r3, r3, #1
 8002798:	6213      	str	r3, [r2, #32]
 800279a:	4b67      	ldr	r3, [pc, #412]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	4a66      	ldr	r2, [pc, #408]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	f023 0304 	bic.w	r3, r3, #4
 80027a4:	6213      	str	r3, [r2, #32]
 80027a6:	e01c      	b.n	80027e2 <HAL_RCC_OscConfig+0x36e>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b05      	cmp	r3, #5
 80027ae:	d10c      	bne.n	80027ca <HAL_RCC_OscConfig+0x356>
 80027b0:	4b61      	ldr	r3, [pc, #388]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	4a60      	ldr	r2, [pc, #384]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80027b6:	f043 0304 	orr.w	r3, r3, #4
 80027ba:	6213      	str	r3, [r2, #32]
 80027bc:	4b5e      	ldr	r3, [pc, #376]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	4a5d      	ldr	r2, [pc, #372]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	6213      	str	r3, [r2, #32]
 80027c8:	e00b      	b.n	80027e2 <HAL_RCC_OscConfig+0x36e>
 80027ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	4a5a      	ldr	r2, [pc, #360]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80027d0:	f023 0301 	bic.w	r3, r3, #1
 80027d4:	6213      	str	r3, [r2, #32]
 80027d6:	4b58      	ldr	r3, [pc, #352]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	4a57      	ldr	r2, [pc, #348]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80027dc:	f023 0304 	bic.w	r3, r3, #4
 80027e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d015      	beq.n	8002816 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ea:	f7fe fc19 	bl	8001020 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f0:	e00a      	b.n	8002808 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f2:	f7fe fc15 	bl	8001020 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002800:	4293      	cmp	r3, r2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e0b1      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002808:	4b4b      	ldr	r3, [pc, #300]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0ee      	beq.n	80027f2 <HAL_RCC_OscConfig+0x37e>
 8002814:	e014      	b.n	8002840 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002816:	f7fe fc03 	bl	8001020 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800281c:	e00a      	b.n	8002834 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281e:	f7fe fbff 	bl	8001020 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800282c:	4293      	cmp	r3, r2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e09b      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002834:	4b40      	ldr	r3, [pc, #256]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1ee      	bne.n	800281e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002840:	7dfb      	ldrb	r3, [r7, #23]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d105      	bne.n	8002852 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002846:	4b3c      	ldr	r3, [pc, #240]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	4a3b      	ldr	r2, [pc, #236]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 800284c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002850:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 8087 	beq.w	800296a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800285c:	4b36      	ldr	r3, [pc, #216]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b08      	cmp	r3, #8
 8002866:	d061      	beq.n	800292c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d146      	bne.n	80028fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002870:	4b33      	ldr	r3, [pc, #204]	@ (8002940 <HAL_RCC_OscConfig+0x4cc>)
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002876:	f7fe fbd3 	bl	8001020 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287e:	f7fe fbcf 	bl	8001020 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e06d      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002890:	4b29      	ldr	r3, [pc, #164]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f0      	bne.n	800287e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028a4:	d108      	bne.n	80028b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028a6:	4b24      	ldr	r3, [pc, #144]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	4921      	ldr	r1, [pc, #132]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a19      	ldr	r1, [r3, #32]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c8:	430b      	orrs	r3, r1
 80028ca:	491b      	ldr	r1, [pc, #108]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002940 <HAL_RCC_OscConfig+0x4cc>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d6:	f7fe fba3 	bl	8001020 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028de:	f7fe fb9f 	bl	8001020 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e03d      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028f0:	4b11      	ldr	r3, [pc, #68]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x46a>
 80028fc:	e035      	b.n	800296a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fe:	4b10      	ldr	r3, [pc, #64]	@ (8002940 <HAL_RCC_OscConfig+0x4cc>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7fe fb8c 	bl	8001020 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290c:	f7fe fb88 	bl	8001020 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e026      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800291e:	4b06      	ldr	r3, [pc, #24]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x498>
 800292a:	e01e      	b.n	800296a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d107      	bne.n	8002944 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e019      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
 8002938:	40021000 	.word	0x40021000
 800293c:	40007000 	.word	0x40007000
 8002940:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002944:	4b0b      	ldr	r3, [pc, #44]	@ (8002974 <HAL_RCC_OscConfig+0x500>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	429a      	cmp	r2, r3
 8002956:	d106      	bne.n	8002966 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002962:	429a      	cmp	r2, r3
 8002964:	d001      	beq.n	800296a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40021000 	.word	0x40021000

08002978 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e0d0      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800298c:	4b6a      	ldr	r3, [pc, #424]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c0>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d910      	bls.n	80029bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299a:	4b67      	ldr	r3, [pc, #412]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 0207 	bic.w	r2, r3, #7
 80029a2:	4965      	ldr	r1, [pc, #404]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c0>)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029aa:	4b63      	ldr	r3, [pc, #396]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d001      	beq.n	80029bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0b8      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d020      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d4:	4b59      	ldr	r3, [pc, #356]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	4a58      	ldr	r2, [pc, #352]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 80029da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029ec:	4b53      	ldr	r3, [pc, #332]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	4a52      	ldr	r2, [pc, #328]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 80029f2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80029f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f8:	4b50      	ldr	r3, [pc, #320]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	494d      	ldr	r1, [pc, #308]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d040      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d107      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1e:	4b47      	ldr	r3, [pc, #284]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d115      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e07f      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d107      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a36:	4b41      	ldr	r3, [pc, #260]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d109      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e073      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a46:	4b3d      	ldr	r3, [pc, #244]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e06b      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a56:	4b39      	ldr	r3, [pc, #228]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f023 0203 	bic.w	r2, r3, #3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	4936      	ldr	r1, [pc, #216]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a68:	f7fe fada 	bl	8001020 <HAL_GetTick>
 8002a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6e:	e00a      	b.n	8002a86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a70:	f7fe fad6 	bl	8001020 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e053      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a86:	4b2d      	ldr	r3, [pc, #180]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 020c 	and.w	r2, r3, #12
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d1eb      	bne.n	8002a70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a98:	4b27      	ldr	r3, [pc, #156]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c0>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d210      	bcs.n	8002ac8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa6:	4b24      	ldr	r3, [pc, #144]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 0207 	bic.w	r2, r3, #7
 8002aae:	4922      	ldr	r1, [pc, #136]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab6:	4b20      	ldr	r3, [pc, #128]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e032      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad4:	4b19      	ldr	r3, [pc, #100]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4916      	ldr	r1, [pc, #88]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d009      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002af2:	4b12      	ldr	r3, [pc, #72]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	490e      	ldr	r1, [pc, #56]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b06:	f000 f821 	bl	8002b4c <HAL_RCC_GetSysClockFreq>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	490a      	ldr	r1, [pc, #40]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 8002b18:	5ccb      	ldrb	r3, [r1, r3]
 8002b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b1e:	4a09      	ldr	r2, [pc, #36]	@ (8002b44 <HAL_RCC_ClockConfig+0x1cc>)
 8002b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b22:	4b09      	ldr	r3, [pc, #36]	@ (8002b48 <HAL_RCC_ClockConfig+0x1d0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fe fa38 	bl	8000f9c <HAL_InitTick>

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40022000 	.word	0x40022000
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	080055fc 	.word	0x080055fc
 8002b44:	20000000 	.word	0x20000000
 8002b48:	20000004 	.word	0x20000004

08002b4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	2300      	movs	r3, #0
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b66:	4b1e      	ldr	r3, [pc, #120]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d002      	beq.n	8002b7c <HAL_RCC_GetSysClockFreq+0x30>
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d003      	beq.n	8002b82 <HAL_RCC_GetSysClockFreq+0x36>
 8002b7a:	e027      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b7c:	4b19      	ldr	r3, [pc, #100]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b7e:	613b      	str	r3, [r7, #16]
      break;
 8002b80:	e027      	b.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	0c9b      	lsrs	r3, r3, #18
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	4a17      	ldr	r2, [pc, #92]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b8c:	5cd3      	ldrb	r3, [r2, r3]
 8002b8e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d010      	beq.n	8002bbc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b9a:	4b11      	ldr	r3, [pc, #68]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	0c5b      	lsrs	r3, r3, #17
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	4a11      	ldr	r2, [pc, #68]	@ (8002bec <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ba6:	5cd3      	ldrb	r3, [r2, r3]
 8002ba8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a0d      	ldr	r2, [pc, #52]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bae:	fb03 f202 	mul.w	r2, r3, r2
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	e004      	b.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a0c      	ldr	r2, [pc, #48]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002bc0:	fb02 f303 	mul.w	r3, r2, r3
 8002bc4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	613b      	str	r3, [r7, #16]
      break;
 8002bca:	e002      	b.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bcc:	4b05      	ldr	r3, [pc, #20]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bce:	613b      	str	r3, [r7, #16]
      break;
 8002bd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bd2:	693b      	ldr	r3, [r7, #16]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	371c      	adds	r7, #28
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40021000 	.word	0x40021000
 8002be4:	007a1200 	.word	0x007a1200
 8002be8:	08005614 	.word	0x08005614
 8002bec:	08005624 	.word	0x08005624
 8002bf0:	003d0900 	.word	0x003d0900

08002bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bf8:	4b02      	ldr	r3, [pc, #8]	@ (8002c04 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr
 8002c04:	20000000 	.word	0x20000000

08002c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c0c:	f7ff fff2 	bl	8002bf4 <HAL_RCC_GetHCLKFreq>
 8002c10:	4602      	mov	r2, r0
 8002c12:	4b05      	ldr	r3, [pc, #20]	@ (8002c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	0a1b      	lsrs	r3, r3, #8
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	4903      	ldr	r1, [pc, #12]	@ (8002c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c1e:	5ccb      	ldrb	r3, [r1, r3]
 8002c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	0800560c 	.word	0x0800560c

08002c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c34:	f7ff ffde 	bl	8002bf4 <HAL_RCC_GetHCLKFreq>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	4b05      	ldr	r3, [pc, #20]	@ (8002c50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	0adb      	lsrs	r3, r3, #11
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	4903      	ldr	r1, [pc, #12]	@ (8002c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c46:	5ccb      	ldrb	r3, [r1, r3]
 8002c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40021000 	.word	0x40021000
 8002c54:	0800560c 	.word	0x0800560c

08002c58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c60:	4b0a      	ldr	r3, [pc, #40]	@ (8002c8c <RCC_Delay+0x34>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a0a      	ldr	r2, [pc, #40]	@ (8002c90 <RCC_Delay+0x38>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	0a5b      	lsrs	r3, r3, #9
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c74:	bf00      	nop
  }
  while (Delay --);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	1e5a      	subs	r2, r3, #1
 8002c7a:	60fa      	str	r2, [r7, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1f9      	bne.n	8002c74 <RCC_Delay+0x1c>
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr
 8002c8c:	20000000 	.word	0x20000000
 8002c90:	10624dd3 	.word	0x10624dd3

08002c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e041      	b.n	8002d2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d106      	bne.n	8002cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7fe f858 	bl	8000d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3304      	adds	r3, #4
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	f000 faa2 	bl	800321c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d001      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e03a      	b.n	8002dc2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0201 	orr.w	r2, r2, #1
 8002d62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a18      	ldr	r2, [pc, #96]	@ (8002dcc <HAL_TIM_Base_Start_IT+0x98>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00e      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x58>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d76:	d009      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x58>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a14      	ldr	r2, [pc, #80]	@ (8002dd0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d004      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x58>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a13      	ldr	r2, [pc, #76]	@ (8002dd4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d111      	bne.n	8002db0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b06      	cmp	r3, #6
 8002d9c:	d010      	beq.n	8002dc0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f042 0201 	orr.w	r2, r2, #1
 8002dac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dae:	e007      	b.n	8002dc0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0201 	orr.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr
 8002dcc:	40012c00 	.word	0x40012c00
 8002dd0:	40000400 	.word	0x40000400
 8002dd4:	40000800 	.word	0x40000800

08002dd8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0201 	bic.w	r2, r2, #1
 8002dee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6a1a      	ldr	r2, [r3, #32]
 8002df6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10f      	bne.n	8002e20 <HAL_TIM_Base_Stop_IT+0x48>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6a1a      	ldr	r2, [r3, #32]
 8002e06:	f240 4344 	movw	r3, #1092	@ 0x444
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d107      	bne.n	8002e20 <HAL_TIM_Base_Stop_IT+0x48>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0201 	bic.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d122      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d11b      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f06f 0202 	mvn.w	r2, #2
 8002e60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f9b4 	bl	80031e4 <HAL_TIM_IC_CaptureCallback>
 8002e7c:	e005      	b.n	8002e8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f9a7 	bl	80031d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f9b6 	bl	80031f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d122      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d11b      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f06f 0204 	mvn.w	r2, #4
 8002eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2202      	movs	r2, #2
 8002eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f98a 	bl	80031e4 <HAL_TIM_IC_CaptureCallback>
 8002ed0:	e005      	b.n	8002ede <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f97d 	bl	80031d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f98c 	bl	80031f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d122      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 0308 	and.w	r3, r3, #8
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d11b      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f06f 0208 	mvn.w	r2, #8
 8002f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2204      	movs	r2, #4
 8002f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f960 	bl	80031e4 <HAL_TIM_IC_CaptureCallback>
 8002f24:	e005      	b.n	8002f32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f953 	bl	80031d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f962 	bl	80031f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f003 0310 	and.w	r3, r3, #16
 8002f42:	2b10      	cmp	r3, #16
 8002f44:	d122      	bne.n	8002f8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	2b10      	cmp	r3, #16
 8002f52:	d11b      	bne.n	8002f8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f06f 0210 	mvn.w	r2, #16
 8002f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2208      	movs	r2, #8
 8002f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f936 	bl	80031e4 <HAL_TIM_IC_CaptureCallback>
 8002f78:	e005      	b.n	8002f86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f929 	bl	80031d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f938 	bl	80031f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d10e      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d107      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f06f 0201 	mvn.w	r2, #1
 8002fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fd fa3e 	bl	8000434 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc2:	2b80      	cmp	r3, #128	@ 0x80
 8002fc4:	d10e      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd0:	2b80      	cmp	r3, #128	@ 0x80
 8002fd2:	d107      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fa7b 	bl	80034da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fee:	2b40      	cmp	r3, #64	@ 0x40
 8002ff0:	d10e      	bne.n	8003010 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ffc:	2b40      	cmp	r3, #64	@ 0x40
 8002ffe:	d107      	bne.n	8003010 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f8fc 	bl	8003208 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f003 0320 	and.w	r3, r3, #32
 800301a:	2b20      	cmp	r3, #32
 800301c:	d10e      	bne.n	800303c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0320 	and.w	r3, r3, #32
 8003028:	2b20      	cmp	r3, #32
 800302a:	d107      	bne.n	800303c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0220 	mvn.w	r2, #32
 8003034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 fa46 	bl	80034c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800303c:	bf00      	nop
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_TIM_ConfigClockSource+0x1c>
 800305c:	2302      	movs	r3, #2
 800305e:	e0b4      	b.n	80031ca <HAL_TIM_ConfigClockSource+0x186>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800307e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003086:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003098:	d03e      	beq.n	8003118 <HAL_TIM_ConfigClockSource+0xd4>
 800309a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800309e:	f200 8087 	bhi.w	80031b0 <HAL_TIM_ConfigClockSource+0x16c>
 80030a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030a6:	f000 8086 	beq.w	80031b6 <HAL_TIM_ConfigClockSource+0x172>
 80030aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030ae:	d87f      	bhi.n	80031b0 <HAL_TIM_ConfigClockSource+0x16c>
 80030b0:	2b70      	cmp	r3, #112	@ 0x70
 80030b2:	d01a      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0xa6>
 80030b4:	2b70      	cmp	r3, #112	@ 0x70
 80030b6:	d87b      	bhi.n	80031b0 <HAL_TIM_ConfigClockSource+0x16c>
 80030b8:	2b60      	cmp	r3, #96	@ 0x60
 80030ba:	d050      	beq.n	800315e <HAL_TIM_ConfigClockSource+0x11a>
 80030bc:	2b60      	cmp	r3, #96	@ 0x60
 80030be:	d877      	bhi.n	80031b0 <HAL_TIM_ConfigClockSource+0x16c>
 80030c0:	2b50      	cmp	r3, #80	@ 0x50
 80030c2:	d03c      	beq.n	800313e <HAL_TIM_ConfigClockSource+0xfa>
 80030c4:	2b50      	cmp	r3, #80	@ 0x50
 80030c6:	d873      	bhi.n	80031b0 <HAL_TIM_ConfigClockSource+0x16c>
 80030c8:	2b40      	cmp	r3, #64	@ 0x40
 80030ca:	d058      	beq.n	800317e <HAL_TIM_ConfigClockSource+0x13a>
 80030cc:	2b40      	cmp	r3, #64	@ 0x40
 80030ce:	d86f      	bhi.n	80031b0 <HAL_TIM_ConfigClockSource+0x16c>
 80030d0:	2b30      	cmp	r3, #48	@ 0x30
 80030d2:	d064      	beq.n	800319e <HAL_TIM_ConfigClockSource+0x15a>
 80030d4:	2b30      	cmp	r3, #48	@ 0x30
 80030d6:	d86b      	bhi.n	80031b0 <HAL_TIM_ConfigClockSource+0x16c>
 80030d8:	2b20      	cmp	r3, #32
 80030da:	d060      	beq.n	800319e <HAL_TIM_ConfigClockSource+0x15a>
 80030dc:	2b20      	cmp	r3, #32
 80030de:	d867      	bhi.n	80031b0 <HAL_TIM_ConfigClockSource+0x16c>
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d05c      	beq.n	800319e <HAL_TIM_ConfigClockSource+0x15a>
 80030e4:	2b10      	cmp	r3, #16
 80030e6:	d05a      	beq.n	800319e <HAL_TIM_ConfigClockSource+0x15a>
 80030e8:	e062      	b.n	80031b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030fa:	f000 f968 	bl	80033ce <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800310c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	609a      	str	r2, [r3, #8]
      break;
 8003116:	e04f      	b.n	80031b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003128:	f000 f951 	bl	80033ce <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800313a:	609a      	str	r2, [r3, #8]
      break;
 800313c:	e03c      	b.n	80031b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800314a:	461a      	mov	r2, r3
 800314c:	f000 f8c8 	bl	80032e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2150      	movs	r1, #80	@ 0x50
 8003156:	4618      	mov	r0, r3
 8003158:	f000 f91f 	bl	800339a <TIM_ITRx_SetConfig>
      break;
 800315c:	e02c      	b.n	80031b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800316a:	461a      	mov	r2, r3
 800316c:	f000 f8e6 	bl	800333c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2160      	movs	r1, #96	@ 0x60
 8003176:	4618      	mov	r0, r3
 8003178:	f000 f90f 	bl	800339a <TIM_ITRx_SetConfig>
      break;
 800317c:	e01c      	b.n	80031b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800318a:	461a      	mov	r2, r3
 800318c:	f000 f8a8 	bl	80032e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2140      	movs	r1, #64	@ 0x40
 8003196:	4618      	mov	r0, r3
 8003198:	f000 f8ff 	bl	800339a <TIM_ITRx_SetConfig>
      break;
 800319c:	e00c      	b.n	80031b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4619      	mov	r1, r3
 80031a8:	4610      	mov	r0, r2
 80031aa:	f000 f8f6 	bl	800339a <TIM_ITRx_SetConfig>
      break;
 80031ae:	e003      	b.n	80031b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	73fb      	strb	r3, [r7, #15]
      break;
 80031b4:	e000      	b.n	80031b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr

080031e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr

080031f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr

08003208 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr
	...

0800321c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a29      	ldr	r2, [pc, #164]	@ (80032d4 <TIM_Base_SetConfig+0xb8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d00b      	beq.n	800324c <TIM_Base_SetConfig+0x30>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800323a:	d007      	beq.n	800324c <TIM_Base_SetConfig+0x30>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a26      	ldr	r2, [pc, #152]	@ (80032d8 <TIM_Base_SetConfig+0xbc>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d003      	beq.n	800324c <TIM_Base_SetConfig+0x30>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a25      	ldr	r2, [pc, #148]	@ (80032dc <TIM_Base_SetConfig+0xc0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d108      	bne.n	800325e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4313      	orrs	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a1c      	ldr	r2, [pc, #112]	@ (80032d4 <TIM_Base_SetConfig+0xb8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d00b      	beq.n	800327e <TIM_Base_SetConfig+0x62>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800326c:	d007      	beq.n	800327e <TIM_Base_SetConfig+0x62>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a19      	ldr	r2, [pc, #100]	@ (80032d8 <TIM_Base_SetConfig+0xbc>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d003      	beq.n	800327e <TIM_Base_SetConfig+0x62>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a18      	ldr	r2, [pc, #96]	@ (80032dc <TIM_Base_SetConfig+0xc0>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d108      	bne.n	8003290 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003284:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4313      	orrs	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a07      	ldr	r2, [pc, #28]	@ (80032d4 <TIM_Base_SetConfig+0xb8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d103      	bne.n	80032c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	615a      	str	r2, [r3, #20]
}
 80032ca:	bf00      	nop
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr
 80032d4:	40012c00 	.word	0x40012c00
 80032d8:	40000400 	.word	0x40000400
 80032dc:	40000800 	.word	0x40000800

080032e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	f023 0201 	bic.w	r2, r3, #1
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800330a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f023 030a 	bic.w	r3, r3, #10
 800331c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4313      	orrs	r3, r2
 8003324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	621a      	str	r2, [r3, #32]
}
 8003332:	bf00      	nop
 8003334:	371c      	adds	r7, #28
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr

0800333c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	f023 0210 	bic.w	r2, r3, #16
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	031b      	lsls	r3, r3, #12
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003378:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	4313      	orrs	r3, r2
 8003382:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	621a      	str	r2, [r3, #32]
}
 8003390:	bf00      	nop
 8003392:	371c      	adds	r7, #28
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr

0800339a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800339a:	b480      	push	{r7}
 800339c:	b085      	sub	sp, #20
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f043 0307 	orr.w	r3, r3, #7
 80033bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	609a      	str	r2, [r3, #8]
}
 80033c4:	bf00      	nop
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr

080033ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b087      	sub	sp, #28
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	021a      	lsls	r2, r3, #8
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	431a      	orrs	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	609a      	str	r2, [r3, #8]
}
 8003402:	bf00      	nop
 8003404:	371c      	adds	r7, #28
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003420:	2302      	movs	r3, #2
 8003422:	e046      	b.n	80034b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800344a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a16      	ldr	r2, [pc, #88]	@ (80034bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00e      	beq.n	8003486 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003470:	d009      	beq.n	8003486 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a12      	ldr	r2, [pc, #72]	@ (80034c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d004      	beq.n	8003486 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a10      	ldr	r2, [pc, #64]	@ (80034c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d10c      	bne.n	80034a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800348c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	4313      	orrs	r3, r2
 8003496:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr
 80034bc:	40012c00 	.word	0x40012c00
 80034c0:	40000400 	.word	0x40000400
 80034c4:	40000800 	.word	0x40000800

080034c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr

080034da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr

080034ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e042      	b.n	8003584 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fd fcb2 	bl	8000e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2224      	movs	r2, #36	@ 0x24
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800352e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 fdc5 	bl	80040c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003544:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003554:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003564:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08a      	sub	sp, #40	@ 0x28
 8003590:	af02      	add	r7, sp, #8
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	4613      	mov	r3, r2
 800359a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b20      	cmp	r3, #32
 80035aa:	d16d      	bne.n	8003688 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <HAL_UART_Transmit+0x2c>
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e066      	b.n	800368a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2221      	movs	r2, #33	@ 0x21
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035ca:	f7fd fd29 	bl	8001020 <HAL_GetTick>
 80035ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	88fa      	ldrh	r2, [r7, #6]
 80035d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	88fa      	ldrh	r2, [r7, #6]
 80035da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035e4:	d108      	bne.n	80035f8 <HAL_UART_Transmit+0x6c>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d104      	bne.n	80035f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	61bb      	str	r3, [r7, #24]
 80035f6:	e003      	b.n	8003600 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003600:	e02a      	b.n	8003658 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2200      	movs	r2, #0
 800360a:	2180      	movs	r1, #128	@ 0x80
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 fb14 	bl	8003c3a <UART_WaitOnFlagUntilTimeout>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e036      	b.n	800368a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10b      	bne.n	800363a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003630:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	3302      	adds	r3, #2
 8003636:	61bb      	str	r3, [r7, #24]
 8003638:	e007      	b.n	800364a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	781a      	ldrb	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	3301      	adds	r3, #1
 8003648:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800365c:	b29b      	uxth	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1cf      	bne.n	8003602 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2200      	movs	r2, #0
 800366a:	2140      	movs	r1, #64	@ 0x40
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 fae4 	bl	8003c3a <UART_WaitOnFlagUntilTimeout>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e006      	b.n	800368a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003684:	2300      	movs	r3, #0
 8003686:	e000      	b.n	800368a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003688:	2302      	movs	r3, #2
  }
}
 800368a:	4618      	mov	r0, r3
 800368c:	3720      	adds	r7, #32
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b084      	sub	sp, #16
 8003696:	af00      	add	r7, sp, #0
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	4613      	mov	r3, r2
 800369e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	d112      	bne.n	80036d2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <HAL_UART_Receive_IT+0x26>
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e00b      	b.n	80036d4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80036c2:	88fb      	ldrh	r3, [r7, #6]
 80036c4:	461a      	mov	r2, r3
 80036c6:	68b9      	ldr	r1, [r7, #8]
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 fb24 	bl	8003d16 <UART_Start_Receive_IT>
 80036ce:	4603      	mov	r3, r0
 80036d0:	e000      	b.n	80036d4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80036d2:	2302      	movs	r3, #2
  }
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b0ba      	sub	sp, #232	@ 0xe8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003702:	2300      	movs	r3, #0
 8003704:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003708:	2300      	movs	r3, #0
 800370a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800370e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800371a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10f      	bne.n	8003742 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b00      	cmp	r3, #0
 800372c:	d009      	beq.n	8003742 <HAL_UART_IRQHandler+0x66>
 800372e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003732:	f003 0320 	and.w	r3, r3, #32
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 fc01 	bl	8003f42 <UART_Receive_IT>
      return;
 8003740:	e25b      	b.n	8003bfa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003742:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 80de 	beq.w	8003908 <HAL_UART_IRQHandler+0x22c>
 800374c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d106      	bne.n	8003766 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800375c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80d1 	beq.w	8003908 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00b      	beq.n	800378a <HAL_UART_IRQHandler+0xae>
 8003772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003782:	f043 0201 	orr.w	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800378a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00b      	beq.n	80037ae <HAL_UART_IRQHandler+0xd2>
 8003796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d005      	beq.n	80037ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a6:	f043 0202 	orr.w	r2, r3, #2
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00b      	beq.n	80037d2 <HAL_UART_IRQHandler+0xf6>
 80037ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d005      	beq.n	80037d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ca:	f043 0204 	orr.w	r2, r3, #4
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d011      	beq.n	8003802 <HAL_UART_IRQHandler+0x126>
 80037de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037e2:	f003 0320 	and.w	r3, r3, #32
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d105      	bne.n	80037f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d005      	beq.n	8003802 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fa:	f043 0208 	orr.w	r2, r3, #8
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 81f2 	beq.w	8003bf0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800380c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003810:	f003 0320 	and.w	r3, r3, #32
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_UART_IRQHandler+0x14e>
 8003818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800381c:	f003 0320 	and.w	r3, r3, #32
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 fb8c 	bl	8003f42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003834:	2b00      	cmp	r3, #0
 8003836:	bf14      	ite	ne
 8003838:	2301      	movne	r3, #1
 800383a:	2300      	moveq	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b00      	cmp	r3, #0
 800384c:	d103      	bne.n	8003856 <HAL_UART_IRQHandler+0x17a>
 800384e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003852:	2b00      	cmp	r3, #0
 8003854:	d04f      	beq.n	80038f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fa96 	bl	8003d88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d041      	beq.n	80038ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	3314      	adds	r3, #20
 8003870:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003874:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003878:	e853 3f00 	ldrex	r3, [r3]
 800387c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003880:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003884:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003888:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3314      	adds	r3, #20
 8003892:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003896:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800389a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80038a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80038a6:	e841 2300 	strex	r3, r2, [r1]
 80038aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80038ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1d9      	bne.n	800386a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d013      	beq.n	80038e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c2:	4a7e      	ldr	r2, [pc, #504]	@ (8003abc <HAL_UART_IRQHandler+0x3e0>)
 80038c4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fe fb54 	bl	8001f78 <HAL_DMA_Abort_IT>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d016      	beq.n	8003904 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038e0:	4610      	mov	r0, r2
 80038e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e4:	e00e      	b.n	8003904 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f993 	bl	8003c12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ec:	e00a      	b.n	8003904 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f98f 	bl	8003c12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f4:	e006      	b.n	8003904 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f98b 	bl	8003c12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003902:	e175      	b.n	8003bf0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003904:	bf00      	nop
    return;
 8003906:	e173      	b.n	8003bf0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390c:	2b01      	cmp	r3, #1
 800390e:	f040 814f 	bne.w	8003bb0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003916:	f003 0310 	and.w	r3, r3, #16
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 8148 	beq.w	8003bb0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003924:	f003 0310 	and.w	r3, r3, #16
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 8141 	beq.w	8003bb0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800392e:	2300      	movs	r3, #0
 8003930:	60bb      	str	r3, [r7, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	60bb      	str	r3, [r7, #8]
 8003942:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 80b6 	beq.w	8003ac0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003960:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 8145 	beq.w	8003bf4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800396e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003972:	429a      	cmp	r2, r3
 8003974:	f080 813e 	bcs.w	8003bf4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800397e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	2b20      	cmp	r3, #32
 8003988:	f000 8088 	beq.w	8003a9c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	330c      	adds	r3, #12
 8003992:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003996:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800399a:	e853 3f00 	ldrex	r3, [r3]
 800399e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80039a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	330c      	adds	r3, #12
 80039b4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80039b8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80039c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039c8:	e841 2300 	strex	r3, r2, [r1]
 80039cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80039d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1d9      	bne.n	800398c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3314      	adds	r3, #20
 80039de:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039e2:	e853 3f00 	ldrex	r3, [r3]
 80039e6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80039e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039ea:	f023 0301 	bic.w	r3, r3, #1
 80039ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3314      	adds	r3, #20
 80039f8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80039fc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a00:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a02:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a04:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a08:	e841 2300 	strex	r3, r2, [r1]
 8003a0c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1e1      	bne.n	80039d8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3314      	adds	r3, #20
 8003a1a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a1e:	e853 3f00 	ldrex	r3, [r3]
 8003a22:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3314      	adds	r3, #20
 8003a34:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a38:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a3a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a3e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a40:	e841 2300 	strex	r3, r2, [r1]
 8003a44:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1e3      	bne.n	8003a14 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	330c      	adds	r3, #12
 8003a60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a64:	e853 3f00 	ldrex	r3, [r3]
 8003a68:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a6c:	f023 0310 	bic.w	r3, r3, #16
 8003a70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	330c      	adds	r3, #12
 8003a7a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003a7e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a80:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a86:	e841 2300 	strex	r3, r2, [r1]
 8003a8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1e3      	bne.n	8003a5a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fe fa33 	bl	8001f02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f8b6 	bl	8003c24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ab8:	e09c      	b.n	8003bf4 <HAL_UART_IRQHandler+0x518>
 8003aba:	bf00      	nop
 8003abc:	08003e4d 	.word	0x08003e4d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 808e 	beq.w	8003bf8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003adc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 8089 	beq.w	8003bf8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	330c      	adds	r3, #12
 8003aec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af0:	e853 3f00 	ldrex	r3, [r3]
 8003af4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003af8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003afc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	330c      	adds	r3, #12
 8003b06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003b0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b12:	e841 2300 	strex	r3, r2, [r1]
 8003b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1e3      	bne.n	8003ae6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	3314      	adds	r3, #20
 8003b24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b28:	e853 3f00 	ldrex	r3, [r3]
 8003b2c:	623b      	str	r3, [r7, #32]
   return(result);
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	f023 0301 	bic.w	r3, r3, #1
 8003b34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3314      	adds	r3, #20
 8003b3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b42:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b4a:	e841 2300 	strex	r3, r2, [r1]
 8003b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1e3      	bne.n	8003b1e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	330c      	adds	r3, #12
 8003b6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0310 	bic.w	r3, r3, #16
 8003b7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	330c      	adds	r3, #12
 8003b84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003b88:	61fa      	str	r2, [r7, #28]
 8003b8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8c:	69b9      	ldr	r1, [r7, #24]
 8003b8e:	69fa      	ldr	r2, [r7, #28]
 8003b90:	e841 2300 	strex	r3, r2, [r1]
 8003b94:	617b      	str	r3, [r7, #20]
   return(result);
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1e3      	bne.n	8003b64 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ba2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f83b 	bl	8003c24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bae:	e023      	b.n	8003bf8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d009      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x4f4>
 8003bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f953 	bl	8003e74 <UART_Transmit_IT>
    return;
 8003bce:	e014      	b.n	8003bfa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00e      	beq.n	8003bfa <HAL_UART_IRQHandler+0x51e>
 8003bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d008      	beq.n	8003bfa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f992 	bl	8003f12 <UART_EndTransmit_IT>
    return;
 8003bee:	e004      	b.n	8003bfa <HAL_UART_IRQHandler+0x51e>
    return;
 8003bf0:	bf00      	nop
 8003bf2:	e002      	b.n	8003bfa <HAL_UART_IRQHandler+0x51e>
      return;
 8003bf4:	bf00      	nop
 8003bf6:	e000      	b.n	8003bfa <HAL_UART_IRQHandler+0x51e>
      return;
 8003bf8:	bf00      	nop
  }
}
 8003bfa:	37e8      	adds	r7, #232	@ 0xe8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr

08003c12 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr

08003c24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc80      	pop	{r7}
 8003c38:	4770      	bx	lr

08003c3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b090      	sub	sp, #64	@ 0x40
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	60f8      	str	r0, [r7, #12]
 8003c42:	60b9      	str	r1, [r7, #8]
 8003c44:	603b      	str	r3, [r7, #0]
 8003c46:	4613      	mov	r3, r2
 8003c48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c4a:	e050      	b.n	8003cee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c52:	d04c      	beq.n	8003cee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d007      	beq.n	8003c6a <UART_WaitOnFlagUntilTimeout+0x30>
 8003c5a:	f7fd f9e1 	bl	8001020 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d241      	bcs.n	8003cee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	330c      	adds	r3, #12
 8003c70:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c74:	e853 3f00 	ldrex	r3, [r3]
 8003c78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	330c      	adds	r3, #12
 8003c88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c8a:	637a      	str	r2, [r7, #52]	@ 0x34
 8003c8c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c92:	e841 2300 	strex	r3, r2, [r1]
 8003c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1e5      	bne.n	8003c6a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3314      	adds	r3, #20
 8003ca4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	e853 3f00 	ldrex	r3, [r3]
 8003cac:	613b      	str	r3, [r7, #16]
   return(result);
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f023 0301 	bic.w	r3, r3, #1
 8003cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	3314      	adds	r3, #20
 8003cbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003cbe:	623a      	str	r2, [r7, #32]
 8003cc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc2:	69f9      	ldr	r1, [r7, #28]
 8003cc4:	6a3a      	ldr	r2, [r7, #32]
 8003cc6:	e841 2300 	strex	r3, r2, [r1]
 8003cca:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1e5      	bne.n	8003c9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e00f      	b.n	8003d0e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	bf0c      	ite	eq
 8003cfe:	2301      	moveq	r3, #1
 8003d00:	2300      	movne	r3, #0
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	461a      	mov	r2, r3
 8003d06:	79fb      	ldrb	r3, [r7, #7]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d09f      	beq.n	8003c4c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3740      	adds	r7, #64	@ 0x40
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b085      	sub	sp, #20
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	60f8      	str	r0, [r7, #12]
 8003d1e:	60b9      	str	r1, [r7, #8]
 8003d20:	4613      	mov	r3, r2
 8003d22:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	88fa      	ldrh	r2, [r7, #6]
 8003d2e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	88fa      	ldrh	r2, [r7, #6]
 8003d34:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2222      	movs	r2, #34	@ 0x22
 8003d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d007      	beq.n	8003d5c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d5a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695a      	ldr	r2, [r3, #20]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0220 	orr.w	r2, r2, #32
 8003d7a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr

08003d88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b095      	sub	sp, #84	@ 0x54
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	330c      	adds	r3, #12
 8003d96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d9a:	e853 3f00 	ldrex	r3, [r3]
 8003d9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003da6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	330c      	adds	r3, #12
 8003dae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003db0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003db6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003db8:	e841 2300 	strex	r3, r2, [r1]
 8003dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1e5      	bne.n	8003d90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3314      	adds	r3, #20
 8003dca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	e853 3f00 	ldrex	r3, [r3]
 8003dd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f023 0301 	bic.w	r3, r3, #1
 8003dda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3314      	adds	r3, #20
 8003de2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003de4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003de6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dec:	e841 2300 	strex	r3, r2, [r1]
 8003df0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e5      	bne.n	8003dc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d119      	bne.n	8003e34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	330c      	adds	r3, #12
 8003e06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	e853 3f00 	ldrex	r3, [r3]
 8003e0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f023 0310 	bic.w	r3, r3, #16
 8003e16:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	330c      	adds	r3, #12
 8003e1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e20:	61ba      	str	r2, [r7, #24]
 8003e22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e24:	6979      	ldr	r1, [r7, #20]
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	e841 2300 	strex	r3, r2, [r1]
 8003e2c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1e5      	bne.n	8003e00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e42:	bf00      	nop
 8003e44:	3754      	adds	r7, #84	@ 0x54
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr

08003e4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f7ff fed3 	bl	8003c12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e6c:	bf00      	nop
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b21      	cmp	r3, #33	@ 0x21
 8003e86:	d13e      	bne.n	8003f06 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e90:	d114      	bne.n	8003ebc <UART_Transmit_IT+0x48>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d110      	bne.n	8003ebc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	1c9a      	adds	r2, r3, #2
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	621a      	str	r2, [r3, #32]
 8003eba:	e008      	b.n	8003ece <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	1c59      	adds	r1, r3, #1
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6211      	str	r1, [r2, #32]
 8003ec6:	781a      	ldrb	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	4619      	mov	r1, r3
 8003edc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10f      	bne.n	8003f02 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ef0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	e000      	b.n	8003f08 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f06:	2302      	movs	r3, #2
  }
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr

08003f12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff fe64 	bl	8003c00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b08c      	sub	sp, #48	@ 0x30
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b22      	cmp	r3, #34	@ 0x22
 8003f54:	f040 80ae 	bne.w	80040b4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f60:	d117      	bne.n	8003f92 <UART_Receive_IT+0x50>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d113      	bne.n	8003f92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f72:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8a:	1c9a      	adds	r2, r3, #2
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f90:	e026      	b.n	8003fe0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fa4:	d007      	beq.n	8003fb6 <UART_Receive_IT+0x74>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10a      	bne.n	8003fc4 <UART_Receive_IT+0x82>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc0:	701a      	strb	r2, [r3, #0]
 8003fc2:	e008      	b.n	8003fd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	4619      	mov	r1, r3
 8003fee:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d15d      	bne.n	80040b0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0220 	bic.w	r2, r2, #32
 8004002:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004012:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695a      	ldr	r2, [r3, #20]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0201 	bic.w	r2, r2, #1
 8004022:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004036:	2b01      	cmp	r3, #1
 8004038:	d135      	bne.n	80040a6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	330c      	adds	r3, #12
 8004046:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	e853 3f00 	ldrex	r3, [r3]
 800404e:	613b      	str	r3, [r7, #16]
   return(result);
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f023 0310 	bic.w	r3, r3, #16
 8004056:	627b      	str	r3, [r7, #36]	@ 0x24
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	330c      	adds	r3, #12
 800405e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004060:	623a      	str	r2, [r7, #32]
 8004062:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004064:	69f9      	ldr	r1, [r7, #28]
 8004066:	6a3a      	ldr	r2, [r7, #32]
 8004068:	e841 2300 	strex	r3, r2, [r1]
 800406c:	61bb      	str	r3, [r7, #24]
   return(result);
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1e5      	bne.n	8004040 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0310 	and.w	r3, r3, #16
 800407e:	2b10      	cmp	r3, #16
 8004080:	d10a      	bne.n	8004098 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004082:	2300      	movs	r3, #0
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800409c:	4619      	mov	r1, r3
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7ff fdc0 	bl	8003c24 <HAL_UARTEx_RxEventCallback>
 80040a4:	e002      	b.n	80040ac <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 fa74 	bl	8004594 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	e002      	b.n	80040b6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	e000      	b.n	80040b6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80040b4:	2302      	movs	r3, #2
  }
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3730      	adds	r7, #48	@ 0x30
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80040fa:	f023 030c 	bic.w	r3, r3, #12
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6812      	ldr	r2, [r2, #0]
 8004102:	68b9      	ldr	r1, [r7, #8]
 8004104:	430b      	orrs	r3, r1
 8004106:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699a      	ldr	r2, [r3, #24]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a2c      	ldr	r2, [pc, #176]	@ (80041d4 <UART_SetConfig+0x114>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d103      	bne.n	8004130 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004128:	f7fe fd82 	bl	8002c30 <HAL_RCC_GetPCLK2Freq>
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	e002      	b.n	8004136 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004130:	f7fe fd6a 	bl	8002c08 <HAL_RCC_GetPCLK1Freq>
 8004134:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4613      	mov	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	009a      	lsls	r2, r3, #2
 8004140:	441a      	add	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	fbb2 f3f3 	udiv	r3, r2, r3
 800414c:	4a22      	ldr	r2, [pc, #136]	@ (80041d8 <UART_SetConfig+0x118>)
 800414e:	fba2 2303 	umull	r2, r3, r2, r3
 8004152:	095b      	lsrs	r3, r3, #5
 8004154:	0119      	lsls	r1, r3, #4
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	009a      	lsls	r2, r3, #2
 8004160:	441a      	add	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	fbb2 f2f3 	udiv	r2, r2, r3
 800416c:	4b1a      	ldr	r3, [pc, #104]	@ (80041d8 <UART_SetConfig+0x118>)
 800416e:	fba3 0302 	umull	r0, r3, r3, r2
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	2064      	movs	r0, #100	@ 0x64
 8004176:	fb00 f303 	mul.w	r3, r0, r3
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	3332      	adds	r3, #50	@ 0x32
 8004180:	4a15      	ldr	r2, [pc, #84]	@ (80041d8 <UART_SetConfig+0x118>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800418c:	4419      	add	r1, r3
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	4613      	mov	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	009a      	lsls	r2, r3, #2
 8004198:	441a      	add	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80041a4:	4b0c      	ldr	r3, [pc, #48]	@ (80041d8 <UART_SetConfig+0x118>)
 80041a6:	fba3 0302 	umull	r0, r3, r3, r2
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	2064      	movs	r0, #100	@ 0x64
 80041ae:	fb00 f303 	mul.w	r3, r0, r3
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	3332      	adds	r3, #50	@ 0x32
 80041b8:	4a07      	ldr	r2, [pc, #28]	@ (80041d8 <UART_SetConfig+0x118>)
 80041ba:	fba2 2303 	umull	r2, r3, r2, r3
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	f003 020f 	and.w	r2, r3, #15
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	440a      	add	r2, r1
 80041ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80041cc:	bf00      	nop
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40013800 	.word	0x40013800
 80041d8:	51eb851f 	.word	0x51eb851f

080041dc <NextionAddComp>:
 */

#include "Nextion.h"

uint8_t NextionAddComp(Nextion* nex, NexComp* _nexcomp, char* objectname, uint8_t __page, uint8_t __id, void (*callbackFuncOnPress)(), void (*callbackFuncOnRelease)())
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	70fb      	strb	r3, [r7, #3]
	//Make space before passing the object name to the nexcomp struct
	_nexcomp->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fb ffae 	bl	800014c <strlen>
 80041f0:	4603      	mov	r3, r0
 80041f2:	3301      	adds	r3, #1
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 fc95 	bl	8004b24 <malloc>
 80041fa:	4603      	mov	r3, r0
 80041fc:	461a      	mov	r2, r3
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	60da      	str	r2, [r3, #12]
	//Pass the object name to the struct
	strcpy(_nexcomp->objname, objectname);
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	4618      	mov	r0, r3
 800420a:	f000 fda5 	bl	8004d58 <strcpy>

	//Pass the corresponding data from component to component struct
	_nexcomp->_id = __id;
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	7e3a      	ldrb	r2, [r7, #24]
 8004212:	705a      	strb	r2, [r3, #1]
	_nexcomp->_page = __page;
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	78fa      	ldrb	r2, [r7, #3]
 8004218:	701a      	strb	r2, [r3, #0]

	//Add the component struct to the list on the Nextion Struct
	nex->_NexCompArr[nex->_NexCompCount] = _nexcomp;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004220:	461a      	mov	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	321a      	adds	r2, #26
 8004226:	68b9      	ldr	r1, [r7, #8]
 8004228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nex->_NexCompCount++;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004232:	3301      	adds	r3, #1
 8004234:	b2da      	uxtb	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

	//Bind the correct callback functions together
	_nexcomp->callbackOnPress = callbackFuncOnPress;
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	605a      	str	r2, [r3, #4]
	_nexcomp->callbackOnRelease = callbackFuncOnRelease;
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	6a3a      	ldr	r2, [r7, #32]
 8004246:	609a      	str	r2, [r3, #8]

	//Return OK
	return 0;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <NextionInit>:

uint8_t NextionInit(Nextion *nex, UART_HandleTypeDef *nextionUARTHandle)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b082      	sub	sp, #8
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	6039      	str	r1, [r7, #0]
	//Pass the used UART handle to the struct
	nex->nextionUARTHandle = nextionUARTHandle;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	601a      	str	r2, [r3, #0]

	//Start the parsing counters from zero
	nex->_arrCount = 0;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
	nex->_pkgCount = 0;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66

	//Start UART transaction using DMA
	HAL_UART_Receive_IT(nex->nextionUARTHandle, (uint8_t *)&nex->_RxData, 1);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6818      	ldr	r0, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3364      	adds	r3, #100	@ 0x64
 800427a:	2201      	movs	r2, #1
 800427c:	4619      	mov	r1, r3
 800427e:	f7ff fa08 	bl	8003692 <HAL_UART_Receive_IT>

	//Start the component count variable from zero
	nex->_NexCompCount  = 0;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

	//Return OK
	return 0;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <NextionUpdate>:

uint8_t NextionUpdate(UART_HandleTypeDef *huart, Nextion *nex)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
	if(huart->Instance == (nex->nextionUARTHandle->Instance))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	f040 80d9 	bne.w	8004460 <NextionUpdate+0x1cc>
	{
		//Add the received byte to the array and increment the counter afterwards
		nex->_RxDataArr[nex->_arrCount] = nex->_RxData;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 80042b4:	4619      	mov	r1, r3
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	f893 2064 	ldrb.w	r2, [r3, #100]	@ 0x64
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	440b      	add	r3, r1
 80042c0:	711a      	strb	r2, [r3, #4]
		nex->_arrCount++;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 80042c8:	3301      	adds	r3, #1
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65

		//Count 0xFF
		if(nex->_RxData == 0xFF)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80042d8:	2bff      	cmp	r3, #255	@ 0xff
 80042da:	d108      	bne.n	80042ee <NextionUpdate+0x5a>
			nex->_pkgCount++;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 80042e2:	3301      	adds	r3, #1
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
 80042ec:	e003      	b.n	80042f6 <NextionUpdate+0x62>
		else
			nex->_pkgCount = 0;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66

		//Assume a package is received after three 0xFF commands,
		//and start processing the data
		if(nex->_pkgCount == 3)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 80042fc:	2b03      	cmp	r3, #3
 80042fe:	f040 80a7 	bne.w	8004450 <NextionUpdate+0x1bc>
		{
			//Determine the length (count) of the data
			uint8_t count = 0, FFCount = 0;
 8004302:	2300      	movs	r3, #0
 8004304:	73fb      	strb	r3, [r7, #15]
 8004306:	2300      	movs	r3, #0
 8004308:	73bb      	strb	r3, [r7, #14]
			for(uint8_t i = 0; FFCount < 3; i++)
 800430a:	2300      	movs	r3, #0
 800430c:	737b      	strb	r3, [r7, #13]
 800430e:	e00e      	b.n	800432e <NextionUpdate+0x9a>
			{
				count++;
 8004310:	7bfb      	ldrb	r3, [r7, #15]
 8004312:	3301      	adds	r3, #1
 8004314:	73fb      	strb	r3, [r7, #15]
				if(nex->_RxDataArr[i] == 0xFF) FFCount++;
 8004316:	7b7b      	ldrb	r3, [r7, #13]
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	4413      	add	r3, r2
 800431c:	791b      	ldrb	r3, [r3, #4]
 800431e:	2bff      	cmp	r3, #255	@ 0xff
 8004320:	d102      	bne.n	8004328 <NextionUpdate+0x94>
 8004322:	7bbb      	ldrb	r3, [r7, #14]
 8004324:	3301      	adds	r3, #1
 8004326:	73bb      	strb	r3, [r7, #14]
			for(uint8_t i = 0; FFCount < 3; i++)
 8004328:	7b7b      	ldrb	r3, [r7, #13]
 800432a:	3301      	adds	r3, #1
 800432c:	737b      	strb	r3, [r7, #13]
 800432e:	7bbb      	ldrb	r3, [r7, #14]
 8004330:	2b02      	cmp	r3, #2
 8004332:	d9ed      	bls.n	8004310 <NextionUpdate+0x7c>
			}

			//In case of a touch event call the callback function accordingly,
			if(nex->_RxDataArr[0] == NEX_RET_EVENT_TOUCH_HEAD)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	791b      	ldrb	r3, [r3, #4]
 8004338:	2b65      	cmp	r3, #101	@ 0x65
 800433a:	d145      	bne.n	80043c8 <NextionUpdate+0x134>
			{
				//Loop through the component struct array,
				for(uint8_t i = 0; i < nex->_NexCompCount; i++)
 800433c:	2300      	movs	r3, #0
 800433e:	733b      	strb	r3, [r7, #12]
 8004340:	e03c      	b.n	80043bc <NextionUpdate+0x128>
				{
					//Detect the affected component by its Page and ID
					if( (nex->_RxDataArr[2] == (nex->_NexCompArr[i]->_id)) && (nex->_RxDataArr[1] == (nex->_NexCompArr[i]->_page)) )
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	799a      	ldrb	r2, [r3, #6]
 8004346:	7b39      	ldrb	r1, [r7, #12]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	311a      	adds	r1, #26
 800434c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004350:	785b      	ldrb	r3, [r3, #1]
 8004352:	429a      	cmp	r2, r3
 8004354:	d12f      	bne.n	80043b6 <NextionUpdate+0x122>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	795a      	ldrb	r2, [r3, #5]
 800435a:	7b39      	ldrb	r1, [r7, #12]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	311a      	adds	r1, #26
 8004360:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d125      	bne.n	80043b6 <NextionUpdate+0x122>
					{
						//Call the desired On Press or On Release callback function,
						if((nex->_RxDataArr[3] == NEX_EVENT_ON_PRESS) && (nex->_NexCompArr[i]->callbackOnPress != NULL))
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	79db      	ldrb	r3, [r3, #7]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d10e      	bne.n	8004390 <NextionUpdate+0xfc>
 8004372:	7b3a      	ldrb	r2, [r7, #12]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	321a      	adds	r2, #26
 8004378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d006      	beq.n	8004390 <NextionUpdate+0xfc>
							nex->_NexCompArr[i]->callbackOnPress();
 8004382:	7b3a      	ldrb	r2, [r7, #12]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	321a      	adds	r2, #26
 8004388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	4798      	blx	r3
						if((nex->_RxDataArr[3] == NEX_EVENT_ON_RELEASE) && (nex->_NexCompArr[i]->callbackOnRelease != NULL))
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	79db      	ldrb	r3, [r3, #7]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10e      	bne.n	80043b6 <NextionUpdate+0x122>
 8004398:	7b3a      	ldrb	r2, [r7, #12]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	321a      	adds	r2, #26
 800439e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d006      	beq.n	80043b6 <NextionUpdate+0x122>
							nex->_NexCompArr[i]->callbackOnRelease();
 80043a8:	7b3a      	ldrb	r2, [r7, #12]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	321a      	adds	r2, #26
 80043ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	4798      	blx	r3
				for(uint8_t i = 0; i < nex->_NexCompCount; i++)
 80043b6:	7b3b      	ldrb	r3, [r7, #12]
 80043b8:	3301      	adds	r3, #1
 80043ba:	733b      	strb	r3, [r7, #12]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80043c2:	7b3a      	ldrb	r2, [r7, #12]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d3bc      	bcc.n	8004342 <NextionUpdate+0xae>
					}
				}
			}

			//If the received package contains string data
			if(nex->_RxDataArr[0] == NEX_RET_STRING_HEAD)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	791b      	ldrb	r3, [r3, #4]
 80043cc:	2b70      	cmp	r3, #112	@ 0x70
 80043ce:	d121      	bne.n	8004414 <NextionUpdate+0x180>
			{
				nex->NextTextLen = 0;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9
				for(int i = 0; i < (count - 4); i++)
 80043d8:	2300      	movs	r3, #0
 80043da:	60bb      	str	r3, [r7, #8]
 80043dc:	e015      	b.n	800440a <NextionUpdate+0x176>
				{
					nex->NexTextBuff[i] = nex->_RxDataArr[i+1];
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	3301      	adds	r3, #1
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	4413      	add	r3, r2
 80043e6:	7919      	ldrb	r1, [r3, #4]
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	4413      	add	r3, r2
 80043ee:	3399      	adds	r3, #153	@ 0x99
 80043f0:	460a      	mov	r2, r1
 80043f2:	701a      	strb	r2, [r3, #0]
					nex->NextTextLen++;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	f893 30d9 	ldrb.w	r3, [r3, #217]	@ 0xd9
 80043fa:	3301      	adds	r3, #1
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9
				for(int i = 0; i < (count - 4); i++)
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	3301      	adds	r3, #1
 8004408:	60bb      	str	r3, [r7, #8]
 800440a:	7bfb      	ldrb	r3, [r7, #15]
 800440c:	3b04      	subs	r3, #4
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	429a      	cmp	r2, r3
 8004412:	dbe4      	blt.n	80043de <NextionUpdate+0x14a>
				}
			}

			//If the received package contains integer data
			if(nex->_RxDataArr[0] == NEX_RET_NUMBER_HEAD)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	791b      	ldrb	r3, [r3, #4]
 8004418:	2b71      	cmp	r3, #113	@ 0x71
 800441a:	d111      	bne.n	8004440 <NextionUpdate+0x1ac>
			{
				nex->NextNumBuff = ((uint32_t)nex->_RxDataArr[4]<<24)|((uint32_t)nex->_RxDataArr[3]<<16)|(nex->_RxDataArr[2]<<8)|(nex->_RxDataArr[1]);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	7a1b      	ldrb	r3, [r3, #8]
 8004420:	061a      	lsls	r2, r3, #24
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	79db      	ldrb	r3, [r3, #7]
 8004426:	041b      	lsls	r3, r3, #16
 8004428:	431a      	orrs	r2, r3
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	799b      	ldrb	r3, [r3, #6]
 800442e:	021b      	lsls	r3, r3, #8
 8004430:	4313      	orrs	r3, r2
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	7952      	ldrb	r2, [r2, #5]
 8004436:	4313      	orrs	r3, r2
 8004438:	461a      	mov	r2, r3
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
			}

			//Reset the buffer counters
			nex->_pkgCount = 0;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
			nex->_arrCount = 0;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
		}

		HAL_UART_Receive_IT(nex->nextionUARTHandle, (uint8_t *)&nex->_RxData, 1);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	6818      	ldr	r0, [r3, #0]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	3364      	adds	r3, #100	@ 0x64
 8004458:	2201      	movs	r2, #1
 800445a:	4619      	mov	r1, r3
 800445c:	f7ff f919 	bl	8003692 <HAL_UART_Receive_IT>
	}

	//Return OK
	return 0;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <NextionSetText>:
	//Return OK
	return 0;
}

uint8_t NextionSetText(Nextion *nex, NexComp *comp, char *usertext)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b094      	sub	sp, #80	@ 0x50
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
	//Allocate a static buffer for combining the transfer command string
	char transmitBuff[NEXTION_TEXT_BUFF_LEN] = {0};
 8004478:	2300      	movs	r3, #0
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	f107 0314 	add.w	r3, r7, #20
 8004480:	223c      	movs	r2, #60	@ 0x3c
 8004482:	2100      	movs	r1, #0
 8004484:	4618      	mov	r0, r3
 8004486:	f000 fc23 	bl	8004cd0 <memset>

	//Combine required commands in a single string
	sprintf(transmitBuff, "%s.txt=\"%s\"", comp->objname, usertext);
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	f107 0010 	add.w	r0, r7, #16
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4906      	ldr	r1, [pc, #24]	@ (80044b0 <NextionSetText+0x44>)
 8004496:	f000 fbfb 	bl	8004c90 <siprintf>

	//Send the combined command to Nextion and wait for the received answer
	NextionSendCommand(nex, transmitBuff);
 800449a:	f107 0310 	add.w	r3, r7, #16
 800449e:	4619      	mov	r1, r3
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 f82b 	bl	80044fc <NextionSendCommand>

	//Return OK
	return 0;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3750      	adds	r7, #80	@ 0x50
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	080054fc 	.word	0x080054fc

080044b4 <NextionSetVal>:
	//Return OK
	return 0;
}

uint8_t NextionSetVal(Nextion *nex, NexComp *comp, int userval)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b094      	sub	sp, #80	@ 0x50
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
	//Allocate a static buffer for combining the transfer command string
	char transmitBuff[NEXTION_TEXT_BUFF_LEN] = {0};
 80044c0:	2300      	movs	r3, #0
 80044c2:	613b      	str	r3, [r7, #16]
 80044c4:	f107 0314 	add.w	r3, r7, #20
 80044c8:	223c      	movs	r2, #60	@ 0x3c
 80044ca:	2100      	movs	r1, #0
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 fbff 	bl	8004cd0 <memset>

	//Combine required commands in a single string
	sprintf(transmitBuff, "%s.val=%d", comp->objname, userval);
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	f107 0010 	add.w	r0, r7, #16
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4906      	ldr	r1, [pc, #24]	@ (80044f8 <NextionSetVal+0x44>)
 80044de:	f000 fbd7 	bl	8004c90 <siprintf>

	//Send the combined command to Nextion and wait for the received answer
	NextionSendCommand(nex, transmitBuff);
 80044e2:	f107 0310 	add.w	r3, r7, #16
 80044e6:	4619      	mov	r1, r3
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 f807 	bl	80044fc <NextionSendCommand>

	//Return OK
	return 0;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3750      	adds	r7, #80	@ 0x50
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	08005514 	.word	0x08005514

080044fc <NextionSendCommand>:

char ENDTERMS[]={255,255,255};
uint8_t NextionSendCommand(Nextion *nex, char *_command)
{
 80044fc:	b590      	push	{r4, r7, lr}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(nex->nextionUARTHandle, (uint8_t *)_command, strlen((const char*)_command), NEXTION_TIMEOUT);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681c      	ldr	r4, [r3, #0]
 800450a:	6838      	ldr	r0, [r7, #0]
 800450c:	f7fb fe1e 	bl	800014c <strlen>
 8004510:	4603      	mov	r3, r0
 8004512:	b29a      	uxth	r2, r3
 8004514:	23fa      	movs	r3, #250	@ 0xfa
 8004516:	6839      	ldr	r1, [r7, #0]
 8004518:	4620      	mov	r0, r4
 800451a:	f7ff f837 	bl	800358c <HAL_UART_Transmit>
	NextionEndCommand(nex);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f806 	bl	8004530 <NextionEndCommand>

	//Return OK
	return 0;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	bd90      	pop	{r4, r7, pc}
	...

08004530 <NextionEndCommand>:

uint8_t NextionEndCommand(Nextion *nex)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
	uint8_t EndCommand[3] = {255, 255, 255};
 8004538:	4a0c      	ldr	r2, [pc, #48]	@ (800456c <NextionEndCommand+0x3c>)
 800453a:	f107 030c 	add.w	r3, r7, #12
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	4611      	mov	r1, r2
 8004542:	8019      	strh	r1, [r3, #0]
 8004544:	3302      	adds	r3, #2
 8004546:	0c12      	lsrs	r2, r2, #16
 8004548:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(nex->nextionUARTHandle, EndCommand, 3, NEXTION_TIMEOUT);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	f107 010c 	add.w	r1, r7, #12
 8004552:	23fa      	movs	r3, #250	@ 0xfa
 8004554:	2203      	movs	r2, #3
 8004556:	f7ff f819 	bl	800358c <HAL_UART_Transmit>
	NextionRestartIT(nex);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f808 	bl	8004570 <NextionRestartIT>

	//Return OK
	return 0;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	08005520 	.word	0x08005520

08004570 <NextionRestartIT>:

//Following two functions are not needed anymore and will be removed in the future,
uint8_t NextionRestartIT(Nextion *nex)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(nex->nextionUARTHandle, (uint8_t *)&nex->_RxData, 1);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6818      	ldr	r0, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	3364      	adds	r3, #100	@ 0x64
 8004580:	2201      	movs	r2, #1
 8004582:	4619      	mov	r1, r3
 8004584:	f7ff f885 	bl	8003692 <HAL_UART_Receive_IT>

	//Return OK
	return 0;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <HAL_UART_RxCpltCallback>:
static NexComp min_cellt_label;
static NexComp min_cellt_id_label;

static NexComp comm_status_label;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]

	NextionUpdate(huart, &nextion_instance);
 800459c:	4903      	ldr	r1, [pc, #12]	@ (80045ac <HAL_UART_RxCpltCallback+0x18>)
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7ff fe78 	bl	8004294 <NextionUpdate>
}
 80045a4:	bf00      	nop
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	200002a8 	.word	0x200002a8

080045b0 <nextion_disp_init>:

void nextion_disp_init(void) {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af04      	add	r7, sp, #16
	NextionInit(&nextion_instance, &huart1);
 80045b6:	494b      	ldr	r1, [pc, #300]	@ (80046e4 <nextion_disp_init+0x134>)
 80045b8:	484b      	ldr	r0, [pc, #300]	@ (80046e8 <nextion_disp_init+0x138>)
 80045ba:	f7ff fe4a 	bl	8004252 <NextionInit>

	NextionAddComp(&nextion_instance, &batt_volt_label, "home.batt_volt", 1, 15,
 80045be:	2300      	movs	r3, #0
 80045c0:	9302      	str	r3, [sp, #8]
 80045c2:	2300      	movs	r3, #0
 80045c4:	9301      	str	r3, [sp, #4]
 80045c6:	230f      	movs	r3, #15
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	2301      	movs	r3, #1
 80045cc:	4a47      	ldr	r2, [pc, #284]	@ (80046ec <nextion_disp_init+0x13c>)
 80045ce:	4948      	ldr	r1, [pc, #288]	@ (80046f0 <nextion_disp_init+0x140>)
 80045d0:	4845      	ldr	r0, [pc, #276]	@ (80046e8 <nextion_disp_init+0x138>)
 80045d2:	f7ff fe03 	bl	80041dc <NextionAddComp>
	NULL, NULL);
	NextionAddComp(&nextion_instance, &batt_curr_label, "home.batt_curr", 1, 17, NULL,
 80045d6:	2300      	movs	r3, #0
 80045d8:	9302      	str	r3, [sp, #8]
 80045da:	2300      	movs	r3, #0
 80045dc:	9301      	str	r3, [sp, #4]
 80045de:	2311      	movs	r3, #17
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	2301      	movs	r3, #1
 80045e4:	4a43      	ldr	r2, [pc, #268]	@ (80046f4 <nextion_disp_init+0x144>)
 80045e6:	4944      	ldr	r1, [pc, #272]	@ (80046f8 <nextion_disp_init+0x148>)
 80045e8:	483f      	ldr	r0, [pc, #252]	@ (80046e8 <nextion_disp_init+0x138>)
 80045ea:	f7ff fdf7 	bl	80041dc <NextionAddComp>
	NULL);
	NextionAddComp(&nextion_instance, &batt_soc_label, "home.batt_soc", 1, 18, NULL, NULL);
 80045ee:	2300      	movs	r3, #0
 80045f0:	9302      	str	r3, [sp, #8]
 80045f2:	2300      	movs	r3, #0
 80045f4:	9301      	str	r3, [sp, #4]
 80045f6:	2312      	movs	r3, #18
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	2301      	movs	r3, #1
 80045fc:	4a3f      	ldr	r2, [pc, #252]	@ (80046fc <nextion_disp_init+0x14c>)
 80045fe:	4940      	ldr	r1, [pc, #256]	@ (8004700 <nextion_disp_init+0x150>)
 8004600:	4839      	ldr	r0, [pc, #228]	@ (80046e8 <nextion_disp_init+0x138>)
 8004602:	f7ff fdeb 	bl	80041dc <NextionAddComp>

	NextionAddComp(&nextion_instance, &soc_bar_label, "home.soc_bar", 1, 4, NULL,
 8004606:	2300      	movs	r3, #0
 8004608:	9302      	str	r3, [sp, #8]
 800460a:	2300      	movs	r3, #0
 800460c:	9301      	str	r3, [sp, #4]
 800460e:	2304      	movs	r3, #4
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	2301      	movs	r3, #1
 8004614:	4a3b      	ldr	r2, [pc, #236]	@ (8004704 <nextion_disp_init+0x154>)
 8004616:	493c      	ldr	r1, [pc, #240]	@ (8004708 <nextion_disp_init+0x158>)
 8004618:	4833      	ldr	r0, [pc, #204]	@ (80046e8 <nextion_disp_init+0x138>)
 800461a:	f7ff fddf 	bl	80041dc <NextionAddComp>
	NULL);
	NextionAddComp(&nextion_instance, &batt_status_label, "home.batt_status", 1, 19, NULL,
 800461e:	2300      	movs	r3, #0
 8004620:	9302      	str	r3, [sp, #8]
 8004622:	2300      	movs	r3, #0
 8004624:	9301      	str	r3, [sp, #4]
 8004626:	2313      	movs	r3, #19
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	2301      	movs	r3, #1
 800462c:	4a37      	ldr	r2, [pc, #220]	@ (800470c <nextion_disp_init+0x15c>)
 800462e:	4938      	ldr	r1, [pc, #224]	@ (8004710 <nextion_disp_init+0x160>)
 8004630:	482d      	ldr	r0, [pc, #180]	@ (80046e8 <nextion_disp_init+0x138>)
 8004632:	f7ff fdd3 	bl	80041dc <NextionAddComp>
	NULL);



	NextionAddComp(&nextion_instance, &comm_status_label, "home.comm_status", 3, 4, NULL,
 8004636:	2300      	movs	r3, #0
 8004638:	9302      	str	r3, [sp, #8]
 800463a:	2300      	movs	r3, #0
 800463c:	9301      	str	r3, [sp, #4]
 800463e:	2304      	movs	r3, #4
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	2303      	movs	r3, #3
 8004644:	4a33      	ldr	r2, [pc, #204]	@ (8004714 <nextion_disp_init+0x164>)
 8004646:	4934      	ldr	r1, [pc, #208]	@ (8004718 <nextion_disp_init+0x168>)
 8004648:	4827      	ldr	r0, [pc, #156]	@ (80046e8 <nextion_disp_init+0x138>)
 800464a:	f7ff fdc7 	bl	80041dc <NextionAddComp>
	NULL);
	NextionAddComp(&nextion_instance, &min_cellv_label, "page1.min_cellv", 5, 9, NULL,
 800464e:	2300      	movs	r3, #0
 8004650:	9302      	str	r3, [sp, #8]
 8004652:	2300      	movs	r3, #0
 8004654:	9301      	str	r3, [sp, #4]
 8004656:	2309      	movs	r3, #9
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	2305      	movs	r3, #5
 800465c:	4a2f      	ldr	r2, [pc, #188]	@ (800471c <nextion_disp_init+0x16c>)
 800465e:	4930      	ldr	r1, [pc, #192]	@ (8004720 <nextion_disp_init+0x170>)
 8004660:	4821      	ldr	r0, [pc, #132]	@ (80046e8 <nextion_disp_init+0x138>)
 8004662:	f7ff fdbb 	bl	80041dc <NextionAddComp>
	NULL);
	NextionAddComp(&nextion_instance, &min_cellv_id_label, "page1.min_cellv_id", 5, 10, NULL,
 8004666:	2300      	movs	r3, #0
 8004668:	9302      	str	r3, [sp, #8]
 800466a:	2300      	movs	r3, #0
 800466c:	9301      	str	r3, [sp, #4]
 800466e:	230a      	movs	r3, #10
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	2305      	movs	r3, #5
 8004674:	4a2b      	ldr	r2, [pc, #172]	@ (8004724 <nextion_disp_init+0x174>)
 8004676:	492c      	ldr	r1, [pc, #176]	@ (8004728 <nextion_disp_init+0x178>)
 8004678:	481b      	ldr	r0, [pc, #108]	@ (80046e8 <nextion_disp_init+0x138>)
 800467a:	f7ff fdaf 	bl	80041dc <NextionAddComp>
	NULL);

	NextionAddComp(&nextion_instance, &max_cellt_label, "page2.max_cellt", 6, 7, NULL,
 800467e:	2300      	movs	r3, #0
 8004680:	9302      	str	r3, [sp, #8]
 8004682:	2300      	movs	r3, #0
 8004684:	9301      	str	r3, [sp, #4]
 8004686:	2307      	movs	r3, #7
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	2306      	movs	r3, #6
 800468c:	4a27      	ldr	r2, [pc, #156]	@ (800472c <nextion_disp_init+0x17c>)
 800468e:	4928      	ldr	r1, [pc, #160]	@ (8004730 <nextion_disp_init+0x180>)
 8004690:	4815      	ldr	r0, [pc, #84]	@ (80046e8 <nextion_disp_init+0x138>)
 8004692:	f7ff fda3 	bl	80041dc <NextionAddComp>
	NULL);
	NextionAddComp(&nextion_instance, &max_cellt_id_label, "page2.max_cellt_id", 6, 8, NULL,
 8004696:	2300      	movs	r3, #0
 8004698:	9302      	str	r3, [sp, #8]
 800469a:	2300      	movs	r3, #0
 800469c:	9301      	str	r3, [sp, #4]
 800469e:	2308      	movs	r3, #8
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	2306      	movs	r3, #6
 80046a4:	4a23      	ldr	r2, [pc, #140]	@ (8004734 <nextion_disp_init+0x184>)
 80046a6:	4924      	ldr	r1, [pc, #144]	@ (8004738 <nextion_disp_init+0x188>)
 80046a8:	480f      	ldr	r0, [pc, #60]	@ (80046e8 <nextion_disp_init+0x138>)
 80046aa:	f7ff fd97 	bl	80041dc <NextionAddComp>
	NULL);
	NextionAddComp(&nextion_instance, &min_cellt_label, "page2.min_cellt", 6, 9, NULL,
 80046ae:	2300      	movs	r3, #0
 80046b0:	9302      	str	r3, [sp, #8]
 80046b2:	2300      	movs	r3, #0
 80046b4:	9301      	str	r3, [sp, #4]
 80046b6:	2309      	movs	r3, #9
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	2306      	movs	r3, #6
 80046bc:	4a1f      	ldr	r2, [pc, #124]	@ (800473c <nextion_disp_init+0x18c>)
 80046be:	4920      	ldr	r1, [pc, #128]	@ (8004740 <nextion_disp_init+0x190>)
 80046c0:	4809      	ldr	r0, [pc, #36]	@ (80046e8 <nextion_disp_init+0x138>)
 80046c2:	f7ff fd8b 	bl	80041dc <NextionAddComp>
	NULL);
	NextionAddComp(&nextion_instance, &min_cellt_id_label, "page2.min_cellt_id", 6, 10, NULL,
 80046c6:	2300      	movs	r3, #0
 80046c8:	9302      	str	r3, [sp, #8]
 80046ca:	2300      	movs	r3, #0
 80046cc:	9301      	str	r3, [sp, #4]
 80046ce:	230a      	movs	r3, #10
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	2306      	movs	r3, #6
 80046d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004744 <nextion_disp_init+0x194>)
 80046d6:	491c      	ldr	r1, [pc, #112]	@ (8004748 <nextion_disp_init+0x198>)
 80046d8:	4803      	ldr	r0, [pc, #12]	@ (80046e8 <nextion_disp_init+0x138>)
 80046da:	f7ff fd7f 	bl	80041dc <NextionAddComp>
	NULL);

}
 80046de:	bf00      	nop
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	2000025c 	.word	0x2000025c
 80046e8:	200002a8 	.word	0x200002a8
 80046ec:	08005524 	.word	0x08005524
 80046f0:	20000388 	.word	0x20000388
 80046f4:	08005534 	.word	0x08005534
 80046f8:	20000398 	.word	0x20000398
 80046fc:	08005544 	.word	0x08005544
 8004700:	200003a8 	.word	0x200003a8
 8004704:	08005554 	.word	0x08005554
 8004708:	200003b8 	.word	0x200003b8
 800470c:	08005564 	.word	0x08005564
 8004710:	200003c8 	.word	0x200003c8
 8004714:	08005578 	.word	0x08005578
 8004718:	20000438 	.word	0x20000438
 800471c:	0800558c 	.word	0x0800558c
 8004720:	200003d8 	.word	0x200003d8
 8004724:	0800559c 	.word	0x0800559c
 8004728:	200003e8 	.word	0x200003e8
 800472c:	080055b0 	.word	0x080055b0
 8004730:	200003f8 	.word	0x200003f8
 8004734:	080055c0 	.word	0x080055c0
 8004738:	20000408 	.word	0x20000408
 800473c:	080055d4 	.word	0x080055d4
 8004740:	20000418 	.word	0x20000418
 8004744:	080055e4 	.word	0x080055e4
 8004748:	20000428 	.word	0x20000428

0800474c <update_batt_volt_label>:

void update_batt_volt_label(int val){
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &batt_volt_label, val);
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	4904      	ldr	r1, [pc, #16]	@ (8004768 <update_batt_volt_label+0x1c>)
 8004758:	4804      	ldr	r0, [pc, #16]	@ (800476c <update_batt_volt_label+0x20>)
 800475a:	f7ff feab 	bl	80044b4 <NextionSetVal>
}
 800475e:	bf00      	nop
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20000388 	.word	0x20000388
 800476c:	200002a8 	.word	0x200002a8

08004770 <update_batt_curr_label>:

void update_batt_curr_label(int val){
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &batt_curr_label, val);
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	4904      	ldr	r1, [pc, #16]	@ (800478c <update_batt_curr_label+0x1c>)
 800477c:	4804      	ldr	r0, [pc, #16]	@ (8004790 <update_batt_curr_label+0x20>)
 800477e:	f7ff fe99 	bl	80044b4 <NextionSetVal>
}
 8004782:	bf00      	nop
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	20000398 	.word	0x20000398
 8004790:	200002a8 	.word	0x200002a8

08004794 <update_batt_soc_label>:

void update_batt_soc_label(int val){
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &batt_soc_label, val);
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	4904      	ldr	r1, [pc, #16]	@ (80047b0 <update_batt_soc_label+0x1c>)
 80047a0:	4804      	ldr	r0, [pc, #16]	@ (80047b4 <update_batt_soc_label+0x20>)
 80047a2:	f7ff fe87 	bl	80044b4 <NextionSetVal>
}
 80047a6:	bf00      	nop
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	200003a8 	.word	0x200003a8
 80047b4:	200002a8 	.word	0x200002a8

080047b8 <update_soc_bar_label>:

void update_soc_bar_label(int val) {
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &soc_bar_label, val);
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	4904      	ldr	r1, [pc, #16]	@ (80047d4 <update_soc_bar_label+0x1c>)
 80047c4:	4804      	ldr	r0, [pc, #16]	@ (80047d8 <update_soc_bar_label+0x20>)
 80047c6:	f7ff fe75 	bl	80044b4 <NextionSetVal>
}
 80047ca:	bf00      	nop
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	200003b8 	.word	0x200003b8
 80047d8:	200002a8 	.word	0x200002a8

080047dc <update_comm_status_label>:

void update_comm_status_label(char *str) {
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
	NextionSetText(&nextion_instance, &comm_status_label, str);
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	4904      	ldr	r1, [pc, #16]	@ (80047f8 <update_comm_status_label+0x1c>)
 80047e8:	4804      	ldr	r0, [pc, #16]	@ (80047fc <update_comm_status_label+0x20>)
 80047ea:	f7ff fe3f 	bl	800446c <NextionSetText>
}
 80047ee:	bf00      	nop
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	20000438 	.word	0x20000438
 80047fc:	200002a8 	.word	0x200002a8

08004800 <update_batt_status_label>:
void update_batt_status_label(char *str) {
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
	NextionSetText(&nextion_instance, &batt_status_label, str);
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	4904      	ldr	r1, [pc, #16]	@ (800481c <update_batt_status_label+0x1c>)
 800480c:	4804      	ldr	r0, [pc, #16]	@ (8004820 <update_batt_status_label+0x20>)
 800480e:	f7ff fe2d 	bl	800446c <NextionSetText>
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	200003c8 	.word	0x200003c8
 8004820:	200002a8 	.word	0x200002a8

08004824 <update_min_cellv_label>:





void update_min_cellv_label(int val) {
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &min_cellv_label, val);
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	4904      	ldr	r1, [pc, #16]	@ (8004840 <update_min_cellv_label+0x1c>)
 8004830:	4804      	ldr	r0, [pc, #16]	@ (8004844 <update_min_cellv_label+0x20>)
 8004832:	f7ff fe3f 	bl	80044b4 <NextionSetVal>
}
 8004836:	bf00      	nop
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	200003d8 	.word	0x200003d8
 8004844:	200002a8 	.word	0x200002a8

08004848 <update_min_cellv_id_label>:

void update_min_cellv_id_label(int val) {
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &min_cellv_id_label, val);
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	4904      	ldr	r1, [pc, #16]	@ (8004864 <update_min_cellv_id_label+0x1c>)
 8004854:	4804      	ldr	r0, [pc, #16]	@ (8004868 <update_min_cellv_id_label+0x20>)
 8004856:	f7ff fe2d 	bl	80044b4 <NextionSetVal>
}
 800485a:	bf00      	nop
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	200003e8 	.word	0x200003e8
 8004868:	200002a8 	.word	0x200002a8

0800486c <update_max_cellt_label>:


void update_max_cellt_label(int val) {
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &max_cellt_label, val);
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	4904      	ldr	r1, [pc, #16]	@ (8004888 <update_max_cellt_label+0x1c>)
 8004878:	4804      	ldr	r0, [pc, #16]	@ (800488c <update_max_cellt_label+0x20>)
 800487a:	f7ff fe1b 	bl	80044b4 <NextionSetVal>
}
 800487e:	bf00      	nop
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	200003f8 	.word	0x200003f8
 800488c:	200002a8 	.word	0x200002a8

08004890 <update_max_cellt_id_label>:

void update_max_cellt_id_label(int val) {
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &max_cellt_id_label, val);
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	4904      	ldr	r1, [pc, #16]	@ (80048ac <update_max_cellt_id_label+0x1c>)
 800489c:	4804      	ldr	r0, [pc, #16]	@ (80048b0 <update_max_cellt_id_label+0x20>)
 800489e:	f7ff fe09 	bl	80044b4 <NextionSetVal>
}
 80048a2:	bf00      	nop
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20000408 	.word	0x20000408
 80048b0:	200002a8 	.word	0x200002a8

080048b4 <update_min_cellt_label>:

void update_min_cellt_label(int val) {
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &min_cellt_label, val);
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	4904      	ldr	r1, [pc, #16]	@ (80048d0 <update_min_cellt_label+0x1c>)
 80048c0:	4804      	ldr	r0, [pc, #16]	@ (80048d4 <update_min_cellt_label+0x20>)
 80048c2:	f7ff fdf7 	bl	80044b4 <NextionSetVal>
}
 80048c6:	bf00      	nop
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	20000418 	.word	0x20000418
 80048d4:	200002a8 	.word	0x200002a8

080048d8 <update_min_cellt_id_label>:

void update_min_cellt_id_label(int val) {
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &min_cellt_id_label, val);
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	4904      	ldr	r1, [pc, #16]	@ (80048f4 <update_min_cellt_id_label+0x1c>)
 80048e4:	4804      	ldr	r0, [pc, #16]	@ (80048f8 <update_min_cellt_id_label+0x20>)
 80048e6:	f7ff fde5 	bl	80044b4 <NextionSetVal>
}
 80048ea:	bf00      	nop
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20000428 	.word	0x20000428
 80048f8:	200002a8 	.word	0x200002a8

080048fc <reset_display>:



void reset_display(void) {
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
	update_batt_volt_label(0);
 8004900:	2000      	movs	r0, #0
 8004902:	f7ff ff23 	bl	800474c <update_batt_volt_label>
	update_batt_curr_label(0);
 8004906:	2000      	movs	r0, #0
 8004908:	f7ff ff32 	bl	8004770 <update_batt_curr_label>
	update_batt_soc_label(0);
 800490c:	2000      	movs	r0, #0
 800490e:	f7ff ff41 	bl	8004794 <update_batt_soc_label>
	update_soc_bar_label(0);
 8004912:	2000      	movs	r0, #0
 8004914:	f7ff ff50 	bl	80047b8 <update_soc_bar_label>
	update_batt_status_label("");
 8004918:	480b      	ldr	r0, [pc, #44]	@ (8004948 <reset_display+0x4c>)
 800491a:	f7ff ff71 	bl	8004800 <update_batt_status_label>

	update_min_cellv_label(0);
 800491e:	2000      	movs	r0, #0
 8004920:	f7ff ff80 	bl	8004824 <update_min_cellv_label>
	update_min_cellv_id_label(0);
 8004924:	2000      	movs	r0, #0
 8004926:	f7ff ff8f 	bl	8004848 <update_min_cellv_id_label>
	update_max_cellt_label(0);
 800492a:	2000      	movs	r0, #0
 800492c:	f7ff ff9e 	bl	800486c <update_max_cellt_label>
	update_max_cellt_id_label(0);
 8004930:	2000      	movs	r0, #0
 8004932:	f7ff ffad 	bl	8004890 <update_max_cellt_id_label>
	update_min_cellt_label(0);
 8004936:	2000      	movs	r0, #0
 8004938:	f7ff ffbc 	bl	80048b4 <update_min_cellt_label>
	update_min_cellt_id_label(0);
 800493c:	2000      	movs	r0, #0
 800493e:	f7ff ffcb 	bl	80048d8 <update_min_cellt_id_label>
}
 8004942:	bf00      	nop
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	080055f8 	.word	0x080055f8

0800494c <reset_page1_display>:

void reset_page1_display(void){
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
	update_batt_volt_label(0);
 8004950:	2000      	movs	r0, #0
 8004952:	f7ff fefb 	bl	800474c <update_batt_volt_label>
	update_batt_curr_label(0);
 8004956:	2000      	movs	r0, #0
 8004958:	f7ff ff0a 	bl	8004770 <update_batt_curr_label>
	update_batt_soc_label(0);
 800495c:	2000      	movs	r0, #0
 800495e:	f7ff ff19 	bl	8004794 <update_batt_soc_label>
	update_soc_bar_label(0);
 8004962:	2000      	movs	r0, #0
 8004964:	f7ff ff28 	bl	80047b8 <update_soc_bar_label>
}
 8004968:	bf00      	nop
 800496a:	bd80      	pop	{r7, pc}

0800496c <reset_page2_display>:

void reset_page2_display(void){
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0

	update_min_cellv_label(0);
 8004970:	2000      	movs	r0, #0
 8004972:	f7ff ff57 	bl	8004824 <update_min_cellv_label>
	update_min_cellv_id_label(0);
 8004976:	2000      	movs	r0, #0
 8004978:	f7ff ff66 	bl	8004848 <update_min_cellv_id_label>
}
 800497c:	bf00      	nop
 800497e:	bd80      	pop	{r7, pc}

08004980 <reset_page3_display>:


void reset_page3_display(void){
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
	update_max_cellt_label(0);
 8004984:	2000      	movs	r0, #0
 8004986:	f7ff ff71 	bl	800486c <update_max_cellt_label>
	update_max_cellt_id_label(0);
 800498a:	2000      	movs	r0, #0
 800498c:	f7ff ff80 	bl	8004890 <update_max_cellt_id_label>
	update_min_cellt_label(0);
 8004990:	2000      	movs	r0, #0
 8004992:	f7ff ff8f 	bl	80048b4 <update_min_cellt_label>
	update_min_cellt_id_label(0);
 8004996:	2000      	movs	r0, #0
 8004998:	f7ff ff9e 	bl	80048d8 <update_min_cellt_id_label>
}
 800499c:	bf00      	nop
 800499e:	bd80      	pop	{r7, pc}

080049a0 <queue_init>:
 *      Author: Hetesh S T
 */

#include "queue.h"

void queue_init(queue_t *q_instance, q_member_t queue_arr[], uint8_t max_len) {
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	4613      	mov	r3, r2
 80049ac:	71fb      	strb	r3, [r7, #7]
	q_instance->front_idx = 0;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	701a      	strb	r2, [r3, #0]
	q_instance->rear_idx = 0;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	705a      	strb	r2, [r3, #1]
	q_instance->q_len = 0;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	709a      	strb	r2, [r3, #2]
	q_instance->q_max_len = max_len;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	79fa      	ldrb	r2, [r7, #7]
 80049c4:	70da      	strb	r2, [r3, #3]
	q_instance->q_member_ptr = queue_arr;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	605a      	str	r2, [r3, #4]
}
 80049cc:	bf00      	nop
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bc80      	pop	{r7}
 80049d4:	4770      	bx	lr

080049d6 <is_empty>:

bool is_empty(queue_t *q_instance) {
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
	return (q_instance->q_len == 0u);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	789b      	ldrb	r3, [r3, #2]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	bf0c      	ite	eq
 80049e6:	2301      	moveq	r3, #1
 80049e8:	2300      	movne	r3, #0
 80049ea:	b2db      	uxtb	r3, r3

}
 80049ec:	4618      	mov	r0, r3
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	4770      	bx	lr

080049f6 <is_full>:

bool is_full(queue_t *q_instance) {
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
	return (q_instance->q_len == q_instance->q_max_len);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	789a      	ldrb	r2, [r3, #2]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	78db      	ldrb	r3, [r3, #3]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	bf0c      	ite	eq
 8004a0a:	2301      	moveq	r3, #1
 8004a0c:	2300      	movne	r3, #0
 8004a0e:	b2db      	uxtb	r3, r3
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bc80      	pop	{r7}
 8004a18:	4770      	bx	lr

08004a1a <enqueue>:

void enqueue(queue_t *q_instance, uint32_t rx_can_id, uint8_t rx_data[]) {
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b086      	sub	sp, #24
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	607a      	str	r2, [r7, #4]

	if (is_full(q_instance)) {
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f7ff ffe5 	bl	80049f6 <is_full>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d128      	bne.n	8004a84 <enqueue+0x6a>
		return;
	}

	q_member_t *temp_member = q_instance->q_member_ptr + q_instance->rear_idx;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	785b      	ldrb	r3, [r3, #1]
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	440b      	add	r3, r1
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	617b      	str	r3, [r7, #20]
	temp_member->can_id = rx_can_id;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	601a      	str	r2, [r3, #0]
	(void) memcpy(temp_member->data, rx_data, 8);
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	3304      	adds	r3, #4
 8004a52:	2208      	movs	r2, #8
 8004a54:	6879      	ldr	r1, [r7, #4]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 f986 	bl	8004d68 <memcpy>

	q_instance->rear_idx = (q_instance->rear_idx + 1) % q_instance->q_max_len;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	785b      	ldrb	r3, [r3, #1]
 8004a60:	3301      	adds	r3, #1
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	78d2      	ldrb	r2, [r2, #3]
 8004a66:	fb93 f1f2 	sdiv	r1, r3, r2
 8004a6a:	fb01 f202 	mul.w	r2, r1, r2
 8004a6e:	1a9b      	subs	r3, r3, r2
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	705a      	strb	r2, [r3, #1]
	q_instance->q_len++;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	789b      	ldrb	r3, [r3, #2]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	709a      	strb	r2, [r3, #2]
 8004a82:	e000      	b.n	8004a86 <enqueue+0x6c>
		return;
 8004a84:	bf00      	nop

}
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <dequeue>:

void dequeue(queue_t *q_instance) {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
	if (is_empty(q_instance)) {
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff ff9e 	bl	80049d6 <is_empty>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d122      	bne.n	8004ae6 <dequeue+0x5a>
		return;
	}

	(void) memset((q_instance->q_member_ptr + q_instance->front_idx), 0,
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	460b      	mov	r3, r1
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	440b      	add	r3, r1
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	220c      	movs	r2, #12
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 f909 	bl	8004cd0 <memset>
			sizeof(q_member_t));
	q_instance->front_idx = (q_instance->front_idx + 1) % q_instance->q_max_len;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	78d2      	ldrb	r2, [r2, #3]
 8004ac8:	fb93 f1f2 	sdiv	r1, r3, r2
 8004acc:	fb01 f202 	mul.w	r2, r1, r2
 8004ad0:	1a9b      	subs	r3, r3, r2
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	701a      	strb	r2, [r3, #0]
	q_instance->q_len--;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	789b      	ldrb	r3, [r3, #2]
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	709a      	strb	r2, [r3, #2]
 8004ae4:	e000      	b.n	8004ae8 <dequeue+0x5c>
		return;
 8004ae6:	bf00      	nop
}
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <peek>:

q_member_t* peek(queue_t *q_instance) {
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b082      	sub	sp, #8
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
	if (is_empty(q_instance)) {
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7ff ff6d 	bl	80049d6 <is_empty>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <peek+0x18>
		return NULL;
 8004b02:	2300      	movs	r3, #0
 8004b04:	e009      	b.n	8004b1a <peek+0x2c>
	}

	return (q_instance->q_member_ptr + q_instance->front_idx);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	4619      	mov	r1, r3
 8004b10:	460b      	mov	r3, r1
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	440b      	add	r3, r1
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <malloc>:
 8004b24:	4b02      	ldr	r3, [pc, #8]	@ (8004b30 <malloc+0xc>)
 8004b26:	4601      	mov	r1, r0
 8004b28:	6818      	ldr	r0, [r3, #0]
 8004b2a:	f000 b825 	b.w	8004b78 <_malloc_r>
 8004b2e:	bf00      	nop
 8004b30:	2000000c 	.word	0x2000000c

08004b34 <sbrk_aligned>:
 8004b34:	b570      	push	{r4, r5, r6, lr}
 8004b36:	4e0f      	ldr	r6, [pc, #60]	@ (8004b74 <sbrk_aligned+0x40>)
 8004b38:	460c      	mov	r4, r1
 8004b3a:	6831      	ldr	r1, [r6, #0]
 8004b3c:	4605      	mov	r5, r0
 8004b3e:	b911      	cbnz	r1, 8004b46 <sbrk_aligned+0x12>
 8004b40:	f000 f8ce 	bl	8004ce0 <_sbrk_r>
 8004b44:	6030      	str	r0, [r6, #0]
 8004b46:	4621      	mov	r1, r4
 8004b48:	4628      	mov	r0, r5
 8004b4a:	f000 f8c9 	bl	8004ce0 <_sbrk_r>
 8004b4e:	1c43      	adds	r3, r0, #1
 8004b50:	d103      	bne.n	8004b5a <sbrk_aligned+0x26>
 8004b52:	f04f 34ff 	mov.w	r4, #4294967295
 8004b56:	4620      	mov	r0, r4
 8004b58:	bd70      	pop	{r4, r5, r6, pc}
 8004b5a:	1cc4      	adds	r4, r0, #3
 8004b5c:	f024 0403 	bic.w	r4, r4, #3
 8004b60:	42a0      	cmp	r0, r4
 8004b62:	d0f8      	beq.n	8004b56 <sbrk_aligned+0x22>
 8004b64:	1a21      	subs	r1, r4, r0
 8004b66:	4628      	mov	r0, r5
 8004b68:	f000 f8ba 	bl	8004ce0 <_sbrk_r>
 8004b6c:	3001      	adds	r0, #1
 8004b6e:	d1f2      	bne.n	8004b56 <sbrk_aligned+0x22>
 8004b70:	e7ef      	b.n	8004b52 <sbrk_aligned+0x1e>
 8004b72:	bf00      	nop
 8004b74:	20000448 	.word	0x20000448

08004b78 <_malloc_r>:
 8004b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b7c:	1ccd      	adds	r5, r1, #3
 8004b7e:	f025 0503 	bic.w	r5, r5, #3
 8004b82:	3508      	adds	r5, #8
 8004b84:	2d0c      	cmp	r5, #12
 8004b86:	bf38      	it	cc
 8004b88:	250c      	movcc	r5, #12
 8004b8a:	2d00      	cmp	r5, #0
 8004b8c:	4606      	mov	r6, r0
 8004b8e:	db01      	blt.n	8004b94 <_malloc_r+0x1c>
 8004b90:	42a9      	cmp	r1, r5
 8004b92:	d904      	bls.n	8004b9e <_malloc_r+0x26>
 8004b94:	230c      	movs	r3, #12
 8004b96:	6033      	str	r3, [r6, #0]
 8004b98:	2000      	movs	r0, #0
 8004b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c74 <_malloc_r+0xfc>
 8004ba2:	f000 f869 	bl	8004c78 <__malloc_lock>
 8004ba6:	f8d8 3000 	ldr.w	r3, [r8]
 8004baa:	461c      	mov	r4, r3
 8004bac:	bb44      	cbnz	r4, 8004c00 <_malloc_r+0x88>
 8004bae:	4629      	mov	r1, r5
 8004bb0:	4630      	mov	r0, r6
 8004bb2:	f7ff ffbf 	bl	8004b34 <sbrk_aligned>
 8004bb6:	1c43      	adds	r3, r0, #1
 8004bb8:	4604      	mov	r4, r0
 8004bba:	d158      	bne.n	8004c6e <_malloc_r+0xf6>
 8004bbc:	f8d8 4000 	ldr.w	r4, [r8]
 8004bc0:	4627      	mov	r7, r4
 8004bc2:	2f00      	cmp	r7, #0
 8004bc4:	d143      	bne.n	8004c4e <_malloc_r+0xd6>
 8004bc6:	2c00      	cmp	r4, #0
 8004bc8:	d04b      	beq.n	8004c62 <_malloc_r+0xea>
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	4639      	mov	r1, r7
 8004bce:	4630      	mov	r0, r6
 8004bd0:	eb04 0903 	add.w	r9, r4, r3
 8004bd4:	f000 f884 	bl	8004ce0 <_sbrk_r>
 8004bd8:	4581      	cmp	r9, r0
 8004bda:	d142      	bne.n	8004c62 <_malloc_r+0xea>
 8004bdc:	6821      	ldr	r1, [r4, #0]
 8004bde:	4630      	mov	r0, r6
 8004be0:	1a6d      	subs	r5, r5, r1
 8004be2:	4629      	mov	r1, r5
 8004be4:	f7ff ffa6 	bl	8004b34 <sbrk_aligned>
 8004be8:	3001      	adds	r0, #1
 8004bea:	d03a      	beq.n	8004c62 <_malloc_r+0xea>
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	442b      	add	r3, r5
 8004bf0:	6023      	str	r3, [r4, #0]
 8004bf2:	f8d8 3000 	ldr.w	r3, [r8]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	bb62      	cbnz	r2, 8004c54 <_malloc_r+0xdc>
 8004bfa:	f8c8 7000 	str.w	r7, [r8]
 8004bfe:	e00f      	b.n	8004c20 <_malloc_r+0xa8>
 8004c00:	6822      	ldr	r2, [r4, #0]
 8004c02:	1b52      	subs	r2, r2, r5
 8004c04:	d420      	bmi.n	8004c48 <_malloc_r+0xd0>
 8004c06:	2a0b      	cmp	r2, #11
 8004c08:	d917      	bls.n	8004c3a <_malloc_r+0xc2>
 8004c0a:	1961      	adds	r1, r4, r5
 8004c0c:	42a3      	cmp	r3, r4
 8004c0e:	6025      	str	r5, [r4, #0]
 8004c10:	bf18      	it	ne
 8004c12:	6059      	strne	r1, [r3, #4]
 8004c14:	6863      	ldr	r3, [r4, #4]
 8004c16:	bf08      	it	eq
 8004c18:	f8c8 1000 	streq.w	r1, [r8]
 8004c1c:	5162      	str	r2, [r4, r5]
 8004c1e:	604b      	str	r3, [r1, #4]
 8004c20:	4630      	mov	r0, r6
 8004c22:	f000 f82f 	bl	8004c84 <__malloc_unlock>
 8004c26:	f104 000b 	add.w	r0, r4, #11
 8004c2a:	1d23      	adds	r3, r4, #4
 8004c2c:	f020 0007 	bic.w	r0, r0, #7
 8004c30:	1ac2      	subs	r2, r0, r3
 8004c32:	bf1c      	itt	ne
 8004c34:	1a1b      	subne	r3, r3, r0
 8004c36:	50a3      	strne	r3, [r4, r2]
 8004c38:	e7af      	b.n	8004b9a <_malloc_r+0x22>
 8004c3a:	6862      	ldr	r2, [r4, #4]
 8004c3c:	42a3      	cmp	r3, r4
 8004c3e:	bf0c      	ite	eq
 8004c40:	f8c8 2000 	streq.w	r2, [r8]
 8004c44:	605a      	strne	r2, [r3, #4]
 8004c46:	e7eb      	b.n	8004c20 <_malloc_r+0xa8>
 8004c48:	4623      	mov	r3, r4
 8004c4a:	6864      	ldr	r4, [r4, #4]
 8004c4c:	e7ae      	b.n	8004bac <_malloc_r+0x34>
 8004c4e:	463c      	mov	r4, r7
 8004c50:	687f      	ldr	r7, [r7, #4]
 8004c52:	e7b6      	b.n	8004bc2 <_malloc_r+0x4a>
 8004c54:	461a      	mov	r2, r3
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	42a3      	cmp	r3, r4
 8004c5a:	d1fb      	bne.n	8004c54 <_malloc_r+0xdc>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	6053      	str	r3, [r2, #4]
 8004c60:	e7de      	b.n	8004c20 <_malloc_r+0xa8>
 8004c62:	230c      	movs	r3, #12
 8004c64:	4630      	mov	r0, r6
 8004c66:	6033      	str	r3, [r6, #0]
 8004c68:	f000 f80c 	bl	8004c84 <__malloc_unlock>
 8004c6c:	e794      	b.n	8004b98 <_malloc_r+0x20>
 8004c6e:	6005      	str	r5, [r0, #0]
 8004c70:	e7d6      	b.n	8004c20 <_malloc_r+0xa8>
 8004c72:	bf00      	nop
 8004c74:	2000044c 	.word	0x2000044c

08004c78 <__malloc_lock>:
 8004c78:	4801      	ldr	r0, [pc, #4]	@ (8004c80 <__malloc_lock+0x8>)
 8004c7a:	f000 b86b 	b.w	8004d54 <__retarget_lock_acquire_recursive>
 8004c7e:	bf00      	nop
 8004c80:	2000058c 	.word	0x2000058c

08004c84 <__malloc_unlock>:
 8004c84:	4801      	ldr	r0, [pc, #4]	@ (8004c8c <__malloc_unlock+0x8>)
 8004c86:	f000 b866 	b.w	8004d56 <__retarget_lock_release_recursive>
 8004c8a:	bf00      	nop
 8004c8c:	2000058c 	.word	0x2000058c

08004c90 <siprintf>:
 8004c90:	b40e      	push	{r1, r2, r3}
 8004c92:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004c96:	b500      	push	{lr}
 8004c98:	b09c      	sub	sp, #112	@ 0x70
 8004c9a:	ab1d      	add	r3, sp, #116	@ 0x74
 8004c9c:	9002      	str	r0, [sp, #8]
 8004c9e:	9006      	str	r0, [sp, #24]
 8004ca0:	9107      	str	r1, [sp, #28]
 8004ca2:	9104      	str	r1, [sp, #16]
 8004ca4:	4808      	ldr	r0, [pc, #32]	@ (8004cc8 <siprintf+0x38>)
 8004ca6:	4909      	ldr	r1, [pc, #36]	@ (8004ccc <siprintf+0x3c>)
 8004ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cac:	9105      	str	r1, [sp, #20]
 8004cae:	6800      	ldr	r0, [r0, #0]
 8004cb0:	a902      	add	r1, sp, #8
 8004cb2:	9301      	str	r3, [sp, #4]
 8004cb4:	f000 f90a 	bl	8004ecc <_svfiprintf_r>
 8004cb8:	2200      	movs	r2, #0
 8004cba:	9b02      	ldr	r3, [sp, #8]
 8004cbc:	701a      	strb	r2, [r3, #0]
 8004cbe:	b01c      	add	sp, #112	@ 0x70
 8004cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cc4:	b003      	add	sp, #12
 8004cc6:	4770      	bx	lr
 8004cc8:	2000000c 	.word	0x2000000c
 8004ccc:	ffff0208 	.word	0xffff0208

08004cd0 <memset>:
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	4402      	add	r2, r0
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d100      	bne.n	8004cda <memset+0xa>
 8004cd8:	4770      	bx	lr
 8004cda:	f803 1b01 	strb.w	r1, [r3], #1
 8004cde:	e7f9      	b.n	8004cd4 <memset+0x4>

08004ce0 <_sbrk_r>:
 8004ce0:	b538      	push	{r3, r4, r5, lr}
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	4d05      	ldr	r5, [pc, #20]	@ (8004cfc <_sbrk_r+0x1c>)
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	4608      	mov	r0, r1
 8004cea:	602b      	str	r3, [r5, #0]
 8004cec:	f7fb ff16 	bl	8000b1c <_sbrk>
 8004cf0:	1c43      	adds	r3, r0, #1
 8004cf2:	d102      	bne.n	8004cfa <_sbrk_r+0x1a>
 8004cf4:	682b      	ldr	r3, [r5, #0]
 8004cf6:	b103      	cbz	r3, 8004cfa <_sbrk_r+0x1a>
 8004cf8:	6023      	str	r3, [r4, #0]
 8004cfa:	bd38      	pop	{r3, r4, r5, pc}
 8004cfc:	20000588 	.word	0x20000588

08004d00 <__errno>:
 8004d00:	4b01      	ldr	r3, [pc, #4]	@ (8004d08 <__errno+0x8>)
 8004d02:	6818      	ldr	r0, [r3, #0]
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	2000000c 	.word	0x2000000c

08004d0c <__libc_init_array>:
 8004d0c:	b570      	push	{r4, r5, r6, lr}
 8004d0e:	2600      	movs	r6, #0
 8004d10:	4d0c      	ldr	r5, [pc, #48]	@ (8004d44 <__libc_init_array+0x38>)
 8004d12:	4c0d      	ldr	r4, [pc, #52]	@ (8004d48 <__libc_init_array+0x3c>)
 8004d14:	1b64      	subs	r4, r4, r5
 8004d16:	10a4      	asrs	r4, r4, #2
 8004d18:	42a6      	cmp	r6, r4
 8004d1a:	d109      	bne.n	8004d30 <__libc_init_array+0x24>
 8004d1c:	f000 fbc2 	bl	80054a4 <_init>
 8004d20:	2600      	movs	r6, #0
 8004d22:	4d0a      	ldr	r5, [pc, #40]	@ (8004d4c <__libc_init_array+0x40>)
 8004d24:	4c0a      	ldr	r4, [pc, #40]	@ (8004d50 <__libc_init_array+0x44>)
 8004d26:	1b64      	subs	r4, r4, r5
 8004d28:	10a4      	asrs	r4, r4, #2
 8004d2a:	42a6      	cmp	r6, r4
 8004d2c:	d105      	bne.n	8004d3a <__libc_init_array+0x2e>
 8004d2e:	bd70      	pop	{r4, r5, r6, pc}
 8004d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d34:	4798      	blx	r3
 8004d36:	3601      	adds	r6, #1
 8004d38:	e7ee      	b.n	8004d18 <__libc_init_array+0xc>
 8004d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d3e:	4798      	blx	r3
 8004d40:	3601      	adds	r6, #1
 8004d42:	e7f2      	b.n	8004d2a <__libc_init_array+0x1e>
 8004d44:	08005664 	.word	0x08005664
 8004d48:	08005664 	.word	0x08005664
 8004d4c:	08005664 	.word	0x08005664
 8004d50:	08005668 	.word	0x08005668

08004d54 <__retarget_lock_acquire_recursive>:
 8004d54:	4770      	bx	lr

08004d56 <__retarget_lock_release_recursive>:
 8004d56:	4770      	bx	lr

08004d58 <strcpy>:
 8004d58:	4603      	mov	r3, r0
 8004d5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d5e:	f803 2b01 	strb.w	r2, [r3], #1
 8004d62:	2a00      	cmp	r2, #0
 8004d64:	d1f9      	bne.n	8004d5a <strcpy+0x2>
 8004d66:	4770      	bx	lr

08004d68 <memcpy>:
 8004d68:	440a      	add	r2, r1
 8004d6a:	4291      	cmp	r1, r2
 8004d6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d70:	d100      	bne.n	8004d74 <memcpy+0xc>
 8004d72:	4770      	bx	lr
 8004d74:	b510      	push	{r4, lr}
 8004d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d7a:	4291      	cmp	r1, r2
 8004d7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d80:	d1f9      	bne.n	8004d76 <memcpy+0xe>
 8004d82:	bd10      	pop	{r4, pc}

08004d84 <_free_r>:
 8004d84:	b538      	push	{r3, r4, r5, lr}
 8004d86:	4605      	mov	r5, r0
 8004d88:	2900      	cmp	r1, #0
 8004d8a:	d040      	beq.n	8004e0e <_free_r+0x8a>
 8004d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d90:	1f0c      	subs	r4, r1, #4
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	bfb8      	it	lt
 8004d96:	18e4      	addlt	r4, r4, r3
 8004d98:	f7ff ff6e 	bl	8004c78 <__malloc_lock>
 8004d9c:	4a1c      	ldr	r2, [pc, #112]	@ (8004e10 <_free_r+0x8c>)
 8004d9e:	6813      	ldr	r3, [r2, #0]
 8004da0:	b933      	cbnz	r3, 8004db0 <_free_r+0x2c>
 8004da2:	6063      	str	r3, [r4, #4]
 8004da4:	6014      	str	r4, [r2, #0]
 8004da6:	4628      	mov	r0, r5
 8004da8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dac:	f7ff bf6a 	b.w	8004c84 <__malloc_unlock>
 8004db0:	42a3      	cmp	r3, r4
 8004db2:	d908      	bls.n	8004dc6 <_free_r+0x42>
 8004db4:	6820      	ldr	r0, [r4, #0]
 8004db6:	1821      	adds	r1, r4, r0
 8004db8:	428b      	cmp	r3, r1
 8004dba:	bf01      	itttt	eq
 8004dbc:	6819      	ldreq	r1, [r3, #0]
 8004dbe:	685b      	ldreq	r3, [r3, #4]
 8004dc0:	1809      	addeq	r1, r1, r0
 8004dc2:	6021      	streq	r1, [r4, #0]
 8004dc4:	e7ed      	b.n	8004da2 <_free_r+0x1e>
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	b10b      	cbz	r3, 8004dd0 <_free_r+0x4c>
 8004dcc:	42a3      	cmp	r3, r4
 8004dce:	d9fa      	bls.n	8004dc6 <_free_r+0x42>
 8004dd0:	6811      	ldr	r1, [r2, #0]
 8004dd2:	1850      	adds	r0, r2, r1
 8004dd4:	42a0      	cmp	r0, r4
 8004dd6:	d10b      	bne.n	8004df0 <_free_r+0x6c>
 8004dd8:	6820      	ldr	r0, [r4, #0]
 8004dda:	4401      	add	r1, r0
 8004ddc:	1850      	adds	r0, r2, r1
 8004dde:	4283      	cmp	r3, r0
 8004de0:	6011      	str	r1, [r2, #0]
 8004de2:	d1e0      	bne.n	8004da6 <_free_r+0x22>
 8004de4:	6818      	ldr	r0, [r3, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	4408      	add	r0, r1
 8004dea:	6010      	str	r0, [r2, #0]
 8004dec:	6053      	str	r3, [r2, #4]
 8004dee:	e7da      	b.n	8004da6 <_free_r+0x22>
 8004df0:	d902      	bls.n	8004df8 <_free_r+0x74>
 8004df2:	230c      	movs	r3, #12
 8004df4:	602b      	str	r3, [r5, #0]
 8004df6:	e7d6      	b.n	8004da6 <_free_r+0x22>
 8004df8:	6820      	ldr	r0, [r4, #0]
 8004dfa:	1821      	adds	r1, r4, r0
 8004dfc:	428b      	cmp	r3, r1
 8004dfe:	bf01      	itttt	eq
 8004e00:	6819      	ldreq	r1, [r3, #0]
 8004e02:	685b      	ldreq	r3, [r3, #4]
 8004e04:	1809      	addeq	r1, r1, r0
 8004e06:	6021      	streq	r1, [r4, #0]
 8004e08:	6063      	str	r3, [r4, #4]
 8004e0a:	6054      	str	r4, [r2, #4]
 8004e0c:	e7cb      	b.n	8004da6 <_free_r+0x22>
 8004e0e:	bd38      	pop	{r3, r4, r5, pc}
 8004e10:	2000044c 	.word	0x2000044c

08004e14 <__ssputs_r>:
 8004e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e18:	461f      	mov	r7, r3
 8004e1a:	688e      	ldr	r6, [r1, #8]
 8004e1c:	4682      	mov	sl, r0
 8004e1e:	42be      	cmp	r6, r7
 8004e20:	460c      	mov	r4, r1
 8004e22:	4690      	mov	r8, r2
 8004e24:	680b      	ldr	r3, [r1, #0]
 8004e26:	d82d      	bhi.n	8004e84 <__ssputs_r+0x70>
 8004e28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004e30:	d026      	beq.n	8004e80 <__ssputs_r+0x6c>
 8004e32:	6965      	ldr	r5, [r4, #20]
 8004e34:	6909      	ldr	r1, [r1, #16]
 8004e36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e3a:	eba3 0901 	sub.w	r9, r3, r1
 8004e3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e42:	1c7b      	adds	r3, r7, #1
 8004e44:	444b      	add	r3, r9
 8004e46:	106d      	asrs	r5, r5, #1
 8004e48:	429d      	cmp	r5, r3
 8004e4a:	bf38      	it	cc
 8004e4c:	461d      	movcc	r5, r3
 8004e4e:	0553      	lsls	r3, r2, #21
 8004e50:	d527      	bpl.n	8004ea2 <__ssputs_r+0x8e>
 8004e52:	4629      	mov	r1, r5
 8004e54:	f7ff fe90 	bl	8004b78 <_malloc_r>
 8004e58:	4606      	mov	r6, r0
 8004e5a:	b360      	cbz	r0, 8004eb6 <__ssputs_r+0xa2>
 8004e5c:	464a      	mov	r2, r9
 8004e5e:	6921      	ldr	r1, [r4, #16]
 8004e60:	f7ff ff82 	bl	8004d68 <memcpy>
 8004e64:	89a3      	ldrh	r3, [r4, #12]
 8004e66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e6e:	81a3      	strh	r3, [r4, #12]
 8004e70:	6126      	str	r6, [r4, #16]
 8004e72:	444e      	add	r6, r9
 8004e74:	6026      	str	r6, [r4, #0]
 8004e76:	463e      	mov	r6, r7
 8004e78:	6165      	str	r5, [r4, #20]
 8004e7a:	eba5 0509 	sub.w	r5, r5, r9
 8004e7e:	60a5      	str	r5, [r4, #8]
 8004e80:	42be      	cmp	r6, r7
 8004e82:	d900      	bls.n	8004e86 <__ssputs_r+0x72>
 8004e84:	463e      	mov	r6, r7
 8004e86:	4632      	mov	r2, r6
 8004e88:	4641      	mov	r1, r8
 8004e8a:	6820      	ldr	r0, [r4, #0]
 8004e8c:	f000 faac 	bl	80053e8 <memmove>
 8004e90:	2000      	movs	r0, #0
 8004e92:	68a3      	ldr	r3, [r4, #8]
 8004e94:	1b9b      	subs	r3, r3, r6
 8004e96:	60a3      	str	r3, [r4, #8]
 8004e98:	6823      	ldr	r3, [r4, #0]
 8004e9a:	4433      	add	r3, r6
 8004e9c:	6023      	str	r3, [r4, #0]
 8004e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ea2:	462a      	mov	r2, r5
 8004ea4:	f000 fac8 	bl	8005438 <_realloc_r>
 8004ea8:	4606      	mov	r6, r0
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	d1e0      	bne.n	8004e70 <__ssputs_r+0x5c>
 8004eae:	4650      	mov	r0, sl
 8004eb0:	6921      	ldr	r1, [r4, #16]
 8004eb2:	f7ff ff67 	bl	8004d84 <_free_r>
 8004eb6:	230c      	movs	r3, #12
 8004eb8:	f8ca 3000 	str.w	r3, [sl]
 8004ebc:	89a3      	ldrh	r3, [r4, #12]
 8004ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ec6:	81a3      	strh	r3, [r4, #12]
 8004ec8:	e7e9      	b.n	8004e9e <__ssputs_r+0x8a>
	...

08004ecc <_svfiprintf_r>:
 8004ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed0:	4698      	mov	r8, r3
 8004ed2:	898b      	ldrh	r3, [r1, #12]
 8004ed4:	4607      	mov	r7, r0
 8004ed6:	061b      	lsls	r3, r3, #24
 8004ed8:	460d      	mov	r5, r1
 8004eda:	4614      	mov	r4, r2
 8004edc:	b09d      	sub	sp, #116	@ 0x74
 8004ede:	d510      	bpl.n	8004f02 <_svfiprintf_r+0x36>
 8004ee0:	690b      	ldr	r3, [r1, #16]
 8004ee2:	b973      	cbnz	r3, 8004f02 <_svfiprintf_r+0x36>
 8004ee4:	2140      	movs	r1, #64	@ 0x40
 8004ee6:	f7ff fe47 	bl	8004b78 <_malloc_r>
 8004eea:	6028      	str	r0, [r5, #0]
 8004eec:	6128      	str	r0, [r5, #16]
 8004eee:	b930      	cbnz	r0, 8004efe <_svfiprintf_r+0x32>
 8004ef0:	230c      	movs	r3, #12
 8004ef2:	603b      	str	r3, [r7, #0]
 8004ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef8:	b01d      	add	sp, #116	@ 0x74
 8004efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004efe:	2340      	movs	r3, #64	@ 0x40
 8004f00:	616b      	str	r3, [r5, #20]
 8004f02:	2300      	movs	r3, #0
 8004f04:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f06:	2320      	movs	r3, #32
 8004f08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f0c:	2330      	movs	r3, #48	@ 0x30
 8004f0e:	f04f 0901 	mov.w	r9, #1
 8004f12:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f16:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80050b0 <_svfiprintf_r+0x1e4>
 8004f1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f1e:	4623      	mov	r3, r4
 8004f20:	469a      	mov	sl, r3
 8004f22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f26:	b10a      	cbz	r2, 8004f2c <_svfiprintf_r+0x60>
 8004f28:	2a25      	cmp	r2, #37	@ 0x25
 8004f2a:	d1f9      	bne.n	8004f20 <_svfiprintf_r+0x54>
 8004f2c:	ebba 0b04 	subs.w	fp, sl, r4
 8004f30:	d00b      	beq.n	8004f4a <_svfiprintf_r+0x7e>
 8004f32:	465b      	mov	r3, fp
 8004f34:	4622      	mov	r2, r4
 8004f36:	4629      	mov	r1, r5
 8004f38:	4638      	mov	r0, r7
 8004f3a:	f7ff ff6b 	bl	8004e14 <__ssputs_r>
 8004f3e:	3001      	adds	r0, #1
 8004f40:	f000 80a7 	beq.w	8005092 <_svfiprintf_r+0x1c6>
 8004f44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f46:	445a      	add	r2, fp
 8004f48:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f4a:	f89a 3000 	ldrb.w	r3, [sl]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f000 809f 	beq.w	8005092 <_svfiprintf_r+0x1c6>
 8004f54:	2300      	movs	r3, #0
 8004f56:	f04f 32ff 	mov.w	r2, #4294967295
 8004f5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f5e:	f10a 0a01 	add.w	sl, sl, #1
 8004f62:	9304      	str	r3, [sp, #16]
 8004f64:	9307      	str	r3, [sp, #28]
 8004f66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f6a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f6c:	4654      	mov	r4, sl
 8004f6e:	2205      	movs	r2, #5
 8004f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f74:	484e      	ldr	r0, [pc, #312]	@ (80050b0 <_svfiprintf_r+0x1e4>)
 8004f76:	f000 fa51 	bl	800541c <memchr>
 8004f7a:	9a04      	ldr	r2, [sp, #16]
 8004f7c:	b9d8      	cbnz	r0, 8004fb6 <_svfiprintf_r+0xea>
 8004f7e:	06d0      	lsls	r0, r2, #27
 8004f80:	bf44      	itt	mi
 8004f82:	2320      	movmi	r3, #32
 8004f84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f88:	0711      	lsls	r1, r2, #28
 8004f8a:	bf44      	itt	mi
 8004f8c:	232b      	movmi	r3, #43	@ 0x2b
 8004f8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f92:	f89a 3000 	ldrb.w	r3, [sl]
 8004f96:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f98:	d015      	beq.n	8004fc6 <_svfiprintf_r+0xfa>
 8004f9a:	4654      	mov	r4, sl
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	f04f 0c0a 	mov.w	ip, #10
 8004fa2:	9a07      	ldr	r2, [sp, #28]
 8004fa4:	4621      	mov	r1, r4
 8004fa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004faa:	3b30      	subs	r3, #48	@ 0x30
 8004fac:	2b09      	cmp	r3, #9
 8004fae:	d94b      	bls.n	8005048 <_svfiprintf_r+0x17c>
 8004fb0:	b1b0      	cbz	r0, 8004fe0 <_svfiprintf_r+0x114>
 8004fb2:	9207      	str	r2, [sp, #28]
 8004fb4:	e014      	b.n	8004fe0 <_svfiprintf_r+0x114>
 8004fb6:	eba0 0308 	sub.w	r3, r0, r8
 8004fba:	fa09 f303 	lsl.w	r3, r9, r3
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	46a2      	mov	sl, r4
 8004fc2:	9304      	str	r3, [sp, #16]
 8004fc4:	e7d2      	b.n	8004f6c <_svfiprintf_r+0xa0>
 8004fc6:	9b03      	ldr	r3, [sp, #12]
 8004fc8:	1d19      	adds	r1, r3, #4
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	9103      	str	r1, [sp, #12]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	bfbb      	ittet	lt
 8004fd2:	425b      	neglt	r3, r3
 8004fd4:	f042 0202 	orrlt.w	r2, r2, #2
 8004fd8:	9307      	strge	r3, [sp, #28]
 8004fda:	9307      	strlt	r3, [sp, #28]
 8004fdc:	bfb8      	it	lt
 8004fde:	9204      	strlt	r2, [sp, #16]
 8004fe0:	7823      	ldrb	r3, [r4, #0]
 8004fe2:	2b2e      	cmp	r3, #46	@ 0x2e
 8004fe4:	d10a      	bne.n	8004ffc <_svfiprintf_r+0x130>
 8004fe6:	7863      	ldrb	r3, [r4, #1]
 8004fe8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fea:	d132      	bne.n	8005052 <_svfiprintf_r+0x186>
 8004fec:	9b03      	ldr	r3, [sp, #12]
 8004fee:	3402      	adds	r4, #2
 8004ff0:	1d1a      	adds	r2, r3, #4
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	9203      	str	r2, [sp, #12]
 8004ff6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ffa:	9305      	str	r3, [sp, #20]
 8004ffc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80050b4 <_svfiprintf_r+0x1e8>
 8005000:	2203      	movs	r2, #3
 8005002:	4650      	mov	r0, sl
 8005004:	7821      	ldrb	r1, [r4, #0]
 8005006:	f000 fa09 	bl	800541c <memchr>
 800500a:	b138      	cbz	r0, 800501c <_svfiprintf_r+0x150>
 800500c:	2240      	movs	r2, #64	@ 0x40
 800500e:	9b04      	ldr	r3, [sp, #16]
 8005010:	eba0 000a 	sub.w	r0, r0, sl
 8005014:	4082      	lsls	r2, r0
 8005016:	4313      	orrs	r3, r2
 8005018:	3401      	adds	r4, #1
 800501a:	9304      	str	r3, [sp, #16]
 800501c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005020:	2206      	movs	r2, #6
 8005022:	4825      	ldr	r0, [pc, #148]	@ (80050b8 <_svfiprintf_r+0x1ec>)
 8005024:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005028:	f000 f9f8 	bl	800541c <memchr>
 800502c:	2800      	cmp	r0, #0
 800502e:	d036      	beq.n	800509e <_svfiprintf_r+0x1d2>
 8005030:	4b22      	ldr	r3, [pc, #136]	@ (80050bc <_svfiprintf_r+0x1f0>)
 8005032:	bb1b      	cbnz	r3, 800507c <_svfiprintf_r+0x1b0>
 8005034:	9b03      	ldr	r3, [sp, #12]
 8005036:	3307      	adds	r3, #7
 8005038:	f023 0307 	bic.w	r3, r3, #7
 800503c:	3308      	adds	r3, #8
 800503e:	9303      	str	r3, [sp, #12]
 8005040:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005042:	4433      	add	r3, r6
 8005044:	9309      	str	r3, [sp, #36]	@ 0x24
 8005046:	e76a      	b.n	8004f1e <_svfiprintf_r+0x52>
 8005048:	460c      	mov	r4, r1
 800504a:	2001      	movs	r0, #1
 800504c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005050:	e7a8      	b.n	8004fa4 <_svfiprintf_r+0xd8>
 8005052:	2300      	movs	r3, #0
 8005054:	f04f 0c0a 	mov.w	ip, #10
 8005058:	4619      	mov	r1, r3
 800505a:	3401      	adds	r4, #1
 800505c:	9305      	str	r3, [sp, #20]
 800505e:	4620      	mov	r0, r4
 8005060:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005064:	3a30      	subs	r2, #48	@ 0x30
 8005066:	2a09      	cmp	r2, #9
 8005068:	d903      	bls.n	8005072 <_svfiprintf_r+0x1a6>
 800506a:	2b00      	cmp	r3, #0
 800506c:	d0c6      	beq.n	8004ffc <_svfiprintf_r+0x130>
 800506e:	9105      	str	r1, [sp, #20]
 8005070:	e7c4      	b.n	8004ffc <_svfiprintf_r+0x130>
 8005072:	4604      	mov	r4, r0
 8005074:	2301      	movs	r3, #1
 8005076:	fb0c 2101 	mla	r1, ip, r1, r2
 800507a:	e7f0      	b.n	800505e <_svfiprintf_r+0x192>
 800507c:	ab03      	add	r3, sp, #12
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	462a      	mov	r2, r5
 8005082:	4638      	mov	r0, r7
 8005084:	4b0e      	ldr	r3, [pc, #56]	@ (80050c0 <_svfiprintf_r+0x1f4>)
 8005086:	a904      	add	r1, sp, #16
 8005088:	f3af 8000 	nop.w
 800508c:	1c42      	adds	r2, r0, #1
 800508e:	4606      	mov	r6, r0
 8005090:	d1d6      	bne.n	8005040 <_svfiprintf_r+0x174>
 8005092:	89ab      	ldrh	r3, [r5, #12]
 8005094:	065b      	lsls	r3, r3, #25
 8005096:	f53f af2d 	bmi.w	8004ef4 <_svfiprintf_r+0x28>
 800509a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800509c:	e72c      	b.n	8004ef8 <_svfiprintf_r+0x2c>
 800509e:	ab03      	add	r3, sp, #12
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	462a      	mov	r2, r5
 80050a4:	4638      	mov	r0, r7
 80050a6:	4b06      	ldr	r3, [pc, #24]	@ (80050c0 <_svfiprintf_r+0x1f4>)
 80050a8:	a904      	add	r1, sp, #16
 80050aa:	f000 f87d 	bl	80051a8 <_printf_i>
 80050ae:	e7ed      	b.n	800508c <_svfiprintf_r+0x1c0>
 80050b0:	08005626 	.word	0x08005626
 80050b4:	0800562c 	.word	0x0800562c
 80050b8:	08005630 	.word	0x08005630
 80050bc:	00000000 	.word	0x00000000
 80050c0:	08004e15 	.word	0x08004e15

080050c4 <_printf_common>:
 80050c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050c8:	4616      	mov	r6, r2
 80050ca:	4698      	mov	r8, r3
 80050cc:	688a      	ldr	r2, [r1, #8]
 80050ce:	690b      	ldr	r3, [r1, #16]
 80050d0:	4607      	mov	r7, r0
 80050d2:	4293      	cmp	r3, r2
 80050d4:	bfb8      	it	lt
 80050d6:	4613      	movlt	r3, r2
 80050d8:	6033      	str	r3, [r6, #0]
 80050da:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80050de:	460c      	mov	r4, r1
 80050e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80050e4:	b10a      	cbz	r2, 80050ea <_printf_common+0x26>
 80050e6:	3301      	adds	r3, #1
 80050e8:	6033      	str	r3, [r6, #0]
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	0699      	lsls	r1, r3, #26
 80050ee:	bf42      	ittt	mi
 80050f0:	6833      	ldrmi	r3, [r6, #0]
 80050f2:	3302      	addmi	r3, #2
 80050f4:	6033      	strmi	r3, [r6, #0]
 80050f6:	6825      	ldr	r5, [r4, #0]
 80050f8:	f015 0506 	ands.w	r5, r5, #6
 80050fc:	d106      	bne.n	800510c <_printf_common+0x48>
 80050fe:	f104 0a19 	add.w	sl, r4, #25
 8005102:	68e3      	ldr	r3, [r4, #12]
 8005104:	6832      	ldr	r2, [r6, #0]
 8005106:	1a9b      	subs	r3, r3, r2
 8005108:	42ab      	cmp	r3, r5
 800510a:	dc2b      	bgt.n	8005164 <_printf_common+0xa0>
 800510c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005110:	6822      	ldr	r2, [r4, #0]
 8005112:	3b00      	subs	r3, #0
 8005114:	bf18      	it	ne
 8005116:	2301      	movne	r3, #1
 8005118:	0692      	lsls	r2, r2, #26
 800511a:	d430      	bmi.n	800517e <_printf_common+0xba>
 800511c:	4641      	mov	r1, r8
 800511e:	4638      	mov	r0, r7
 8005120:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005124:	47c8      	blx	r9
 8005126:	3001      	adds	r0, #1
 8005128:	d023      	beq.n	8005172 <_printf_common+0xae>
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	6922      	ldr	r2, [r4, #16]
 800512e:	f003 0306 	and.w	r3, r3, #6
 8005132:	2b04      	cmp	r3, #4
 8005134:	bf14      	ite	ne
 8005136:	2500      	movne	r5, #0
 8005138:	6833      	ldreq	r3, [r6, #0]
 800513a:	f04f 0600 	mov.w	r6, #0
 800513e:	bf08      	it	eq
 8005140:	68e5      	ldreq	r5, [r4, #12]
 8005142:	f104 041a 	add.w	r4, r4, #26
 8005146:	bf08      	it	eq
 8005148:	1aed      	subeq	r5, r5, r3
 800514a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800514e:	bf08      	it	eq
 8005150:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005154:	4293      	cmp	r3, r2
 8005156:	bfc4      	itt	gt
 8005158:	1a9b      	subgt	r3, r3, r2
 800515a:	18ed      	addgt	r5, r5, r3
 800515c:	42b5      	cmp	r5, r6
 800515e:	d11a      	bne.n	8005196 <_printf_common+0xd2>
 8005160:	2000      	movs	r0, #0
 8005162:	e008      	b.n	8005176 <_printf_common+0xb2>
 8005164:	2301      	movs	r3, #1
 8005166:	4652      	mov	r2, sl
 8005168:	4641      	mov	r1, r8
 800516a:	4638      	mov	r0, r7
 800516c:	47c8      	blx	r9
 800516e:	3001      	adds	r0, #1
 8005170:	d103      	bne.n	800517a <_printf_common+0xb6>
 8005172:	f04f 30ff 	mov.w	r0, #4294967295
 8005176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800517a:	3501      	adds	r5, #1
 800517c:	e7c1      	b.n	8005102 <_printf_common+0x3e>
 800517e:	2030      	movs	r0, #48	@ 0x30
 8005180:	18e1      	adds	r1, r4, r3
 8005182:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800518c:	4422      	add	r2, r4
 800518e:	3302      	adds	r3, #2
 8005190:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005194:	e7c2      	b.n	800511c <_printf_common+0x58>
 8005196:	2301      	movs	r3, #1
 8005198:	4622      	mov	r2, r4
 800519a:	4641      	mov	r1, r8
 800519c:	4638      	mov	r0, r7
 800519e:	47c8      	blx	r9
 80051a0:	3001      	adds	r0, #1
 80051a2:	d0e6      	beq.n	8005172 <_printf_common+0xae>
 80051a4:	3601      	adds	r6, #1
 80051a6:	e7d9      	b.n	800515c <_printf_common+0x98>

080051a8 <_printf_i>:
 80051a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051ac:	7e0f      	ldrb	r7, [r1, #24]
 80051ae:	4691      	mov	r9, r2
 80051b0:	2f78      	cmp	r7, #120	@ 0x78
 80051b2:	4680      	mov	r8, r0
 80051b4:	460c      	mov	r4, r1
 80051b6:	469a      	mov	sl, r3
 80051b8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80051ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80051be:	d807      	bhi.n	80051d0 <_printf_i+0x28>
 80051c0:	2f62      	cmp	r7, #98	@ 0x62
 80051c2:	d80a      	bhi.n	80051da <_printf_i+0x32>
 80051c4:	2f00      	cmp	r7, #0
 80051c6:	f000 80d3 	beq.w	8005370 <_printf_i+0x1c8>
 80051ca:	2f58      	cmp	r7, #88	@ 0x58
 80051cc:	f000 80ba 	beq.w	8005344 <_printf_i+0x19c>
 80051d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80051d8:	e03a      	b.n	8005250 <_printf_i+0xa8>
 80051da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80051de:	2b15      	cmp	r3, #21
 80051e0:	d8f6      	bhi.n	80051d0 <_printf_i+0x28>
 80051e2:	a101      	add	r1, pc, #4	@ (adr r1, 80051e8 <_printf_i+0x40>)
 80051e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051e8:	08005241 	.word	0x08005241
 80051ec:	08005255 	.word	0x08005255
 80051f0:	080051d1 	.word	0x080051d1
 80051f4:	080051d1 	.word	0x080051d1
 80051f8:	080051d1 	.word	0x080051d1
 80051fc:	080051d1 	.word	0x080051d1
 8005200:	08005255 	.word	0x08005255
 8005204:	080051d1 	.word	0x080051d1
 8005208:	080051d1 	.word	0x080051d1
 800520c:	080051d1 	.word	0x080051d1
 8005210:	080051d1 	.word	0x080051d1
 8005214:	08005357 	.word	0x08005357
 8005218:	0800527f 	.word	0x0800527f
 800521c:	08005311 	.word	0x08005311
 8005220:	080051d1 	.word	0x080051d1
 8005224:	080051d1 	.word	0x080051d1
 8005228:	08005379 	.word	0x08005379
 800522c:	080051d1 	.word	0x080051d1
 8005230:	0800527f 	.word	0x0800527f
 8005234:	080051d1 	.word	0x080051d1
 8005238:	080051d1 	.word	0x080051d1
 800523c:	08005319 	.word	0x08005319
 8005240:	6833      	ldr	r3, [r6, #0]
 8005242:	1d1a      	adds	r2, r3, #4
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6032      	str	r2, [r6, #0]
 8005248:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800524c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005250:	2301      	movs	r3, #1
 8005252:	e09e      	b.n	8005392 <_printf_i+0x1ea>
 8005254:	6833      	ldr	r3, [r6, #0]
 8005256:	6820      	ldr	r0, [r4, #0]
 8005258:	1d19      	adds	r1, r3, #4
 800525a:	6031      	str	r1, [r6, #0]
 800525c:	0606      	lsls	r6, r0, #24
 800525e:	d501      	bpl.n	8005264 <_printf_i+0xbc>
 8005260:	681d      	ldr	r5, [r3, #0]
 8005262:	e003      	b.n	800526c <_printf_i+0xc4>
 8005264:	0645      	lsls	r5, r0, #25
 8005266:	d5fb      	bpl.n	8005260 <_printf_i+0xb8>
 8005268:	f9b3 5000 	ldrsh.w	r5, [r3]
 800526c:	2d00      	cmp	r5, #0
 800526e:	da03      	bge.n	8005278 <_printf_i+0xd0>
 8005270:	232d      	movs	r3, #45	@ 0x2d
 8005272:	426d      	negs	r5, r5
 8005274:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005278:	230a      	movs	r3, #10
 800527a:	4859      	ldr	r0, [pc, #356]	@ (80053e0 <_printf_i+0x238>)
 800527c:	e011      	b.n	80052a2 <_printf_i+0xfa>
 800527e:	6821      	ldr	r1, [r4, #0]
 8005280:	6833      	ldr	r3, [r6, #0]
 8005282:	0608      	lsls	r0, r1, #24
 8005284:	f853 5b04 	ldr.w	r5, [r3], #4
 8005288:	d402      	bmi.n	8005290 <_printf_i+0xe8>
 800528a:	0649      	lsls	r1, r1, #25
 800528c:	bf48      	it	mi
 800528e:	b2ad      	uxthmi	r5, r5
 8005290:	2f6f      	cmp	r7, #111	@ 0x6f
 8005292:	6033      	str	r3, [r6, #0]
 8005294:	bf14      	ite	ne
 8005296:	230a      	movne	r3, #10
 8005298:	2308      	moveq	r3, #8
 800529a:	4851      	ldr	r0, [pc, #324]	@ (80053e0 <_printf_i+0x238>)
 800529c:	2100      	movs	r1, #0
 800529e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052a2:	6866      	ldr	r6, [r4, #4]
 80052a4:	2e00      	cmp	r6, #0
 80052a6:	bfa8      	it	ge
 80052a8:	6821      	ldrge	r1, [r4, #0]
 80052aa:	60a6      	str	r6, [r4, #8]
 80052ac:	bfa4      	itt	ge
 80052ae:	f021 0104 	bicge.w	r1, r1, #4
 80052b2:	6021      	strge	r1, [r4, #0]
 80052b4:	b90d      	cbnz	r5, 80052ba <_printf_i+0x112>
 80052b6:	2e00      	cmp	r6, #0
 80052b8:	d04b      	beq.n	8005352 <_printf_i+0x1aa>
 80052ba:	4616      	mov	r6, r2
 80052bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80052c0:	fb03 5711 	mls	r7, r3, r1, r5
 80052c4:	5dc7      	ldrb	r7, [r0, r7]
 80052c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052ca:	462f      	mov	r7, r5
 80052cc:	42bb      	cmp	r3, r7
 80052ce:	460d      	mov	r5, r1
 80052d0:	d9f4      	bls.n	80052bc <_printf_i+0x114>
 80052d2:	2b08      	cmp	r3, #8
 80052d4:	d10b      	bne.n	80052ee <_printf_i+0x146>
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	07df      	lsls	r7, r3, #31
 80052da:	d508      	bpl.n	80052ee <_printf_i+0x146>
 80052dc:	6923      	ldr	r3, [r4, #16]
 80052de:	6861      	ldr	r1, [r4, #4]
 80052e0:	4299      	cmp	r1, r3
 80052e2:	bfde      	ittt	le
 80052e4:	2330      	movle	r3, #48	@ 0x30
 80052e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80052ee:	1b92      	subs	r2, r2, r6
 80052f0:	6122      	str	r2, [r4, #16]
 80052f2:	464b      	mov	r3, r9
 80052f4:	4621      	mov	r1, r4
 80052f6:	4640      	mov	r0, r8
 80052f8:	f8cd a000 	str.w	sl, [sp]
 80052fc:	aa03      	add	r2, sp, #12
 80052fe:	f7ff fee1 	bl	80050c4 <_printf_common>
 8005302:	3001      	adds	r0, #1
 8005304:	d14a      	bne.n	800539c <_printf_i+0x1f4>
 8005306:	f04f 30ff 	mov.w	r0, #4294967295
 800530a:	b004      	add	sp, #16
 800530c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	f043 0320 	orr.w	r3, r3, #32
 8005316:	6023      	str	r3, [r4, #0]
 8005318:	2778      	movs	r7, #120	@ 0x78
 800531a:	4832      	ldr	r0, [pc, #200]	@ (80053e4 <_printf_i+0x23c>)
 800531c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	6831      	ldr	r1, [r6, #0]
 8005324:	061f      	lsls	r7, r3, #24
 8005326:	f851 5b04 	ldr.w	r5, [r1], #4
 800532a:	d402      	bmi.n	8005332 <_printf_i+0x18a>
 800532c:	065f      	lsls	r7, r3, #25
 800532e:	bf48      	it	mi
 8005330:	b2ad      	uxthmi	r5, r5
 8005332:	6031      	str	r1, [r6, #0]
 8005334:	07d9      	lsls	r1, r3, #31
 8005336:	bf44      	itt	mi
 8005338:	f043 0320 	orrmi.w	r3, r3, #32
 800533c:	6023      	strmi	r3, [r4, #0]
 800533e:	b11d      	cbz	r5, 8005348 <_printf_i+0x1a0>
 8005340:	2310      	movs	r3, #16
 8005342:	e7ab      	b.n	800529c <_printf_i+0xf4>
 8005344:	4826      	ldr	r0, [pc, #152]	@ (80053e0 <_printf_i+0x238>)
 8005346:	e7e9      	b.n	800531c <_printf_i+0x174>
 8005348:	6823      	ldr	r3, [r4, #0]
 800534a:	f023 0320 	bic.w	r3, r3, #32
 800534e:	6023      	str	r3, [r4, #0]
 8005350:	e7f6      	b.n	8005340 <_printf_i+0x198>
 8005352:	4616      	mov	r6, r2
 8005354:	e7bd      	b.n	80052d2 <_printf_i+0x12a>
 8005356:	6833      	ldr	r3, [r6, #0]
 8005358:	6825      	ldr	r5, [r4, #0]
 800535a:	1d18      	adds	r0, r3, #4
 800535c:	6961      	ldr	r1, [r4, #20]
 800535e:	6030      	str	r0, [r6, #0]
 8005360:	062e      	lsls	r6, r5, #24
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	d501      	bpl.n	800536a <_printf_i+0x1c2>
 8005366:	6019      	str	r1, [r3, #0]
 8005368:	e002      	b.n	8005370 <_printf_i+0x1c8>
 800536a:	0668      	lsls	r0, r5, #25
 800536c:	d5fb      	bpl.n	8005366 <_printf_i+0x1be>
 800536e:	8019      	strh	r1, [r3, #0]
 8005370:	2300      	movs	r3, #0
 8005372:	4616      	mov	r6, r2
 8005374:	6123      	str	r3, [r4, #16]
 8005376:	e7bc      	b.n	80052f2 <_printf_i+0x14a>
 8005378:	6833      	ldr	r3, [r6, #0]
 800537a:	2100      	movs	r1, #0
 800537c:	1d1a      	adds	r2, r3, #4
 800537e:	6032      	str	r2, [r6, #0]
 8005380:	681e      	ldr	r6, [r3, #0]
 8005382:	6862      	ldr	r2, [r4, #4]
 8005384:	4630      	mov	r0, r6
 8005386:	f000 f849 	bl	800541c <memchr>
 800538a:	b108      	cbz	r0, 8005390 <_printf_i+0x1e8>
 800538c:	1b80      	subs	r0, r0, r6
 800538e:	6060      	str	r0, [r4, #4]
 8005390:	6863      	ldr	r3, [r4, #4]
 8005392:	6123      	str	r3, [r4, #16]
 8005394:	2300      	movs	r3, #0
 8005396:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800539a:	e7aa      	b.n	80052f2 <_printf_i+0x14a>
 800539c:	4632      	mov	r2, r6
 800539e:	4649      	mov	r1, r9
 80053a0:	4640      	mov	r0, r8
 80053a2:	6923      	ldr	r3, [r4, #16]
 80053a4:	47d0      	blx	sl
 80053a6:	3001      	adds	r0, #1
 80053a8:	d0ad      	beq.n	8005306 <_printf_i+0x15e>
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	079b      	lsls	r3, r3, #30
 80053ae:	d413      	bmi.n	80053d8 <_printf_i+0x230>
 80053b0:	68e0      	ldr	r0, [r4, #12]
 80053b2:	9b03      	ldr	r3, [sp, #12]
 80053b4:	4298      	cmp	r0, r3
 80053b6:	bfb8      	it	lt
 80053b8:	4618      	movlt	r0, r3
 80053ba:	e7a6      	b.n	800530a <_printf_i+0x162>
 80053bc:	2301      	movs	r3, #1
 80053be:	4632      	mov	r2, r6
 80053c0:	4649      	mov	r1, r9
 80053c2:	4640      	mov	r0, r8
 80053c4:	47d0      	blx	sl
 80053c6:	3001      	adds	r0, #1
 80053c8:	d09d      	beq.n	8005306 <_printf_i+0x15e>
 80053ca:	3501      	adds	r5, #1
 80053cc:	68e3      	ldr	r3, [r4, #12]
 80053ce:	9903      	ldr	r1, [sp, #12]
 80053d0:	1a5b      	subs	r3, r3, r1
 80053d2:	42ab      	cmp	r3, r5
 80053d4:	dcf2      	bgt.n	80053bc <_printf_i+0x214>
 80053d6:	e7eb      	b.n	80053b0 <_printf_i+0x208>
 80053d8:	2500      	movs	r5, #0
 80053da:	f104 0619 	add.w	r6, r4, #25
 80053de:	e7f5      	b.n	80053cc <_printf_i+0x224>
 80053e0:	08005637 	.word	0x08005637
 80053e4:	08005648 	.word	0x08005648

080053e8 <memmove>:
 80053e8:	4288      	cmp	r0, r1
 80053ea:	b510      	push	{r4, lr}
 80053ec:	eb01 0402 	add.w	r4, r1, r2
 80053f0:	d902      	bls.n	80053f8 <memmove+0x10>
 80053f2:	4284      	cmp	r4, r0
 80053f4:	4623      	mov	r3, r4
 80053f6:	d807      	bhi.n	8005408 <memmove+0x20>
 80053f8:	1e43      	subs	r3, r0, #1
 80053fa:	42a1      	cmp	r1, r4
 80053fc:	d008      	beq.n	8005410 <memmove+0x28>
 80053fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005402:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005406:	e7f8      	b.n	80053fa <memmove+0x12>
 8005408:	4601      	mov	r1, r0
 800540a:	4402      	add	r2, r0
 800540c:	428a      	cmp	r2, r1
 800540e:	d100      	bne.n	8005412 <memmove+0x2a>
 8005410:	bd10      	pop	{r4, pc}
 8005412:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005416:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800541a:	e7f7      	b.n	800540c <memmove+0x24>

0800541c <memchr>:
 800541c:	4603      	mov	r3, r0
 800541e:	b510      	push	{r4, lr}
 8005420:	b2c9      	uxtb	r1, r1
 8005422:	4402      	add	r2, r0
 8005424:	4293      	cmp	r3, r2
 8005426:	4618      	mov	r0, r3
 8005428:	d101      	bne.n	800542e <memchr+0x12>
 800542a:	2000      	movs	r0, #0
 800542c:	e003      	b.n	8005436 <memchr+0x1a>
 800542e:	7804      	ldrb	r4, [r0, #0]
 8005430:	3301      	adds	r3, #1
 8005432:	428c      	cmp	r4, r1
 8005434:	d1f6      	bne.n	8005424 <memchr+0x8>
 8005436:	bd10      	pop	{r4, pc}

08005438 <_realloc_r>:
 8005438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800543c:	4680      	mov	r8, r0
 800543e:	4615      	mov	r5, r2
 8005440:	460c      	mov	r4, r1
 8005442:	b921      	cbnz	r1, 800544e <_realloc_r+0x16>
 8005444:	4611      	mov	r1, r2
 8005446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800544a:	f7ff bb95 	b.w	8004b78 <_malloc_r>
 800544e:	b92a      	cbnz	r2, 800545c <_realloc_r+0x24>
 8005450:	f7ff fc98 	bl	8004d84 <_free_r>
 8005454:	2400      	movs	r4, #0
 8005456:	4620      	mov	r0, r4
 8005458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800545c:	f000 f81a 	bl	8005494 <_malloc_usable_size_r>
 8005460:	4285      	cmp	r5, r0
 8005462:	4606      	mov	r6, r0
 8005464:	d802      	bhi.n	800546c <_realloc_r+0x34>
 8005466:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800546a:	d8f4      	bhi.n	8005456 <_realloc_r+0x1e>
 800546c:	4629      	mov	r1, r5
 800546e:	4640      	mov	r0, r8
 8005470:	f7ff fb82 	bl	8004b78 <_malloc_r>
 8005474:	4607      	mov	r7, r0
 8005476:	2800      	cmp	r0, #0
 8005478:	d0ec      	beq.n	8005454 <_realloc_r+0x1c>
 800547a:	42b5      	cmp	r5, r6
 800547c:	462a      	mov	r2, r5
 800547e:	4621      	mov	r1, r4
 8005480:	bf28      	it	cs
 8005482:	4632      	movcs	r2, r6
 8005484:	f7ff fc70 	bl	8004d68 <memcpy>
 8005488:	4621      	mov	r1, r4
 800548a:	4640      	mov	r0, r8
 800548c:	f7ff fc7a 	bl	8004d84 <_free_r>
 8005490:	463c      	mov	r4, r7
 8005492:	e7e0      	b.n	8005456 <_realloc_r+0x1e>

08005494 <_malloc_usable_size_r>:
 8005494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005498:	1f18      	subs	r0, r3, #4
 800549a:	2b00      	cmp	r3, #0
 800549c:	bfbc      	itt	lt
 800549e:	580b      	ldrlt	r3, [r1, r0]
 80054a0:	18c0      	addlt	r0, r0, r3
 80054a2:	4770      	bx	lr

080054a4 <_init>:
 80054a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a6:	bf00      	nop
 80054a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054aa:	bc08      	pop	{r3}
 80054ac:	469e      	mov	lr, r3
 80054ae:	4770      	bx	lr

080054b0 <_fini>:
 80054b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b2:	bf00      	nop
 80054b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054b6:	bc08      	pop	{r3}
 80054b8:	469e      	mov	lr, r3
 80054ba:	4770      	bx	lr
