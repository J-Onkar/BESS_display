
Daly_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054e8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  080055f4  080055f4  000065f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005770  08005770  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005770  08005770  00006770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005778  08005778  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005778  08005778  00006778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800577c  0800577c  0000677c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005780  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  2000005c  080057dc  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  080057dc  00007588  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108ad  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ec9  00000000  00000000  00017932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  0001a800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c6d  00000000  00000000  0001b830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019932  00000000  00000000  0001c49d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014637  00000000  00000000  00035dcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008df78  00000000  00000000  0004a406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d837e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000469c  00000000  00000000  000d83c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000dca60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080055dc 	.word	0x080055dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080055dc 	.word	0x080055dc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HTONS>:
static q_member_t queue_arr[QUEUE_LEN];
static CAN_TxHeaderTypeDef tx_hdr;
static uint32_t tim1, tim2, tim3, tim4;
msg93_rsp_t msg93;

static inline uint16_t HTONS(uint16_t x) {
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	80fb      	strh	r3, [r7, #6]
	return ((x << 8) | ((x >> 8) & 0xFF));
 8000166:	88fb      	ldrh	r3, [r7, #6]
 8000168:	021b      	lsls	r3, r3, #8
 800016a:	b21a      	sxth	r2, r3
 800016c:	88fb      	ldrh	r3, [r7, #6]
 800016e:	0a1b      	lsrs	r3, r3, #8
 8000170:	b29b      	uxth	r3, r3
 8000172:	b21b      	sxth	r3, r3
 8000174:	4313      	orrs	r3, r2
 8000176:	b21b      	sxth	r3, r3
 8000178:	b29b      	uxth	r3, r3
}
 800017a:	4618      	mov	r0, r3
 800017c:	370c      	adds	r7, #12
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr

08000184 <send_can_message>:

static void send_can_message() {
 8000184:	b580      	push	{r7, lr}
 8000186:	b084      	sub	sp, #16
 8000188:	af00      	add	r7, sp, #0

	tx_hdr.ExtId = curr_id;
 800018a:	4b22      	ldr	r3, [pc, #136]	@ (8000214 <send_can_message+0x90>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	4a22      	ldr	r2, [pc, #136]	@ (8000218 <send_can_message+0x94>)
 8000190:	6053      	str	r3, [r2, #4]
	switch (curr_id) {
 8000192:	4b20      	ldr	r3, [pc, #128]	@ (8000214 <send_can_message+0x90>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	4a21      	ldr	r2, [pc, #132]	@ (800021c <send_can_message+0x98>)
 8000198:	4293      	cmp	r3, r2
 800019a:	d01b      	beq.n	80001d4 <send_can_message+0x50>
 800019c:	4a1f      	ldr	r2, [pc, #124]	@ (800021c <send_can_message+0x98>)
 800019e:	4293      	cmp	r3, r2
 80001a0:	d81d      	bhi.n	80001de <send_can_message+0x5a>
 80001a2:	4a1f      	ldr	r2, [pc, #124]	@ (8000220 <send_can_message+0x9c>)
 80001a4:	4293      	cmp	r3, r2
 80001a6:	d011      	beq.n	80001cc <send_can_message+0x48>
 80001a8:	4a1d      	ldr	r2, [pc, #116]	@ (8000220 <send_can_message+0x9c>)
 80001aa:	4293      	cmp	r3, r2
 80001ac:	d817      	bhi.n	80001de <send_can_message+0x5a>
 80001ae:	4a1d      	ldr	r2, [pc, #116]	@ (8000224 <send_can_message+0xa0>)
 80001b0:	4293      	cmp	r3, r2
 80001b2:	d003      	beq.n	80001bc <send_can_message+0x38>
 80001b4:	4a1c      	ldr	r2, [pc, #112]	@ (8000228 <send_can_message+0xa4>)
 80001b6:	4293      	cmp	r3, r2
 80001b8:	d004      	beq.n	80001c4 <send_can_message+0x40>
 80001ba:	e010      	b.n	80001de <send_can_message+0x5a>
	case MSG_QUERY_90: {
		curr_id = MSG_QUERY_91;
 80001bc:	4b15      	ldr	r3, [pc, #84]	@ (8000214 <send_can_message+0x90>)
 80001be:	4a1a      	ldr	r2, [pc, #104]	@ (8000228 <send_can_message+0xa4>)
 80001c0:	601a      	str	r2, [r3, #0]
		break;
 80001c2:	e00c      	b.n	80001de <send_can_message+0x5a>
	}

	case MSG_QUERY_91: {
		curr_id = MSG_QUERY_92;
 80001c4:	4b13      	ldr	r3, [pc, #76]	@ (8000214 <send_can_message+0x90>)
 80001c6:	4a16      	ldr	r2, [pc, #88]	@ (8000220 <send_can_message+0x9c>)
 80001c8:	601a      	str	r2, [r3, #0]
		break;
 80001ca:	e008      	b.n	80001de <send_can_message+0x5a>
	}

	case MSG_QUERY_92: {
		curr_id = MSG_QUERY_93;
 80001cc:	4b11      	ldr	r3, [pc, #68]	@ (8000214 <send_can_message+0x90>)
 80001ce:	4a13      	ldr	r2, [pc, #76]	@ (800021c <send_can_message+0x98>)
 80001d0:	601a      	str	r2, [r3, #0]
		break;
 80001d2:	e004      	b.n	80001de <send_can_message+0x5a>
	}

	case MSG_QUERY_93: {
		curr_id = INVALID_ID;
 80001d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000214 <send_can_message+0x90>)
 80001d6:	f04f 32ff 	mov.w	r2, #4294967295
 80001da:	601a      	str	r2, [r3, #0]
		break;
 80001dc:	bf00      	nop
	}
	}

	uint32_t mailbox;
	uint8_t data[8] = { 0 };
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	2300      	movs	r3, #0
 80001e4:	60bb      	str	r3, [r7, #8]

	if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) > 0) {
 80001e6:	4811      	ldr	r0, [pc, #68]	@ (800022c <send_can_message+0xa8>)
 80001e8:	f001 fa97 	bl	800171a <HAL_CAN_GetTxMailboxesFreeLevel>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d00b      	beq.n	800020a <send_can_message+0x86>
		if (HAL_CAN_AddTxMessage(&hcan, &tx_hdr, data, &mailbox) != HAL_OK) {
 80001f2:	f107 030c 	add.w	r3, r7, #12
 80001f6:	1d3a      	adds	r2, r7, #4
 80001f8:	4907      	ldr	r1, [pc, #28]	@ (8000218 <send_can_message+0x94>)
 80001fa:	480c      	ldr	r0, [pc, #48]	@ (800022c <send_can_message+0xa8>)
 80001fc:	f001 f9be 	bl	800157c <HAL_CAN_AddTxMessage>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <send_can_message+0x86>
			Error_Handler();
 8000206:	f000 fc70 	bl	8000aea <Error_Handler>
		}
	}

}
 800020a:	bf00      	nop
 800020c:	3710      	adds	r7, #16
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	20000078 	.word	0x20000078
 8000218:	20000114 	.word	0x20000114
 800021c:	18930140 	.word	0x18930140
 8000220:	18920140 	.word	0x18920140
 8000224:	18900140 	.word	0x18900140
 8000228:	18910140 	.word	0x18910140
 800022c:	20000144 	.word	0x20000144

08000230 <tx_hdr_init>:

static void tx_hdr_init(void) {
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
	tx_hdr.DLC = 8;
 8000234:	4b09      	ldr	r3, [pc, #36]	@ (800025c <tx_hdr_init+0x2c>)
 8000236:	2208      	movs	r2, #8
 8000238:	611a      	str	r2, [r3, #16]
	tx_hdr.ExtId = INVALID_ID;
 800023a:	4b08      	ldr	r3, [pc, #32]	@ (800025c <tx_hdr_init+0x2c>)
 800023c:	f04f 32ff 	mov.w	r2, #4294967295
 8000240:	605a      	str	r2, [r3, #4]
	tx_hdr.IDE = CAN_ID_EXT;
 8000242:	4b06      	ldr	r3, [pc, #24]	@ (800025c <tx_hdr_init+0x2c>)
 8000244:	2204      	movs	r2, #4
 8000246:	609a      	str	r2, [r3, #8]
	tx_hdr.RTR = CAN_RTR_DATA;
 8000248:	4b04      	ldr	r3, [pc, #16]	@ (800025c <tx_hdr_init+0x2c>)
 800024a:	2200      	movs	r2, #0
 800024c:	60da      	str	r2, [r3, #12]
	tx_hdr.TransmitGlobalTime = DISABLE;
 800024e:	4b03      	ldr	r3, [pc, #12]	@ (800025c <tx_hdr_init+0x2c>)
 8000250:	2200      	movs	r2, #0
 8000252:	751a      	strb	r2, [r3, #20]
}
 8000254:	bf00      	nop
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr
 800025c:	20000114 	.word	0x20000114

08000260 <update_msg90>:

static void update_msg90(uint8_t data[]) {
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]

	msg90_rsp_t msg90;

	(void) memcpy(msg90.gen_data, data, 8);
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	f107 0308 	add.w	r3, r7, #8
 800026e:	6810      	ldr	r0, [r2, #0]
 8000270:	6851      	ldr	r1, [r2, #4]
 8000272:	c303      	stmia	r3!, {r0, r1}

	update_batt_volt_label(HTONS(msg90.batt_volt));
 8000274:	893b      	ldrh	r3, [r7, #8]
 8000276:	4618      	mov	r0, r3
 8000278:	f7ff ff70 	bl	800015c <HTONS>
 800027c:	4603      	mov	r3, r0
 800027e:	4618      	mov	r0, r3
 8000280:	f004 fb00 	bl	8004884 <update_batt_volt_label>
	update_batt_curr_label(2 * (HTONS(msg90.batt_curr) - 30000));
 8000284:	89bb      	ldrh	r3, [r7, #12]
 8000286:	4618      	mov	r0, r3
 8000288:	f7ff ff68 	bl	800015c <HTONS>
 800028c:	4603      	mov	r3, r0
 800028e:	f5a3 43ea 	sub.w	r3, r3, #29952	@ 0x7500
 8000292:	3b30      	subs	r3, #48	@ 0x30
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	4618      	mov	r0, r3
 8000298:	f004 fb06 	bl	80048a8 <update_batt_curr_label>
	update_batt_soc_label(HTONS(msg90.batt_soc));
 800029c:	89fb      	ldrh	r3, [r7, #14]
 800029e:	4618      	mov	r0, r3
 80002a0:	f7ff ff5c 	bl	800015c <HTONS>
 80002a4:	4603      	mov	r3, r0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f004 fb10 	bl	80048cc <update_batt_soc_label>

	if ((HTONS(msg90.batt_soc) <= 100) && (msg93.state != 1U)) {
 80002ac:	89fb      	ldrh	r3, [r7, #14]
 80002ae:	4618      	mov	r0, r3
 80002b0:	f7ff ff54 	bl	800015c <HTONS>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b64      	cmp	r3, #100	@ 0x64
 80002b8:	d80d      	bhi.n	80002d6 <update_msg90+0x76>
 80002ba:	4b10      	ldr	r3, [pc, #64]	@ (80002fc <update_msg90+0x9c>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d009      	beq.n	80002d6 <update_msg90+0x76>
		if (htim3.State == HAL_TIM_STATE_READY) {
 80002c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000300 <update_msg90+0xa0>)
 80002c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d112      	bne.n	80002f4 <update_msg90+0x94>
			HAL_TIM_Base_Start_IT(&htim3);
 80002ce:	480c      	ldr	r0, [pc, #48]	@ (8000300 <update_msg90+0xa0>)
 80002d0:	f002 fdcc 	bl	8002e6c <HAL_TIM_Base_Start_IT>
		if (htim3.State == HAL_TIM_STATE_READY) {
 80002d4:	e00e      	b.n	80002f4 <update_msg90+0x94>
		}
	}

	else {
		if (htim3.State != HAL_TIM_STATE_READY) {
 80002d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000300 <update_msg90+0xa0>)
 80002d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d008      	beq.n	80002f4 <update_msg90+0x94>
			HAL_GPIO_WritePin(Buzzer_pin_GPIO_Port, Buzzer_pin_Pin,
 80002e2:	2200      	movs	r2, #0
 80002e4:	2120      	movs	r1, #32
 80002e6:	4807      	ldr	r0, [pc, #28]	@ (8000304 <update_msg90+0xa4>)
 80002e8:	f002 f8de 	bl	80024a8 <HAL_GPIO_WritePin>
					GPIO_PIN_RESET);
			HAL_TIM_Base_Stop_IT(&htim3);
 80002ec:	4804      	ldr	r0, [pc, #16]	@ (8000300 <update_msg90+0xa0>)
 80002ee:	f002 fe0f 	bl	8002f10 <HAL_TIM_Base_Stop_IT>
		}
	}

}
 80002f2:	e7ff      	b.n	80002f4 <update_msg90+0x94>
 80002f4:	bf00      	nop
 80002f6:	3710      	adds	r7, #16
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	2000013c 	.word	0x2000013c
 8000300:	2000020c 	.word	0x2000020c
 8000304:	40010800 	.word	0x40010800

08000308 <update_msg91>:

static void update_msg91(uint8_t data[]) {
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]

	msg91_rsp_t msg91;

	(void) memcpy(msg91.gen_data, data, 8);
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	f107 0308 	add.w	r3, r7, #8
 8000316:	6810      	ldr	r0, [r2, #0]
 8000318:	6851      	ldr	r1, [r2, #4]
 800031a:	c303      	stmia	r3!, {r0, r1}

	update_max_cellv_label(HTONS(msg91.max_cellv));
 800031c:	893b      	ldrh	r3, [r7, #8]
 800031e:	4618      	mov	r0, r3
 8000320:	f7ff ff1c 	bl	800015c <HTONS>
 8000324:	4603      	mov	r3, r0
 8000326:	4618      	mov	r0, r3
 8000328:	f004 faf4 	bl	8004914 <update_max_cellv_label>
	update_max_cellv_id_label(msg91.max_cellv_id);
 800032c:	7abb      	ldrb	r3, [r7, #10]
 800032e:	4618      	mov	r0, r3
 8000330:	f004 fb02 	bl	8004938 <update_max_cellv_id_label>
	update_min_cellv_label(HTONS(msg91.min_cellv));
 8000334:	f8b7 300b 	ldrh.w	r3, [r7, #11]
 8000338:	b29b      	uxth	r3, r3
 800033a:	4618      	mov	r0, r3
 800033c:	f7ff ff0e 	bl	800015c <HTONS>
 8000340:	4603      	mov	r3, r0
 8000342:	4618      	mov	r0, r3
 8000344:	f004 fb0a 	bl	800495c <update_min_cellv_label>
	update_min_cellv_id_label(msg91.min_cellv_id);
 8000348:	7b7b      	ldrb	r3, [r7, #13]
 800034a:	4618      	mov	r0, r3
 800034c:	f004 fb18 	bl	8004980 <update_min_cellv_id_label>

}
 8000350:	bf00      	nop
 8000352:	3710      	adds	r7, #16
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <update_msg92>:

static void update_msg92(uint8_t data[]) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]

	msg92_rsp_t msg92;

	(void) memcpy(msg92.gen_data, data, 8);
 8000360:	687a      	ldr	r2, [r7, #4]
 8000362:	f107 0308 	add.w	r3, r7, #8
 8000366:	6810      	ldr	r0, [r2, #0]
 8000368:	6851      	ldr	r1, [r2, #4]
 800036a:	c303      	stmia	r3!, {r0, r1}

	update_max_cellt_label(msg92.max_cellt - 40);
 800036c:	7a3b      	ldrb	r3, [r7, #8]
 800036e:	3b28      	subs	r3, #40	@ 0x28
 8000370:	4618      	mov	r0, r3
 8000372:	f004 fb17 	bl	80049a4 <update_max_cellt_label>
	update_max_cellt_id_label(msg92.max_cellt_id);
 8000376:	7a7b      	ldrb	r3, [r7, #9]
 8000378:	4618      	mov	r0, r3
 800037a:	f004 fb25 	bl	80049c8 <update_max_cellt_id_label>
	update_min_cellt_label(msg92.min_cellt - 40);
 800037e:	7abb      	ldrb	r3, [r7, #10]
 8000380:	3b28      	subs	r3, #40	@ 0x28
 8000382:	4618      	mov	r0, r3
 8000384:	f004 fb32 	bl	80049ec <update_min_cellt_label>
	update_min_cellt_id_label(msg92.min_cellt_id);
 8000388:	7afb      	ldrb	r3, [r7, #11]
 800038a:	4618      	mov	r0, r3
 800038c:	f004 fb40 	bl	8004a10 <update_min_cellt_id_label>
}
 8000390:	bf00      	nop
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}

08000398 <update_msg93>:

static void update_msg93(uint8_t data[]) {
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]

	(void) memcpy(msg93.gen_data, data, 8);
 80003a0:	4b04      	ldr	r3, [pc, #16]	@ (80003b4 <update_msg93+0x1c>)
 80003a2:	687a      	ldr	r2, [r7, #4]
 80003a4:	6810      	ldr	r0, [r2, #0]
 80003a6:	6851      	ldr	r1, [r2, #4]
 80003a8:	c303      	stmia	r3!, {r0, r1}

}
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	2000013c 	.word	0x2000013c

080003b8 <read_can_message>:

static void read_can_message(void) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0

	q_member_t *q_member = peek(&rx_queue);
 80003be:	4827      	ldr	r0, [pc, #156]	@ (800045c <read_can_message+0xa4>)
 80003c0:	f004 fc31 	bl	8004c26 <peek>
 80003c4:	6078      	str	r0, [r7, #4]

	if (q_member != NULL) {
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d043      	beq.n	8000454 <read_can_message+0x9c>

		switch (q_member->can_id) {
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a23      	ldr	r2, [pc, #140]	@ (8000460 <read_can_message+0xa8>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d030      	beq.n	8000438 <read_can_message+0x80>
 80003d6:	4a22      	ldr	r2, [pc, #136]	@ (8000460 <read_can_message+0xa8>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d838      	bhi.n	800044e <read_can_message+0x96>
 80003dc:	4a21      	ldr	r2, [pc, #132]	@ (8000464 <read_can_message+0xac>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d01f      	beq.n	8000422 <read_can_message+0x6a>
 80003e2:	4a20      	ldr	r2, [pc, #128]	@ (8000464 <read_can_message+0xac>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d832      	bhi.n	800044e <read_can_message+0x96>
 80003e8:	4a1f      	ldr	r2, [pc, #124]	@ (8000468 <read_can_message+0xb0>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d003      	beq.n	80003f6 <read_can_message+0x3e>
 80003ee:	4a1f      	ldr	r2, [pc, #124]	@ (800046c <read_can_message+0xb4>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d00b      	beq.n	800040c <read_can_message+0x54>
 80003f4:	e02b      	b.n	800044e <read_can_message+0x96>

		case MSG_RSP_90: {
			update_msg90(q_member->data);
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	3304      	adds	r3, #4
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff30 	bl	8000260 <update_msg90>
			tim1 = HAL_GetTick();
 8000400:	f000 feaa 	bl	8001158 <HAL_GetTick>
 8000404:	4603      	mov	r3, r0
 8000406:	4a1a      	ldr	r2, [pc, #104]	@ (8000470 <read_can_message+0xb8>)
 8000408:	6013      	str	r3, [r2, #0]
			break;
 800040a:	e020      	b.n	800044e <read_can_message+0x96>
		}

		case MSG_RSP_91: {
			update_msg91(q_member->data);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	3304      	adds	r3, #4
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff ff79 	bl	8000308 <update_msg91>
			tim2 = HAL_GetTick();
 8000416:	f000 fe9f 	bl	8001158 <HAL_GetTick>
 800041a:	4603      	mov	r3, r0
 800041c:	4a15      	ldr	r2, [pc, #84]	@ (8000474 <read_can_message+0xbc>)
 800041e:	6013      	str	r3, [r2, #0]
			break;
 8000420:	e015      	b.n	800044e <read_can_message+0x96>
		}

		case MSG_RSP_92: {
			update_msg92(q_member->data);
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	3304      	adds	r3, #4
 8000426:	4618      	mov	r0, r3
 8000428:	f7ff ff96 	bl	8000358 <update_msg92>
			tim3 = HAL_GetTick();
 800042c:	f000 fe94 	bl	8001158 <HAL_GetTick>
 8000430:	4603      	mov	r3, r0
 8000432:	4a11      	ldr	r2, [pc, #68]	@ (8000478 <read_can_message+0xc0>)
 8000434:	6013      	str	r3, [r2, #0]
			break;
 8000436:	e00a      	b.n	800044e <read_can_message+0x96>
		}

		case MSG_RSP_93: {
			update_msg93(q_member->data);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	3304      	adds	r3, #4
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff ffab 	bl	8000398 <update_msg93>
			tim4 = HAL_GetTick();
 8000442:	f000 fe89 	bl	8001158 <HAL_GetTick>
 8000446:	4603      	mov	r3, r0
 8000448:	4a0c      	ldr	r2, [pc, #48]	@ (800047c <read_can_message+0xc4>)
 800044a:	6013      	str	r3, [r2, #0]
			break;
 800044c:	bf00      	nop
		}

		}
		dequeue(&rx_queue);
 800044e:	4803      	ldr	r0, [pc, #12]	@ (800045c <read_can_message+0xa4>)
 8000450:	f004 fbb8 	bl	8004bc4 <dequeue>

	}

}
 8000454:	bf00      	nop
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	2000007c 	.word	0x2000007c
 8000460:	18934001 	.word	0x18934001
 8000464:	18924001 	.word	0x18924001
 8000468:	18904001 	.word	0x18904001
 800046c:	18914001 	.word	0x18914001
 8000470:	2000012c 	.word	0x2000012c
 8000474:	20000130 	.word	0x20000130
 8000478:	20000134 	.word	0x20000134
 800047c:	20000138 	.word	0x20000138

08000480 <timer_check>:

static void timer_check(void) {
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0

	if ((HAL_GetTick() - tim1) > 5000U) {
 8000484:	f000 fe68 	bl	8001158 <HAL_GetTick>
 8000488:	4602      	mov	r2, r0
 800048a:	4b24      	ldr	r3, [pc, #144]	@ (800051c <timer_check+0x9c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	1ad3      	subs	r3, r2, r3
 8000490:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000494:	4293      	cmp	r3, r2
 8000496:	d907      	bls.n	80004a8 <timer_check+0x28>
		reset_page1_display();
 8000498:	f004 faf1 	bl	8004a7e <reset_page1_display>
		tim1 = HAL_GetTick();
 800049c:	f000 fe5c 	bl	8001158 <HAL_GetTick>
 80004a0:	4603      	mov	r3, r0
 80004a2:	4a1e      	ldr	r2, [pc, #120]	@ (800051c <timer_check+0x9c>)
 80004a4:	6013      	str	r3, [r2, #0]
			(void) memset(&msg93, 0, sizeof(msg93_rsp_t));
			tim4 = HAL_GetTick();

		}
	}
}
 80004a6:	e037      	b.n	8000518 <timer_check+0x98>
	else if ((HAL_GetTick() - tim2) > 5000U) {
 80004a8:	f000 fe56 	bl	8001158 <HAL_GetTick>
 80004ac:	4602      	mov	r2, r0
 80004ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000520 <timer_check+0xa0>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	1ad3      	subs	r3, r2, r3
 80004b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d907      	bls.n	80004cc <timer_check+0x4c>
		reset_page2_display();
 80004bc:	f004 faec 	bl	8004a98 <reset_page2_display>
		tim2 = HAL_GetTick();
 80004c0:	f000 fe4a 	bl	8001158 <HAL_GetTick>
 80004c4:	4603      	mov	r3, r0
 80004c6:	4a16      	ldr	r2, [pc, #88]	@ (8000520 <timer_check+0xa0>)
 80004c8:	6013      	str	r3, [r2, #0]
}
 80004ca:	e025      	b.n	8000518 <timer_check+0x98>
	else if ((HAL_GetTick() - tim3) > 5000U) {
 80004cc:	f000 fe44 	bl	8001158 <HAL_GetTick>
 80004d0:	4602      	mov	r2, r0
 80004d2:	4b14      	ldr	r3, [pc, #80]	@ (8000524 <timer_check+0xa4>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	1ad3      	subs	r3, r2, r3
 80004d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80004dc:	4293      	cmp	r3, r2
 80004de:	d907      	bls.n	80004f0 <timer_check+0x70>
		reset_page3_display();
 80004e0:	f004 faea 	bl	8004ab8 <reset_page3_display>
		tim3 = HAL_GetTick();
 80004e4:	f000 fe38 	bl	8001158 <HAL_GetTick>
 80004e8:	4603      	mov	r3, r0
 80004ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000524 <timer_check+0xa4>)
 80004ec:	6013      	str	r3, [r2, #0]
}
 80004ee:	e013      	b.n	8000518 <timer_check+0x98>
		if ((HAL_GetTick() - tim4) > 5000U) {
 80004f0:	f000 fe32 	bl	8001158 <HAL_GetTick>
 80004f4:	4602      	mov	r2, r0
 80004f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000528 <timer_check+0xa8>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	1ad3      	subs	r3, r2, r3
 80004fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000500:	4293      	cmp	r3, r2
 8000502:	d909      	bls.n	8000518 <timer_check+0x98>
			(void) memset(&msg93, 0, sizeof(msg93_rsp_t));
 8000504:	2208      	movs	r2, #8
 8000506:	2100      	movs	r1, #0
 8000508:	4808      	ldr	r0, [pc, #32]	@ (800052c <timer_check+0xac>)
 800050a:	f004 fc7d 	bl	8004e08 <memset>
			tim4 = HAL_GetTick();
 800050e:	f000 fe23 	bl	8001158 <HAL_GetTick>
 8000512:	4603      	mov	r3, r0
 8000514:	4a04      	ldr	r2, [pc, #16]	@ (8000528 <timer_check+0xa8>)
 8000516:	6013      	str	r3, [r2, #0]
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	2000012c 	.word	0x2000012c
 8000520:	20000130 	.word	0x20000130
 8000524:	20000134 	.word	0x20000134
 8000528:	20000138 	.word	0x20000138
 800052c:	2000013c 	.word	0x2000013c

08000530 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM1) {
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a17      	ldr	r2, [pc, #92]	@ (800059c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d105      	bne.n	800054e <HAL_TIM_PeriodElapsedCallback+0x1e>
		curr_id = MSG_QUERY_90;
 8000542:	4b17      	ldr	r3, [pc, #92]	@ (80005a0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000544:	4a17      	ldr	r2, [pc, #92]	@ (80005a4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000546:	601a      	str	r2, [r3, #0]
		send_can_message();
 8000548:	f7ff fe1c 	bl	8000184 <send_can_message>
		if (htim->Instance == TIM3) {
			HAL_GPIO_TogglePin(Buzzer_pin_GPIO_Port, Buzzer_pin_Pin);
		}
	}

}
 800054c:	e021      	b.n	8000592 <HAL_TIM_PeriodElapsedCallback+0x62>
	else if (htim->Instance == TIM2) {
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000556:	d113      	bne.n	8000580 <HAL_TIM_PeriodElapsedCallback+0x50>
		update_comm_status_label("Loss of Comm");
 8000558:	4813      	ldr	r0, [pc, #76]	@ (80005a8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800055a:	f004 f9c9 	bl	80048f0 <update_comm_status_label>
		reset_display();
 800055e:	f004 fa69 	bl	8004a34 <reset_display>
		if (htim3.State != HAL_TIM_STATE_READY) {
 8000562:	4b12      	ldr	r3, [pc, #72]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000564:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000568:	b2db      	uxtb	r3, r3
 800056a:	2b01      	cmp	r3, #1
 800056c:	d011      	beq.n	8000592 <HAL_TIM_PeriodElapsedCallback+0x62>
			HAL_GPIO_WritePin(Buzzer_pin_GPIO_Port, Buzzer_pin_Pin,
 800056e:	2200      	movs	r2, #0
 8000570:	2120      	movs	r1, #32
 8000572:	480f      	ldr	r0, [pc, #60]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000574:	f001 ff98 	bl	80024a8 <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop_IT(&htim3);
 8000578:	480c      	ldr	r0, [pc, #48]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800057a:	f002 fcc9 	bl	8002f10 <HAL_TIM_Base_Stop_IT>
}
 800057e:	e008      	b.n	8000592 <HAL_TIM_PeriodElapsedCallback+0x62>
		if (htim->Instance == TIM3) {
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0b      	ldr	r2, [pc, #44]	@ (80005b4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d103      	bne.n	8000592 <HAL_TIM_PeriodElapsedCallback+0x62>
			HAL_GPIO_TogglePin(Buzzer_pin_GPIO_Port, Buzzer_pin_Pin);
 800058a:	2120      	movs	r1, #32
 800058c:	4808      	ldr	r0, [pc, #32]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800058e:	f001 ffa3 	bl	80024d8 <HAL_GPIO_TogglePin>
}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40012c00 	.word	0x40012c00
 80005a0:	20000078 	.word	0x20000078
 80005a4:	18900140 	.word	0x18900140
 80005a8:	080055f4 	.word	0x080055f4
 80005ac:	2000020c 	.word	0x2000020c
 80005b0:	40010800 	.word	0x40010800
 80005b4:	40000400 	.word	0x40000400

080005b8 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	if (curr_id != INVALID_ID) {
 80005c0:	4b05      	ldr	r3, [pc, #20]	@ (80005d8 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c8:	d001      	beq.n	80005ce <HAL_CAN_TxMailbox0CompleteCallback+0x16>
		send_can_message();
 80005ca:	f7ff fddb 	bl	8000184 <send_can_message>
	}
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000078 	.word	0x20000078

080005dc <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	if (curr_id != INVALID_ID) {
 80005e4:	4b05      	ldr	r3, [pc, #20]	@ (80005fc <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005ec:	d001      	beq.n	80005f2 <HAL_CAN_TxMailbox1CompleteCallback+0x16>
		send_can_message();
 80005ee:	f7ff fdc9 	bl	8000184 <send_can_message>
	}
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000078 	.word	0x20000078

08000600 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if (curr_id != INVALID_ID) {
 8000608:	4b05      	ldr	r3, [pc, #20]	@ (8000620 <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000610:	d001      	beq.n	8000616 <HAL_CAN_TxMailbox2CompleteCallback+0x16>
		send_can_message();
 8000612:	f7ff fdb7 	bl	8000184 <send_can_message>
	}
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000078 	.word	0x20000078

08000624 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b08c      	sub	sp, #48	@ 0x30
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]

	CAN_RxHeaderTypeDef rx_hdr;
	uint8_t rx_data[8] = { 0 };
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	2300      	movs	r3, #0
 8000632:	613b      	str	r3, [r7, #16]

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_hdr, rx_data) != HAL_OK) {
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	f107 0214 	add.w	r2, r7, #20
 800063c:	2100      	movs	r1, #0
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f001 f89f 	bl	8001782 <HAL_CAN_GetRxMessage>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
		Error_Handler();
 800064a:	f000 fa4e 	bl	8000aea <Error_Handler>
	}

	enqueue(&rx_queue, rx_hdr.ExtId, rx_data);
 800064e:	69bb      	ldr	r3, [r7, #24]
 8000650:	f107 020c 	add.w	r2, r7, #12
 8000654:	4619      	mov	r1, r3
 8000656:	4803      	ldr	r0, [pc, #12]	@ (8000664 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000658:	f004 fa7b 	bl	8004b52 <enqueue>
}
 800065c:	bf00      	nop
 800065e:	3730      	adds	r7, #48	@ 0x30
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	2000007c 	.word	0x2000007c

08000668 <app_init>:

void app_init(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	curr_id = INVALID_ID;
 800066c:	4b13      	ldr	r3, [pc, #76]	@ (80006bc <app_init+0x54>)
 800066e:	f04f 32ff 	mov.w	r2, #4294967295
 8000672:	601a      	str	r2, [r3, #0]
	tx_hdr_init();
 8000674:	f7ff fddc 	bl	8000230 <tx_hdr_init>
	queue_init(&rx_queue, queue_arr, QUEUE_LEN);
 8000678:	220c      	movs	r2, #12
 800067a:	4911      	ldr	r1, [pc, #68]	@ (80006c0 <app_init+0x58>)
 800067c:	4811      	ldr	r0, [pc, #68]	@ (80006c4 <app_init+0x5c>)
 800067e:	f004 fa2b 	bl	8004ad8 <queue_init>
	nextion_disp_init();
 8000682:	f004 f831 	bl	80046e8 <nextion_disp_init>
	reset_display();
 8000686:	f004 f9d5 	bl	8004a34 <reset_display>
	tim1 = HAL_GetTick();
 800068a:	f000 fd65 	bl	8001158 <HAL_GetTick>
 800068e:	4603      	mov	r3, r0
 8000690:	4a0d      	ldr	r2, [pc, #52]	@ (80006c8 <app_init+0x60>)
 8000692:	6013      	str	r3, [r2, #0]
	tim2 = HAL_GetTick();
 8000694:	f000 fd60 	bl	8001158 <HAL_GetTick>
 8000698:	4603      	mov	r3, r0
 800069a:	4a0c      	ldr	r2, [pc, #48]	@ (80006cc <app_init+0x64>)
 800069c:	6013      	str	r3, [r2, #0]
	tim3 = HAL_GetTick();
 800069e:	f000 fd5b 	bl	8001158 <HAL_GetTick>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a0a      	ldr	r2, [pc, #40]	@ (80006d0 <app_init+0x68>)
 80006a6:	6013      	str	r3, [r2, #0]
	tim4 = HAL_GetTick();
 80006a8:	f000 fd56 	bl	8001158 <HAL_GetTick>
 80006ac:	4603      	mov	r3, r0
 80006ae:	4a09      	ldr	r2, [pc, #36]	@ (80006d4 <app_init+0x6c>)
 80006b0:	6013      	str	r3, [r2, #0]
	update_comm_status_label("");
 80006b2:	4809      	ldr	r0, [pc, #36]	@ (80006d8 <app_init+0x70>)
 80006b4:	f004 f91c 	bl	80048f0 <update_comm_status_label>
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000078 	.word	0x20000078
 80006c0:	20000084 	.word	0x20000084
 80006c4:	2000007c 	.word	0x2000007c
 80006c8:	2000012c 	.word	0x2000012c
 80006cc:	20000130 	.word	0x20000130
 80006d0:	20000134 	.word	0x20000134
 80006d4:	20000138 	.word	0x20000138
 80006d8:	08005604 	.word	0x08005604

080006dc <can_init>:

void can_init(void) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	@ 0x50
 80006e0:	af00      	add	r7, sp, #0

	CAN_FilterTypeDef filter1, filter2;

	filter1.FilterActivation = CAN_FILTER_ENABLE;
 80006e2:	2301      	movs	r3, #1
 80006e4:	64bb      	str	r3, [r7, #72]	@ 0x48
	filter1.FilterBank = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	filter1.FilterFIFOAssignment = CAN_RX_FIFO0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	63bb      	str	r3, [r7, #56]	@ 0x38
	filter1.FilterMode = CAN_FILTERMODE_IDLIST;
 80006ee:	2301      	movs	r3, #1
 80006f0:	643b      	str	r3, [r7, #64]	@ 0x40
	filter1.FilterScale = CAN_FILTERSCALE_32BIT;
 80006f2:	2301      	movs	r3, #1
 80006f4:	647b      	str	r3, [r7, #68]	@ 0x44
	filter1.FilterIdHigh = (MSG_RSP_90 << 3) >> 16;
 80006f6:	f24c 4382 	movw	r3, #50306	@ 0xc482
 80006fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	filter1.FilterIdLow = ((MSG_RSP_90 << 3) & 0xFFFF) | 4U;
 80006fc:	230c      	movs	r3, #12
 80006fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
	filter1.FilterMaskIdHigh = (MSG_RSP_91 << 3) >> 16;
 8000700:	f24c 438a 	movw	r3, #50314	@ 0xc48a
 8000704:	633b      	str	r3, [r7, #48]	@ 0x30
	filter1.FilterMaskIdLow = ((MSG_RSP_91 << 3) & 0xFFFF) | 4U;
 8000706:	230c      	movs	r3, #12
 8000708:	637b      	str	r3, [r7, #52]	@ 0x34

	filter2.FilterActivation = CAN_FILTER_ENABLE;
 800070a:	2301      	movs	r3, #1
 800070c:	623b      	str	r3, [r7, #32]
	filter2.FilterBank = 1;
 800070e:	2301      	movs	r3, #1
 8000710:	617b      	str	r3, [r7, #20]
	filter2.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
	filter2.FilterMode = CAN_FILTERMODE_IDLIST;
 8000716:	2301      	movs	r3, #1
 8000718:	61bb      	str	r3, [r7, #24]
	filter2.FilterScale = CAN_FILTERSCALE_32BIT;
 800071a:	2301      	movs	r3, #1
 800071c:	61fb      	str	r3, [r7, #28]
	filter2.FilterIdHigh = (MSG_RSP_92 << 3) >> 16;
 800071e:	f24c 4392 	movw	r3, #50322	@ 0xc492
 8000722:	603b      	str	r3, [r7, #0]
	filter2.FilterIdLow = ((MSG_RSP_92 << 3) & 0xFFFF) | 4U;
 8000724:	230c      	movs	r3, #12
 8000726:	607b      	str	r3, [r7, #4]
	filter2.FilterMaskIdHigh = (MSG_RSP_93 << 3) >> 16;
 8000728:	f24c 439a 	movw	r3, #50330	@ 0xc49a
 800072c:	60bb      	str	r3, [r7, #8]
	filter2.FilterMaskIdLow = ((MSG_RSP_93 << 3) & 0xFFFF) | 4U;
 800072e:	230c      	movs	r3, #12
 8000730:	60fb      	str	r3, [r7, #12]

	if (HAL_CAN_ConfigFilter(&hcan, &filter1) != HAL_OK) {
 8000732:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000736:	4619      	mov	r1, r3
 8000738:	4817      	ldr	r0, [pc, #92]	@ (8000798 <can_init+0xbc>)
 800073a:	f000 fe12 	bl	8001362 <HAL_CAN_ConfigFilter>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <can_init+0x6c>
		Error_Handler();
 8000744:	f000 f9d1 	bl	8000aea <Error_Handler>
	}

	if (HAL_CAN_ConfigFilter(&hcan, &filter2) != HAL_OK) {
 8000748:	463b      	mov	r3, r7
 800074a:	4619      	mov	r1, r3
 800074c:	4812      	ldr	r0, [pc, #72]	@ (8000798 <can_init+0xbc>)
 800074e:	f000 fe08 	bl	8001362 <HAL_CAN_ConfigFilter>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <can_init+0x80>
		Error_Handler();
 8000758:	f000 f9c7 	bl	8000aea <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 800075c:	2102      	movs	r1, #2
 800075e:	480e      	ldr	r0, [pc, #56]	@ (8000798 <can_init+0xbc>)
 8000760:	f001 f930 	bl	80019c4 <HAL_CAN_ActivateNotification>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <can_init+0x92>
			!= HAL_OK) {
		Error_Handler();
 800076a:	f000 f9be 	bl	8000aea <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_TX_MAILBOX_EMPTY)
 800076e:	2101      	movs	r1, #1
 8000770:	4809      	ldr	r0, [pc, #36]	@ (8000798 <can_init+0xbc>)
 8000772:	f001 f927 	bl	80019c4 <HAL_CAN_ActivateNotification>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <can_init+0xa4>
			!= HAL_OK) {
		Error_Handler();
 800077c:	f000 f9b5 	bl	8000aea <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8000780:	4805      	ldr	r0, [pc, #20]	@ (8000798 <can_init+0xbc>)
 8000782:	f000 feb7 	bl	80014f4 <HAL_CAN_Start>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <can_init+0xb4>
		Error_Handler();
 800078c:	f000 f9ad 	bl	8000aea <Error_Handler>
	}

}
 8000790:	bf00      	nop
 8000792:	3750      	adds	r7, #80	@ 0x50
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000144 	.word	0x20000144

0800079c <timer_init>:

void timer_init(void) {
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0

	if (HAL_TIM_Base_Start_IT(&htim1)) {
 80007a0:	480b      	ldr	r0, [pc, #44]	@ (80007d0 <timer_init+0x34>)
 80007a2:	f002 fb63 	bl	8002e6c <HAL_TIM_Base_Start_IT>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <timer_init+0x14>
		Error_Handler();
 80007ac:	f000 f99d 	bl	8000aea <Error_Handler>
	}

	__HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 80007b0:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <timer_init+0x38>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f06f 0201 	mvn.w	r2, #1
 80007b8:	611a      	str	r2, [r3, #16]

	if (HAL_TIM_Base_Start_IT(&htim2)) {
 80007ba:	4806      	ldr	r0, [pc, #24]	@ (80007d4 <timer_init+0x38>)
 80007bc:	f002 fb56 	bl	8002e6c <HAL_TIM_Base_Start_IT>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <timer_init+0x2e>
		Error_Handler();
 80007c6:	f000 f990 	bl	8000aea <Error_Handler>
	}

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	2000017c 	.word	0x2000017c
 80007d4:	200001c4 	.word	0x200001c4

080007d8 <app_handler>:

void app_handler(void) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

	while (1) {
		timer_check();
 80007dc:	f7ff fe50 	bl	8000480 <timer_check>

		if (!is_empty(&rx_queue)) {
 80007e0:	480a      	ldr	r0, [pc, #40]	@ (800080c <app_handler+0x34>)
 80007e2:	f004 f994 	bl	8004b0e <is_empty>
 80007e6:	4603      	mov	r3, r0
 80007e8:	f083 0301 	eor.w	r3, r3, #1
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d008      	beq.n	8000804 <app_handler+0x2c>
			read_can_message();
 80007f2:	f7ff fde1 	bl	80003b8 <read_can_message>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 80007f6:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <app_handler+0x38>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	@ 0x24
			update_comm_status_label("");
 80007fe:	4805      	ldr	r0, [pc, #20]	@ (8000814 <app_handler+0x3c>)
 8000800:	f004 f876 	bl	80048f0 <update_comm_status_label>
		}
		HAL_IWDG_Refresh(&hiwdg);
 8000804:	4804      	ldr	r0, [pc, #16]	@ (8000818 <app_handler+0x40>)
 8000806:	f001 fec2 	bl	800258e <HAL_IWDG_Refresh>
		timer_check();
 800080a:	e7e7      	b.n	80007dc <app_handler+0x4>
 800080c:	2000007c 	.word	0x2000007c
 8000810:	200001c4 	.word	0x200001c4
 8000814:	08005604 	.word	0x08005604
 8000818:	2000016c 	.word	0x2000016c

0800081c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000820:	4b17      	ldr	r3, [pc, #92]	@ (8000880 <MX_CAN_Init+0x64>)
 8000822:	4a18      	ldr	r2, [pc, #96]	@ (8000884 <MX_CAN_Init+0x68>)
 8000824:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8000826:	4b16      	ldr	r3, [pc, #88]	@ (8000880 <MX_CAN_Init+0x64>)
 8000828:	2208      	movs	r2, #8
 800082a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800082c:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <MX_CAN_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000832:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <MX_CAN_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000838:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <MX_CAN_Init+0x64>)
 800083a:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 800083e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000840:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <MX_CAN_Init+0x64>)
 8000842:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000846:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000848:	4b0d      	ldr	r3, [pc, #52]	@ (8000880 <MX_CAN_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800084e:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <MX_CAN_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000854:	4b0a      	ldr	r3, [pc, #40]	@ (8000880 <MX_CAN_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800085a:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <MX_CAN_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000860:	4b07      	ldr	r3, [pc, #28]	@ (8000880 <MX_CAN_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <MX_CAN_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800086c:	4804      	ldr	r0, [pc, #16]	@ (8000880 <MX_CAN_Init+0x64>)
 800086e:	f000 fc7d 	bl	800116c <HAL_CAN_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000878:	f000 f937 	bl	8000aea <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000144 	.word	0x20000144
 8000884:	40006400 	.word	0x40006400

08000888 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a2c      	ldr	r2, [pc, #176]	@ (8000954 <HAL_CAN_MspInit+0xcc>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d151      	bne.n	800094c <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008a8:	4b2b      	ldr	r3, [pc, #172]	@ (8000958 <HAL_CAN_MspInit+0xd0>)
 80008aa:	69db      	ldr	r3, [r3, #28]
 80008ac:	4a2a      	ldr	r2, [pc, #168]	@ (8000958 <HAL_CAN_MspInit+0xd0>)
 80008ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008b2:	61d3      	str	r3, [r2, #28]
 80008b4:	4b28      	ldr	r3, [pc, #160]	@ (8000958 <HAL_CAN_MspInit+0xd0>)
 80008b6:	69db      	ldr	r3, [r3, #28]
 80008b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c0:	4b25      	ldr	r3, [pc, #148]	@ (8000958 <HAL_CAN_MspInit+0xd0>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a24      	ldr	r2, [pc, #144]	@ (8000958 <HAL_CAN_MspInit+0xd0>)
 80008c6:	f043 0304 	orr.w	r3, r3, #4
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b22      	ldr	r3, [pc, #136]	@ (8000958 <HAL_CAN_MspInit+0xd0>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f003 0304 	and.w	r3, r3, #4
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80008d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80008dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	f107 0310 	add.w	r3, r7, #16
 80008ea:	4619      	mov	r1, r3
 80008ec:	481b      	ldr	r0, [pc, #108]	@ (800095c <HAL_CAN_MspInit+0xd4>)
 80008ee:	f001 fc57 	bl	80021a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008fc:	2303      	movs	r3, #3
 80008fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	4619      	mov	r1, r3
 8000906:	4815      	ldr	r0, [pc, #84]	@ (800095c <HAL_CAN_MspInit+0xd4>)
 8000908:	f001 fc4a 	bl	80021a0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2100      	movs	r1, #0
 8000910:	2013      	movs	r0, #19
 8000912:	f001 fb5c 	bl	8001fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000916:	2013      	movs	r0, #19
 8000918:	f001 fb75 	bl	8002006 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800091c:	2200      	movs	r2, #0
 800091e:	2100      	movs	r1, #0
 8000920:	2014      	movs	r0, #20
 8000922:	f001 fb54 	bl	8001fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000926:	2014      	movs	r0, #20
 8000928:	f001 fb6d 	bl	8002006 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	2100      	movs	r1, #0
 8000930:	2015      	movs	r0, #21
 8000932:	f001 fb4c 	bl	8001fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000936:	2015      	movs	r0, #21
 8000938:	f001 fb65 	bl	8002006 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	2016      	movs	r0, #22
 8000942:	f001 fb44 	bl	8001fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000946:	2016      	movs	r0, #22
 8000948:	f001 fb5d 	bl	8002006 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800094c:	bf00      	nop
 800094e:	3720      	adds	r7, #32
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40006400 	.word	0x40006400
 8000958:	40021000 	.word	0x40021000
 800095c:	40010800 	.word	0x40010800

08000960 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	f107 0310 	add.w	r3, r7, #16
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000974:	4b1d      	ldr	r3, [pc, #116]	@ (80009ec <MX_GPIO_Init+0x8c>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a1c      	ldr	r2, [pc, #112]	@ (80009ec <MX_GPIO_Init+0x8c>)
 800097a:	f043 0310 	orr.w	r3, r3, #16
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b1a      	ldr	r3, [pc, #104]	@ (80009ec <MX_GPIO_Init+0x8c>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0310 	and.w	r3, r3, #16
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800098c:	4b17      	ldr	r3, [pc, #92]	@ (80009ec <MX_GPIO_Init+0x8c>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a16      	ldr	r2, [pc, #88]	@ (80009ec <MX_GPIO_Init+0x8c>)
 8000992:	f043 0320 	orr.w	r3, r3, #32
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <MX_GPIO_Init+0x8c>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f003 0320 	and.w	r3, r3, #32
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a4:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <MX_GPIO_Init+0x8c>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a10      	ldr	r2, [pc, #64]	@ (80009ec <MX_GPIO_Init+0x8c>)
 80009aa:	f043 0304 	orr.w	r3, r3, #4
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <MX_GPIO_Init+0x8c>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0304 	and.w	r3, r3, #4
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_pin_GPIO_Port, Buzzer_pin_Pin, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	2120      	movs	r1, #32
 80009c0:	480b      	ldr	r0, [pc, #44]	@ (80009f0 <MX_GPIO_Init+0x90>)
 80009c2:	f001 fd71 	bl	80024a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_pin_Pin;
 80009c6:	2320      	movs	r3, #32
 80009c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Buzzer_pin_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 0310 	add.w	r3, r7, #16
 80009da:	4619      	mov	r1, r3
 80009dc:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <MX_GPIO_Init+0x90>)
 80009de:	f001 fbdf 	bl	80021a0 <HAL_GPIO_Init>

}
 80009e2:	bf00      	nop
 80009e4:	3720      	adds	r7, #32
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40010800 	.word	0x40010800

080009f4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80009f8:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <MX_IWDG_Init+0x2c>)
 80009fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000a24 <MX_IWDG_Init+0x30>)
 80009fc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80009fe:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <MX_IWDG_Init+0x2c>)
 8000a00:	2203      	movs	r2, #3
 8000a02:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4000;
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <MX_IWDG_Init+0x2c>)
 8000a06:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000a0a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000a0c:	4804      	ldr	r0, [pc, #16]	@ (8000a20 <MX_IWDG_Init+0x2c>)
 8000a0e:	f001 fd7c 	bl	800250a <HAL_IWDG_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000a18:	f000 f867 	bl	8000aea <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2000016c 	.word	0x2000016c
 8000a24:	40003000 	.word	0x40003000

08000a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2c:	f000 fb3c 	bl	80010a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a30:	f000 f818 	bl	8000a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a34:	f7ff ff94 	bl	8000960 <MX_GPIO_Init>
  MX_CAN_Init();
 8000a38:	f7ff fef0 	bl	800081c <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000a3c:	f000 fa90 	bl	8000f60 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000a40:	f000 f944 	bl	8000ccc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a44:	f000 f994 	bl	8000d70 <MX_TIM2_Init>
  MX_IWDG_Init();
 8000a48:	f7ff ffd4 	bl	80009f4 <MX_IWDG_Init>
  MX_TIM3_Init();
 8000a4c:	f000 f9de 	bl	8000e0c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  app_init();
 8000a50:	f7ff fe0a 	bl	8000668 <app_init>
  can_init();
 8000a54:	f7ff fe42 	bl	80006dc <can_init>
  timer_init();
 8000a58:	f7ff fea0 	bl	800079c <timer_init>
  app_handler();
 8000a5c:	f7ff febc 	bl	80007d8 <app_handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <main+0x38>

08000a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b090      	sub	sp, #64	@ 0x40
 8000a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6a:	f107 0318 	add.w	r3, r7, #24
 8000a6e:	2228      	movs	r2, #40	@ 0x28
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f004 f9c8 	bl	8004e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a86:	230a      	movs	r3, #10
 8000a88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a8e:	2310      	movs	r3, #16
 8000a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a92:	2301      	movs	r3, #1
 8000a94:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a96:	2302      	movs	r3, #2
 8000a98:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000a9e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa4:	f107 0318 	add.w	r3, r7, #24
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 fd7f 	bl	80025ac <HAL_RCC_OscConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000ab4:	f000 f819 	bl	8000aea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab8:	230f      	movs	r3, #15
 8000aba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000abc:	2302      	movs	r3, #2
 8000abe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ac4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ac8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 ffec 	bl	8002ab0 <HAL_RCC_ClockConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000ade:	f000 f804 	bl	8000aea <Error_Handler>
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	3740      	adds	r7, #64	@ 0x40
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aee:	b672      	cpsid	i
}
 8000af0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af2:	bf00      	nop
 8000af4:	e7fd      	b.n	8000af2 <Error_Handler+0x8>
	...

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <HAL_MspInit+0x5c>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	4a14      	ldr	r2, [pc, #80]	@ (8000b54 <HAL_MspInit+0x5c>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6193      	str	r3, [r2, #24]
 8000b0a:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <HAL_MspInit+0x5c>)
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <HAL_MspInit+0x5c>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b54 <HAL_MspInit+0x5c>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b20:	61d3      	str	r3, [r2, #28]
 8000b22:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <HAL_MspInit+0x5c>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <HAL_MspInit+0x60>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	4a04      	ldr	r2, [pc, #16]	@ (8000b58 <HAL_MspInit+0x60>)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40010000 	.word	0x40010000

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <NMI_Handler+0x4>

08000b64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <MemManage_Handler+0x4>

08000b74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bac:	f000 fac2 	bl	8001134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000bb8:	4802      	ldr	r0, [pc, #8]	@ (8000bc4 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000bba:	f000 ff28 	bl	8001a0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000144 	.word	0x20000144

08000bc8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000bcc:	4802      	ldr	r0, [pc, #8]	@ (8000bd8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000bce:	f000 ff1e 	bl	8001a0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000144 	.word	0x20000144

08000bdc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000be0:	4802      	ldr	r0, [pc, #8]	@ (8000bec <CAN1_RX1_IRQHandler+0x10>)
 8000be2:	f000 ff14 	bl	8001a0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000144 	.word	0x20000144

08000bf0 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000bf4:	4802      	ldr	r0, [pc, #8]	@ (8000c00 <CAN1_SCE_IRQHandler+0x10>)
 8000bf6:	f000 ff0a 	bl	8001a0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000144 	.word	0x20000144

08000c04 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c08:	4802      	ldr	r0, [pc, #8]	@ (8000c14 <TIM1_UP_IRQHandler+0x10>)
 8000c0a:	f002 f9af 	bl	8002f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2000017c 	.word	0x2000017c

08000c18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c1c:	4802      	ldr	r0, [pc, #8]	@ (8000c28 <TIM2_IRQHandler+0x10>)
 8000c1e:	f002 f9a5 	bl	8002f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200001c4 	.word	0x200001c4

08000c2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c30:	4802      	ldr	r0, [pc, #8]	@ (8000c3c <TIM3_IRQHandler+0x10>)
 8000c32:	f002 f99b 	bl	8002f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000020c 	.word	0x2000020c

08000c40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c44:	4802      	ldr	r0, [pc, #8]	@ (8000c50 <USART1_IRQHandler+0x10>)
 8000c46:	f002 fde5 	bl	8003814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000254 	.word	0x20000254

08000c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c5c:	4a14      	ldr	r2, [pc, #80]	@ (8000cb0 <_sbrk+0x5c>)
 8000c5e:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <_sbrk+0x60>)
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c68:	4b13      	ldr	r3, [pc, #76]	@ (8000cb8 <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c70:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <_sbrk+0x64>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	@ (8000cbc <_sbrk+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d207      	bcs.n	8000c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c84:	f004 f8d8 	bl	8004e38 <__errno>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	e009      	b.n	8000ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c94:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	@ (8000cb8 <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4a05      	ldr	r2, [pc, #20]	@ (8000cb8 <_sbrk+0x64>)
 8000ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20005000 	.word	0x20005000
 8000cb4:	00000400 	.word	0x00000400
 8000cb8:	20000178 	.word	0x20000178
 8000cbc:	20000588 	.word	0x20000588

08000cc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd2:	f107 0308 	add.w	r3, r7, #8
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <MX_TIM1_Init+0x9c>)
 8000cea:	4a20      	ldr	r2, [pc, #128]	@ (8000d6c <MX_TIM1_Init+0xa0>)
 8000cec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400;
 8000cee:	4b1e      	ldr	r3, [pc, #120]	@ (8000d68 <MX_TIM1_Init+0x9c>)
 8000cf0:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 8000cf4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d68 <MX_TIM1_Init+0x9c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d68 <MX_TIM1_Init+0x9c>)
 8000cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d04:	4b18      	ldr	r3, [pc, #96]	@ (8000d68 <MX_TIM1_Init+0x9c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d0a:	4b17      	ldr	r3, [pc, #92]	@ (8000d68 <MX_TIM1_Init+0x9c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d10:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <MX_TIM1_Init+0x9c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d16:	4814      	ldr	r0, [pc, #80]	@ (8000d68 <MX_TIM1_Init+0x9c>)
 8000d18:	f002 f858 	bl	8002dcc <HAL_TIM_Base_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d22:	f7ff fee2 	bl	8000aea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d2c:	f107 0308 	add.w	r3, r7, #8
 8000d30:	4619      	mov	r1, r3
 8000d32:	480d      	ldr	r0, [pc, #52]	@ (8000d68 <MX_TIM1_Init+0x9c>)
 8000d34:	f002 fa22 	bl	800317c <HAL_TIM_ConfigClockSource>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000d3e:	f7ff fed4 	bl	8000aea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d42:	2300      	movs	r3, #0
 8000d44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4806      	ldr	r0, [pc, #24]	@ (8000d68 <MX_TIM1_Init+0x9c>)
 8000d50:	f002 fbf8 	bl	8003544 <HAL_TIMEx_MasterConfigSynchronization>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000d5a:	f7ff fec6 	bl	8000aea <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	2000017c 	.word	0x2000017c
 8000d6c:	40012c00 	.word	0x40012c00

08000d70 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d76:	f107 0308 	add.w	r3, r7, #8
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d84:	463b      	mov	r3, r7
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000e08 <MX_TIM2_Init+0x98>)
 8000d8e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64000;
 8000d94:	4b1c      	ldr	r3, [pc, #112]	@ (8000e08 <MX_TIM2_Init+0x98>)
 8000d96:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 8000d9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e08 <MX_TIM2_Init+0x98>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8000da2:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <MX_TIM2_Init+0x98>)
 8000da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000da8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000daa:	4b17      	ldr	r3, [pc, #92]	@ (8000e08 <MX_TIM2_Init+0x98>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db0:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <MX_TIM2_Init+0x98>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000db6:	4814      	ldr	r0, [pc, #80]	@ (8000e08 <MX_TIM2_Init+0x98>)
 8000db8:	f002 f808 	bl	8002dcc <HAL_TIM_Base_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000dc2:	f7ff fe92 	bl	8000aea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dcc:	f107 0308 	add.w	r3, r7, #8
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480d      	ldr	r0, [pc, #52]	@ (8000e08 <MX_TIM2_Init+0x98>)
 8000dd4:	f002 f9d2 	bl	800317c <HAL_TIM_ConfigClockSource>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000dde:	f7ff fe84 	bl	8000aea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dea:	463b      	mov	r3, r7
 8000dec:	4619      	mov	r1, r3
 8000dee:	4806      	ldr	r0, [pc, #24]	@ (8000e08 <MX_TIM2_Init+0x98>)
 8000df0:	f002 fba8 	bl	8003544 <HAL_TIMEx_MasterConfigSynchronization>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000dfa:	f7ff fe76 	bl	8000aea <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200001c4 	.word	0x200001c4

08000e0c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e12:	f107 0308 	add.w	r3, r7, #8
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e20:	463b      	mov	r3, r7
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e28:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea0 <MX_TIM3_Init+0x94>)
 8000e2a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ea4 <MX_TIM3_Init+0x98>)
 8000e2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000;
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea0 <MX_TIM3_Init+0x94>)
 8000e30:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 8000e34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea0 <MX_TIM3_Init+0x94>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8000e3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ea0 <MX_TIM3_Init+0x94>)
 8000e3e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000e42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e44:	4b16      	ldr	r3, [pc, #88]	@ (8000ea0 <MX_TIM3_Init+0x94>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ea0 <MX_TIM3_Init+0x94>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e50:	4813      	ldr	r0, [pc, #76]	@ (8000ea0 <MX_TIM3_Init+0x94>)
 8000e52:	f001 ffbb 	bl	8002dcc <HAL_TIM_Base_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000e5c:	f7ff fe45 	bl	8000aea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e66:	f107 0308 	add.w	r3, r7, #8
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480c      	ldr	r0, [pc, #48]	@ (8000ea0 <MX_TIM3_Init+0x94>)
 8000e6e:	f002 f985 	bl	800317c <HAL_TIM_ConfigClockSource>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000e78:	f7ff fe37 	bl	8000aea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e84:	463b      	mov	r3, r7
 8000e86:	4619      	mov	r1, r3
 8000e88:	4805      	ldr	r0, [pc, #20]	@ (8000ea0 <MX_TIM3_Init+0x94>)
 8000e8a:	f002 fb5b 	bl	8003544 <HAL_TIMEx_MasterConfigSynchronization>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e94:	f7ff fe29 	bl	8000aea <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	2000020c 	.word	0x2000020c
 8000ea4:	40000400 	.word	0x40000400

08000ea8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a27      	ldr	r2, [pc, #156]	@ (8000f54 <HAL_TIM_Base_MspInit+0xac>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d114      	bne.n	8000ee4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eba:	4b27      	ldr	r3, [pc, #156]	@ (8000f58 <HAL_TIM_Base_MspInit+0xb0>)
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	4a26      	ldr	r2, [pc, #152]	@ (8000f58 <HAL_TIM_Base_MspInit+0xb0>)
 8000ec0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ec4:	6193      	str	r3, [r2, #24]
 8000ec6:	4b24      	ldr	r3, [pc, #144]	@ (8000f58 <HAL_TIM_Base_MspInit+0xb0>)
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2019      	movs	r0, #25
 8000ed8:	f001 f879 	bl	8001fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000edc:	2019      	movs	r0, #25
 8000ede:	f001 f892 	bl	8002006 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000ee2:	e032      	b.n	8000f4a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM2)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000eec:	d114      	bne.n	8000f18 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eee:	4b1a      	ldr	r3, [pc, #104]	@ (8000f58 <HAL_TIM_Base_MspInit+0xb0>)
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	4a19      	ldr	r2, [pc, #100]	@ (8000f58 <HAL_TIM_Base_MspInit+0xb0>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	61d3      	str	r3, [r2, #28]
 8000efa:	4b17      	ldr	r3, [pc, #92]	@ (8000f58 <HAL_TIM_Base_MspInit+0xb0>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	201c      	movs	r0, #28
 8000f0c:	f001 f85f 	bl	8001fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f10:	201c      	movs	r0, #28
 8000f12:	f001 f878 	bl	8002006 <HAL_NVIC_EnableIRQ>
}
 8000f16:	e018      	b.n	8000f4a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0f      	ldr	r2, [pc, #60]	@ (8000f5c <HAL_TIM_Base_MspInit+0xb4>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d113      	bne.n	8000f4a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f22:	4b0d      	ldr	r3, [pc, #52]	@ (8000f58 <HAL_TIM_Base_MspInit+0xb0>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	4a0c      	ldr	r2, [pc, #48]	@ (8000f58 <HAL_TIM_Base_MspInit+0xb0>)
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	61d3      	str	r3, [r2, #28]
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <HAL_TIM_Base_MspInit+0xb0>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	201d      	movs	r0, #29
 8000f40:	f001 f845 	bl	8001fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f44:	201d      	movs	r0, #29
 8000f46:	f001 f85e 	bl	8002006 <HAL_NVIC_EnableIRQ>
}
 8000f4a:	bf00      	nop
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40012c00 	.word	0x40012c00
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40000400 	.word	0x40000400

08000f60 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f64:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f66:	4a12      	ldr	r2, [pc, #72]	@ (8000fb0 <MX_USART1_UART_Init+0x50>)
 8000f68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f6a:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f6c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000f70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	@ (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f84:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f86:	220c      	movs	r2, #12
 8000f88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f96:	4805      	ldr	r0, [pc, #20]	@ (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f98:	f002 fb44 	bl	8003624 <HAL_UART_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fa2:	f7ff fda2 	bl	8000aea <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000254 	.word	0x20000254
 8000fb0:	40013800 	.word	0x40013800

08000fb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a20      	ldr	r2, [pc, #128]	@ (8001050 <HAL_UART_MspInit+0x9c>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d139      	bne.n	8001048 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001054 <HAL_UART_MspInit+0xa0>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a1e      	ldr	r2, [pc, #120]	@ (8001054 <HAL_UART_MspInit+0xa0>)
 8000fda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8001054 <HAL_UART_MspInit+0xa0>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fec:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <HAL_UART_MspInit+0xa0>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a18      	ldr	r2, [pc, #96]	@ (8001054 <HAL_UART_MspInit+0xa0>)
 8000ff2:	f043 0304 	orr.w	r3, r3, #4
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b16      	ldr	r3, [pc, #88]	@ (8001054 <HAL_UART_MspInit+0xa0>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001004:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001008:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f107 0310 	add.w	r3, r7, #16
 8001016:	4619      	mov	r1, r3
 8001018:	480f      	ldr	r0, [pc, #60]	@ (8001058 <HAL_UART_MspInit+0xa4>)
 800101a:	f001 f8c1 	bl	80021a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800101e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001022:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	f107 0310 	add.w	r3, r7, #16
 8001030:	4619      	mov	r1, r3
 8001032:	4809      	ldr	r0, [pc, #36]	@ (8001058 <HAL_UART_MspInit+0xa4>)
 8001034:	f001 f8b4 	bl	80021a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001038:	2200      	movs	r2, #0
 800103a:	2100      	movs	r1, #0
 800103c:	2025      	movs	r0, #37	@ 0x25
 800103e:	f000 ffc6 	bl	8001fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001042:	2025      	movs	r0, #37	@ 0x25
 8001044:	f000 ffdf 	bl	8002006 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001048:	bf00      	nop
 800104a:	3720      	adds	r7, #32
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40013800 	.word	0x40013800
 8001054:	40021000 	.word	0x40021000
 8001058:	40010800 	.word	0x40010800

0800105c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800105c:	f7ff fe30 	bl	8000cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001060:	480b      	ldr	r0, [pc, #44]	@ (8001090 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001062:	490c      	ldr	r1, [pc, #48]	@ (8001094 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001064:	4a0c      	ldr	r2, [pc, #48]	@ (8001098 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001068:	e002      	b.n	8001070 <LoopCopyDataInit>

0800106a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800106c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106e:	3304      	adds	r3, #4

08001070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001074:	d3f9      	bcc.n	800106a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001076:	4a09      	ldr	r2, [pc, #36]	@ (800109c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001078:	4c09      	ldr	r4, [pc, #36]	@ (80010a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800107c:	e001      	b.n	8001082 <LoopFillZerobss>

0800107e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001080:	3204      	adds	r2, #4

08001082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001084:	d3fb      	bcc.n	800107e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001086:	f003 fedd 	bl	8004e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800108a:	f7ff fccd 	bl	8000a28 <main>
  bx lr
 800108e:	4770      	bx	lr
  ldr r0, =_sdata
 8001090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001094:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001098:	08005780 	.word	0x08005780
  ldr r2, =_sbss
 800109c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80010a0:	20000588 	.word	0x20000588

080010a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC1_2_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ac:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <HAL_Init+0x28>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a07      	ldr	r2, [pc, #28]	@ (80010d0 <HAL_Init+0x28>)
 80010b2:	f043 0310 	orr.w	r3, r3, #16
 80010b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b8:	2003      	movs	r0, #3
 80010ba:	f000 ff7d 	bl	8001fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010be:	200f      	movs	r0, #15
 80010c0:	f000 f808 	bl	80010d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c4:	f7ff fd18 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40022000 	.word	0x40022000

080010d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010dc:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <HAL_InitTick+0x54>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b12      	ldr	r3, [pc, #72]	@ (800112c <HAL_InitTick+0x58>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 ff95 	bl	8002022 <HAL_SYSTICK_Config>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e00e      	b.n	8001120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b0f      	cmp	r3, #15
 8001106:	d80a      	bhi.n	800111e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001108:	2200      	movs	r2, #0
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f000 ff5d 	bl	8001fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001114:	4a06      	ldr	r2, [pc, #24]	@ (8001130 <HAL_InitTick+0x5c>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	e000      	b.n	8001120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000000 	.word	0x20000000
 800112c:	20000008 	.word	0x20000008
 8001130:	20000004 	.word	0x20000004

08001134 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001138:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <HAL_IncTick+0x1c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b05      	ldr	r3, [pc, #20]	@ (8001154 <HAL_IncTick+0x20>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4413      	add	r3, r2
 8001144:	4a03      	ldr	r2, [pc, #12]	@ (8001154 <HAL_IncTick+0x20>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	20000008 	.word	0x20000008
 8001154:	2000029c 	.word	0x2000029c

08001158 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b02      	ldr	r3, [pc, #8]	@ (8001168 <HAL_GetTick+0x10>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	2000029c 	.word	0x2000029c

0800116c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e0ed      	b.n	800135a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d102      	bne.n	8001190 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff fb7c 	bl	8000888 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 0201 	orr.w	r2, r2, #1
 800119e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011a0:	f7ff ffda 	bl	8001158 <HAL_GetTick>
 80011a4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011a6:	e012      	b.n	80011ce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011a8:	f7ff ffd6 	bl	8001158 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b0a      	cmp	r3, #10
 80011b4:	d90b      	bls.n	80011ce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2205      	movs	r2, #5
 80011c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e0c5      	b.n	800135a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d0e5      	beq.n	80011a8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0202 	bic.w	r2, r2, #2
 80011ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011ec:	f7ff ffb4 	bl	8001158 <HAL_GetTick>
 80011f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011f2:	e012      	b.n	800121a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011f4:	f7ff ffb0 	bl	8001158 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b0a      	cmp	r3, #10
 8001200:	d90b      	bls.n	800121a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001206:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2205      	movs	r2, #5
 8001212:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e09f      	b.n	800135a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1e5      	bne.n	80011f4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	7e1b      	ldrb	r3, [r3, #24]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d108      	bne.n	8001242 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	e007      	b.n	8001252 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001250:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	7e5b      	ldrb	r3, [r3, #25]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d108      	bne.n	800126c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	e007      	b.n	800127c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800127a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	7e9b      	ldrb	r3, [r3, #26]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d108      	bne.n	8001296 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f042 0220 	orr.w	r2, r2, #32
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	e007      	b.n	80012a6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f022 0220 	bic.w	r2, r2, #32
 80012a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7edb      	ldrb	r3, [r3, #27]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d108      	bne.n	80012c0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0210 	bic.w	r2, r2, #16
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	e007      	b.n	80012d0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f042 0210 	orr.w	r2, r2, #16
 80012ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	7f1b      	ldrb	r3, [r3, #28]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d108      	bne.n	80012ea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f042 0208 	orr.w	r2, r2, #8
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	e007      	b.n	80012fa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 0208 	bic.w	r2, r2, #8
 80012f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	7f5b      	ldrb	r3, [r3, #29]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d108      	bne.n	8001314 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f042 0204 	orr.w	r2, r2, #4
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	e007      	b.n	8001324 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0204 	bic.w	r2, r2, #4
 8001322:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	431a      	orrs	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	431a      	orrs	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	695b      	ldr	r3, [r3, #20]
 8001338:	ea42 0103 	orr.w	r1, r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	1e5a      	subs	r2, r3, #1
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001362:	b480      	push	{r7}
 8001364:	b087      	sub	sp, #28
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001378:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800137a:	7cfb      	ldrb	r3, [r7, #19]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d003      	beq.n	8001388 <HAL_CAN_ConfigFilter+0x26>
 8001380:	7cfb      	ldrb	r3, [r7, #19]
 8001382:	2b02      	cmp	r3, #2
 8001384:	f040 80aa 	bne.w	80014dc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800138e:	f043 0201 	orr.w	r2, r3, #1
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	f003 031f 	and.w	r3, r3, #31
 80013a0:	2201      	movs	r2, #1
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	401a      	ands	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d123      	bne.n	800140a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	401a      	ands	r2, r3
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013e4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	3248      	adds	r2, #72	@ 0x48
 80013ea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013fe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001400:	6979      	ldr	r1, [r7, #20]
 8001402:	3348      	adds	r3, #72	@ 0x48
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	440b      	add	r3, r1
 8001408:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d122      	bne.n	8001458 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	431a      	orrs	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001432:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	3248      	adds	r2, #72	@ 0x48
 8001438:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800144c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800144e:	6979      	ldr	r1, [r7, #20]
 8001450:	3348      	adds	r3, #72	@ 0x48
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	440b      	add	r3, r1
 8001456:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d109      	bne.n	8001474 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	43db      	mvns	r3, r3
 800146a:	401a      	ands	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001472:	e007      	b.n	8001484 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	431a      	orrs	r2, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d109      	bne.n	80014a0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	43db      	mvns	r3, r3
 8001496:	401a      	ands	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800149e:	e007      	b.n	80014b0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	431a      	orrs	r2, r3
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d107      	bne.n	80014c8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	431a      	orrs	r2, r3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80014ce:	f023 0201 	bic.w	r2, r3, #1
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	e006      	b.n	80014ea <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
  }
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	371c      	adds	r7, #28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b01      	cmp	r3, #1
 8001506:	d12e      	bne.n	8001566 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2202      	movs	r2, #2
 800150c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0201 	bic.w	r2, r2, #1
 800151e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001520:	f7ff fe1a 	bl	8001158 <HAL_GetTick>
 8001524:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001526:	e012      	b.n	800154e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001528:	f7ff fe16 	bl	8001158 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b0a      	cmp	r3, #10
 8001534:	d90b      	bls.n	800154e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2205      	movs	r2, #5
 8001546:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e012      	b.n	8001574 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1e5      	bne.n	8001528 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	e006      	b.n	8001574 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
  }
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800157c:	b480      	push	{r7}
 800157e:	b089      	sub	sp, #36	@ 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001590:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800159a:	7ffb      	ldrb	r3, [r7, #31]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d003      	beq.n	80015a8 <HAL_CAN_AddTxMessage+0x2c>
 80015a0:	7ffb      	ldrb	r3, [r7, #31]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	f040 80ad 	bne.w	8001702 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10a      	bne.n	80015c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d105      	bne.n	80015c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 8095 	beq.w	80016f2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	0e1b      	lsrs	r3, r3, #24
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80015d2:	2201      	movs	r2, #1
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	409a      	lsls	r2, r3
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d10d      	bne.n	8001600 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015ee:	68f9      	ldr	r1, [r7, #12]
 80015f0:	6809      	ldr	r1, [r1, #0]
 80015f2:	431a      	orrs	r2, r3
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	3318      	adds	r3, #24
 80015f8:	011b      	lsls	r3, r3, #4
 80015fa:	440b      	add	r3, r1
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	e00f      	b.n	8001620 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800160a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001610:	68f9      	ldr	r1, [r7, #12]
 8001612:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001614:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	3318      	adds	r3, #24
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	440b      	add	r3, r1
 800161e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6819      	ldr	r1, [r3, #0]
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	691a      	ldr	r2, [r3, #16]
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	3318      	adds	r3, #24
 800162c:	011b      	lsls	r3, r3, #4
 800162e:	440b      	add	r3, r1
 8001630:	3304      	adds	r3, #4
 8001632:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	7d1b      	ldrb	r3, [r3, #20]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d111      	bne.n	8001660 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	3318      	adds	r3, #24
 8001644:	011b      	lsls	r3, r3, #4
 8001646:	4413      	add	r3, r2
 8001648:	3304      	adds	r3, #4
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	6811      	ldr	r1, [r2, #0]
 8001650:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	3318      	adds	r3, #24
 8001658:	011b      	lsls	r3, r3, #4
 800165a:	440b      	add	r3, r1
 800165c:	3304      	adds	r3, #4
 800165e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3307      	adds	r3, #7
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	061a      	lsls	r2, r3, #24
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3306      	adds	r3, #6
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	041b      	lsls	r3, r3, #16
 8001670:	431a      	orrs	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3305      	adds	r3, #5
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	021b      	lsls	r3, r3, #8
 800167a:	4313      	orrs	r3, r2
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	3204      	adds	r2, #4
 8001680:	7812      	ldrb	r2, [r2, #0]
 8001682:	4610      	mov	r0, r2
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	6811      	ldr	r1, [r2, #0]
 8001688:	ea43 0200 	orr.w	r2, r3, r0
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	011b      	lsls	r3, r3, #4
 8001690:	440b      	add	r3, r1
 8001692:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001696:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3303      	adds	r3, #3
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	061a      	lsls	r2, r3, #24
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3302      	adds	r3, #2
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	041b      	lsls	r3, r3, #16
 80016a8:	431a      	orrs	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3301      	adds	r3, #1
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	4313      	orrs	r3, r2
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	7812      	ldrb	r2, [r2, #0]
 80016b8:	4610      	mov	r0, r2
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	6811      	ldr	r1, [r2, #0]
 80016be:	ea43 0200 	orr.w	r2, r3, r0
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	011b      	lsls	r3, r3, #4
 80016c6:	440b      	add	r3, r1
 80016c8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80016cc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3318      	adds	r3, #24
 80016d6:	011b      	lsls	r3, r3, #4
 80016d8:	4413      	add	r3, r2
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	6811      	ldr	r1, [r2, #0]
 80016e0:	f043 0201 	orr.w	r2, r3, #1
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	3318      	adds	r3, #24
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	440b      	add	r3, r1
 80016ec:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e00e      	b.n	8001710 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e006      	b.n	8001710 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001706:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
  }
}
 8001710:	4618      	mov	r0, r3
 8001712:	3724      	adds	r7, #36	@ 0x24
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr

0800171a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800171a:	b480      	push	{r7}
 800171c:	b085      	sub	sp, #20
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 3020 	ldrb.w	r3, [r3, #32]
 800172c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800172e:	7afb      	ldrb	r3, [r7, #11]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d002      	beq.n	800173a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001734:	7afb      	ldrb	r3, [r7, #11]
 8001736:	2b02      	cmp	r3, #2
 8001738:	d11d      	bne.n	8001776 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d002      	beq.n	800174e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	3301      	adds	r3, #1
 800174c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d002      	beq.n	8001762 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	3301      	adds	r3, #1
 8001760:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d002      	beq.n	8001776 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	3301      	adds	r3, #1
 8001774:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001776:	68fb      	ldr	r3, [r7, #12]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001782:	b480      	push	{r7}
 8001784:	b087      	sub	sp, #28
 8001786:	af00      	add	r7, sp, #0
 8001788:	60f8      	str	r0, [r7, #12]
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001796:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001798:	7dfb      	ldrb	r3, [r7, #23]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d003      	beq.n	80017a6 <HAL_CAN_GetRxMessage+0x24>
 800179e:	7dfb      	ldrb	r3, [r7, #23]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	f040 8103 	bne.w	80019ac <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10e      	bne.n	80017ca <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d116      	bne.n	80017e8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017be:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e0f7      	b.n	80019ba <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d107      	bne.n	80017e8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017dc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0e8      	b.n	80019ba <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	331b      	adds	r3, #27
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	4413      	add	r3, r2
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0204 	and.w	r2, r3, #4
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10c      	bne.n	8001820 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	331b      	adds	r3, #27
 800180e:	011b      	lsls	r3, r3, #4
 8001810:	4413      	add	r3, r2
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	0d5b      	lsrs	r3, r3, #21
 8001816:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	e00b      	b.n	8001838 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	331b      	adds	r3, #27
 8001828:	011b      	lsls	r3, r3, #4
 800182a:	4413      	add	r3, r2
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	08db      	lsrs	r3, r3, #3
 8001830:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	331b      	adds	r3, #27
 8001840:	011b      	lsls	r3, r3, #4
 8001842:	4413      	add	r3, r2
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0202 	and.w	r2, r3, #2
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	331b      	adds	r3, #27
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	4413      	add	r3, r2
 800185a:	3304      	adds	r3, #4
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2208      	movs	r2, #8
 800186a:	611a      	str	r2, [r3, #16]
 800186c:	e00b      	b.n	8001886 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	331b      	adds	r3, #27
 8001876:	011b      	lsls	r3, r3, #4
 8001878:	4413      	add	r3, r2
 800187a:	3304      	adds	r3, #4
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 020f 	and.w	r2, r3, #15
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	331b      	adds	r3, #27
 800188e:	011b      	lsls	r3, r3, #4
 8001890:	4413      	add	r3, r2
 8001892:	3304      	adds	r3, #4
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	0a1b      	lsrs	r3, r3, #8
 8001898:	b2da      	uxtb	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	331b      	adds	r3, #27
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	4413      	add	r3, r2
 80018aa:	3304      	adds	r3, #4
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	0c1b      	lsrs	r3, r3, #16
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	4413      	add	r3, r2
 80018c0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	4413      	add	r3, r2
 80018d6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	0a1a      	lsrs	r2, r3, #8
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	3301      	adds	r3, #1
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	4413      	add	r3, r2
 80018f0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	0c1a      	lsrs	r2, r3, #16
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	3302      	adds	r3, #2
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	011b      	lsls	r3, r3, #4
 8001908:	4413      	add	r3, r2
 800190a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	0e1a      	lsrs	r2, r3, #24
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	3303      	adds	r3, #3
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	011b      	lsls	r3, r3, #4
 8001922:	4413      	add	r3, r2
 8001924:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	3304      	adds	r3, #4
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	011b      	lsls	r3, r3, #4
 800193a:	4413      	add	r3, r2
 800193c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	0a1a      	lsrs	r2, r3, #8
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	3305      	adds	r3, #5
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	011b      	lsls	r3, r3, #4
 8001954:	4413      	add	r3, r2
 8001956:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	0c1a      	lsrs	r2, r3, #16
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	3306      	adds	r3, #6
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	4413      	add	r3, r2
 8001970:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	0e1a      	lsrs	r2, r3, #24
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	3307      	adds	r3, #7
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d108      	bne.n	8001998 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 0220 	orr.w	r2, r2, #32
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	e007      	b.n	80019a8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	691a      	ldr	r2, [r3, #16]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0220 	orr.w	r2, r2, #32
 80019a6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80019a8:	2300      	movs	r3, #0
 80019aa:	e006      	b.n	80019ba <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
  }
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	371c      	adds	r7, #28
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019d4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d002      	beq.n	80019e2 <HAL_CAN_ActivateNotification+0x1e>
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d109      	bne.n	80019f6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6959      	ldr	r1, [r3, #20]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	e006      	b.n	8001a04 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
  }
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr

08001a0e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b08a      	sub	sp, #40	@ 0x28
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d07c      	beq.n	8001b4e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d023      	beq.n	8001aa6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2201      	movs	r2, #1
 8001a64:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7fe fda1 	bl	80005b8 <HAL_CAN_TxMailbox0CompleteCallback>
 8001a76:	e016      	b.n	8001aa6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d004      	beq.n	8001a8c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a88:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a8a:	e00c      	b.n	8001aa6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d004      	beq.n	8001aa0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a9e:	e002      	b.n	8001aa6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f96b 	bl	8001d7c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d024      	beq.n	8001afa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ab8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7fe fd89 	bl	80005dc <HAL_CAN_TxMailbox1CompleteCallback>
 8001aca:	e016      	b.n	8001afa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d004      	beq.n	8001ae0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ade:	e00c      	b.n	8001afa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d004      	beq.n	8001af4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001af2:	e002      	b.n	8001afa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f94a 	bl	8001d8e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d024      	beq.n	8001b4e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7fe fd71 	bl	8000600 <HAL_CAN_TxMailbox2CompleteCallback>
 8001b1e:	e016      	b.n	8001b4e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d004      	beq.n	8001b34 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b32:	e00c      	b.n	8001b4e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d004      	beq.n	8001b48 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b46:	e002      	b.n	8001b4e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f929 	bl	8001da0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00c      	beq.n	8001b72 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d007      	beq.n	8001b72 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b68:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2210      	movs	r2, #16
 8001b70:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00b      	beq.n	8001b94 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d006      	beq.n	8001b94 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2208      	movs	r2, #8
 8001b8c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f90f 	bl	8001db2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d009      	beq.n	8001bb2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d002      	beq.n	8001bb2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7fe fd39 	bl	8000624 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00c      	beq.n	8001bd6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	f003 0310 	and.w	r3, r3, #16
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d007      	beq.n	8001bd6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bcc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2210      	movs	r2, #16
 8001bd4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00b      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d006      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2208      	movs	r2, #8
 8001bf0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f8ef 	bl	8001dd6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	f003 0310 	and.w	r3, r3, #16
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d009      	beq.n	8001c16 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f8d7 	bl	8001dc4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00b      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d006      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2210      	movs	r2, #16
 8001c30:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f8d8 	bl	8001de8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00b      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d006      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2208      	movs	r2, #8
 8001c52:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f8d0 	bl	8001dfa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d07b      	beq.n	8001d5c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d072      	beq.n	8001d54 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d008      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d008      	beq.n	8001ca6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca0:	f043 0302 	orr.w	r3, r3, #2
 8001ca4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d008      	beq.n	8001cc2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbc:	f043 0304 	orr.w	r3, r3, #4
 8001cc0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d043      	beq.n	8001d54 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d03e      	beq.n	8001d54 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cdc:	2b60      	cmp	r3, #96	@ 0x60
 8001cde:	d02b      	beq.n	8001d38 <HAL_CAN_IRQHandler+0x32a>
 8001ce0:	2b60      	cmp	r3, #96	@ 0x60
 8001ce2:	d82e      	bhi.n	8001d42 <HAL_CAN_IRQHandler+0x334>
 8001ce4:	2b50      	cmp	r3, #80	@ 0x50
 8001ce6:	d022      	beq.n	8001d2e <HAL_CAN_IRQHandler+0x320>
 8001ce8:	2b50      	cmp	r3, #80	@ 0x50
 8001cea:	d82a      	bhi.n	8001d42 <HAL_CAN_IRQHandler+0x334>
 8001cec:	2b40      	cmp	r3, #64	@ 0x40
 8001cee:	d019      	beq.n	8001d24 <HAL_CAN_IRQHandler+0x316>
 8001cf0:	2b40      	cmp	r3, #64	@ 0x40
 8001cf2:	d826      	bhi.n	8001d42 <HAL_CAN_IRQHandler+0x334>
 8001cf4:	2b30      	cmp	r3, #48	@ 0x30
 8001cf6:	d010      	beq.n	8001d1a <HAL_CAN_IRQHandler+0x30c>
 8001cf8:	2b30      	cmp	r3, #48	@ 0x30
 8001cfa:	d822      	bhi.n	8001d42 <HAL_CAN_IRQHandler+0x334>
 8001cfc:	2b10      	cmp	r3, #16
 8001cfe:	d002      	beq.n	8001d06 <HAL_CAN_IRQHandler+0x2f8>
 8001d00:	2b20      	cmp	r3, #32
 8001d02:	d005      	beq.n	8001d10 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001d04:	e01d      	b.n	8001d42 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d08:	f043 0308 	orr.w	r3, r3, #8
 8001d0c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d0e:	e019      	b.n	8001d44 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d12:	f043 0310 	orr.w	r3, r3, #16
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d18:	e014      	b.n	8001d44 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1c:	f043 0320 	orr.w	r3, r3, #32
 8001d20:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d22:	e00f      	b.n	8001d44 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d2a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d2c:	e00a      	b.n	8001d44 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d34:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d36:	e005      	b.n	8001d44 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d40:	e000      	b.n	8001d44 <HAL_CAN_IRQHandler+0x336>
            break;
 8001d42:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	699a      	ldr	r2, [r3, #24]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001d52:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2204      	movs	r2, #4
 8001d5a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d008      	beq.n	8001d74 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f84c 	bl	8001e0c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d74:	bf00      	nop
 8001d76:	3728      	adds	r7, #40	@ 0x28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr

08001d8e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr

08001da0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr

08001db2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr

08001de8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr

08001dfa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr
	...

08001e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e30:	4b0c      	ldr	r3, [pc, #48]	@ (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e52:	4a04      	ldr	r2, [pc, #16]	@ (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	60d3      	str	r3, [r2, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e6c:	4b04      	ldr	r3, [pc, #16]	@ (8001e80 <__NVIC_GetPriorityGrouping+0x18>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	f003 0307 	and.w	r3, r3, #7
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	db0b      	blt.n	8001eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	f003 021f 	and.w	r2, r3, #31
 8001e9c:	4906      	ldr	r1, [pc, #24]	@ (8001eb8 <__NVIC_EnableIRQ+0x34>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr
 8001eb8:	e000e100 	.word	0xe000e100

08001ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	6039      	str	r1, [r7, #0]
 8001ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	db0a      	blt.n	8001ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	490c      	ldr	r1, [pc, #48]	@ (8001f08 <__NVIC_SetPriority+0x4c>)
 8001ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eda:	0112      	lsls	r2, r2, #4
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	440b      	add	r3, r1
 8001ee0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee4:	e00a      	b.n	8001efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4908      	ldr	r1, [pc, #32]	@ (8001f0c <__NVIC_SetPriority+0x50>)
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	3b04      	subs	r3, #4
 8001ef4:	0112      	lsls	r2, r2, #4
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	440b      	add	r3, r1
 8001efa:	761a      	strb	r2, [r3, #24]
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000e100 	.word	0xe000e100
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b089      	sub	sp, #36	@ 0x24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f1c3 0307 	rsb	r3, r3, #7
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	bf28      	it	cs
 8001f2e:	2304      	movcs	r3, #4
 8001f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3304      	adds	r3, #4
 8001f36:	2b06      	cmp	r3, #6
 8001f38:	d902      	bls.n	8001f40 <NVIC_EncodePriority+0x30>
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3b03      	subs	r3, #3
 8001f3e:	e000      	b.n	8001f42 <NVIC_EncodePriority+0x32>
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	f04f 32ff 	mov.w	r2, #4294967295
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	401a      	ands	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f58:	f04f 31ff 	mov.w	r1, #4294967295
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	43d9      	mvns	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	4313      	orrs	r3, r2
         );
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3724      	adds	r7, #36	@ 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f84:	d301      	bcc.n	8001f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00f      	b.n	8001faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb4 <SysTick_Config+0x40>)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f92:	210f      	movs	r1, #15
 8001f94:	f04f 30ff 	mov.w	r0, #4294967295
 8001f98:	f7ff ff90 	bl	8001ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f9c:	4b05      	ldr	r3, [pc, #20]	@ (8001fb4 <SysTick_Config+0x40>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa2:	4b04      	ldr	r3, [pc, #16]	@ (8001fb4 <SysTick_Config+0x40>)
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	e000e010 	.word	0xe000e010

08001fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ff2d 	bl	8001e20 <__NVIC_SetPriorityGrouping>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b086      	sub	sp, #24
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
 8001fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe0:	f7ff ff42 	bl	8001e68 <__NVIC_GetPriorityGrouping>
 8001fe4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	68b9      	ldr	r1, [r7, #8]
 8001fea:	6978      	ldr	r0, [r7, #20]
 8001fec:	f7ff ff90 	bl	8001f10 <NVIC_EncodePriority>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff5f 	bl	8001ebc <__NVIC_SetPriority>
}
 8001ffe:	bf00      	nop
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	4603      	mov	r3, r0
 800200e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff35 	bl	8001e84 <__NVIC_EnableIRQ>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ffa2 	bl	8001f74 <SysTick_Config>
 8002030:	4603      	mov	r3, r0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800203a:	b480      	push	{r7}
 800203c:	b085      	sub	sp, #20
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d008      	beq.n	8002064 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2204      	movs	r2, #4
 8002056:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e020      	b.n	80020a6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 020e 	bic.w	r2, r2, #14
 8002072:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0201 	bic.w	r2, r2, #1
 8002082:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800208c:	2101      	movs	r1, #1
 800208e:	fa01 f202 	lsl.w	r2, r1, r2
 8002092:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d005      	beq.n	80020d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2204      	movs	r2, #4
 80020cc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	73fb      	strb	r3, [r7, #15]
 80020d2:	e051      	b.n	8002178 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 020e 	bic.w	r2, r2, #14
 80020e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0201 	bic.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a22      	ldr	r2, [pc, #136]	@ (8002184 <HAL_DMA_Abort_IT+0xd4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d029      	beq.n	8002152 <HAL_DMA_Abort_IT+0xa2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a21      	ldr	r2, [pc, #132]	@ (8002188 <HAL_DMA_Abort_IT+0xd8>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d022      	beq.n	800214e <HAL_DMA_Abort_IT+0x9e>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a1f      	ldr	r2, [pc, #124]	@ (800218c <HAL_DMA_Abort_IT+0xdc>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d01a      	beq.n	8002148 <HAL_DMA_Abort_IT+0x98>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a1e      	ldr	r2, [pc, #120]	@ (8002190 <HAL_DMA_Abort_IT+0xe0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d012      	beq.n	8002142 <HAL_DMA_Abort_IT+0x92>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a1c      	ldr	r2, [pc, #112]	@ (8002194 <HAL_DMA_Abort_IT+0xe4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d00a      	beq.n	800213c <HAL_DMA_Abort_IT+0x8c>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a1b      	ldr	r2, [pc, #108]	@ (8002198 <HAL_DMA_Abort_IT+0xe8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d102      	bne.n	8002136 <HAL_DMA_Abort_IT+0x86>
 8002130:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002134:	e00e      	b.n	8002154 <HAL_DMA_Abort_IT+0xa4>
 8002136:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800213a:	e00b      	b.n	8002154 <HAL_DMA_Abort_IT+0xa4>
 800213c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002140:	e008      	b.n	8002154 <HAL_DMA_Abort_IT+0xa4>
 8002142:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002146:	e005      	b.n	8002154 <HAL_DMA_Abort_IT+0xa4>
 8002148:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800214c:	e002      	b.n	8002154 <HAL_DMA_Abort_IT+0xa4>
 800214e:	2310      	movs	r3, #16
 8002150:	e000      	b.n	8002154 <HAL_DMA_Abort_IT+0xa4>
 8002152:	2301      	movs	r3, #1
 8002154:	4a11      	ldr	r2, [pc, #68]	@ (800219c <HAL_DMA_Abort_IT+0xec>)
 8002156:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	4798      	blx	r3
    } 
  }
  return status;
 8002178:	7bfb      	ldrb	r3, [r7, #15]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40020008 	.word	0x40020008
 8002188:	4002001c 	.word	0x4002001c
 800218c:	40020030 	.word	0x40020030
 8002190:	40020044 	.word	0x40020044
 8002194:	40020058 	.word	0x40020058
 8002198:	4002006c 	.word	0x4002006c
 800219c:	40020000 	.word	0x40020000

080021a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b08b      	sub	sp, #44	@ 0x2c
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021aa:	2300      	movs	r3, #0
 80021ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021ae:	2300      	movs	r3, #0
 80021b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021b2:	e169      	b.n	8002488 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021b4:	2201      	movs	r2, #1
 80021b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	69fa      	ldr	r2, [r7, #28]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	f040 8158 	bne.w	8002482 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4a9a      	ldr	r2, [pc, #616]	@ (8002440 <HAL_GPIO_Init+0x2a0>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d05e      	beq.n	800229a <HAL_GPIO_Init+0xfa>
 80021dc:	4a98      	ldr	r2, [pc, #608]	@ (8002440 <HAL_GPIO_Init+0x2a0>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d875      	bhi.n	80022ce <HAL_GPIO_Init+0x12e>
 80021e2:	4a98      	ldr	r2, [pc, #608]	@ (8002444 <HAL_GPIO_Init+0x2a4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d058      	beq.n	800229a <HAL_GPIO_Init+0xfa>
 80021e8:	4a96      	ldr	r2, [pc, #600]	@ (8002444 <HAL_GPIO_Init+0x2a4>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d86f      	bhi.n	80022ce <HAL_GPIO_Init+0x12e>
 80021ee:	4a96      	ldr	r2, [pc, #600]	@ (8002448 <HAL_GPIO_Init+0x2a8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d052      	beq.n	800229a <HAL_GPIO_Init+0xfa>
 80021f4:	4a94      	ldr	r2, [pc, #592]	@ (8002448 <HAL_GPIO_Init+0x2a8>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d869      	bhi.n	80022ce <HAL_GPIO_Init+0x12e>
 80021fa:	4a94      	ldr	r2, [pc, #592]	@ (800244c <HAL_GPIO_Init+0x2ac>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d04c      	beq.n	800229a <HAL_GPIO_Init+0xfa>
 8002200:	4a92      	ldr	r2, [pc, #584]	@ (800244c <HAL_GPIO_Init+0x2ac>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d863      	bhi.n	80022ce <HAL_GPIO_Init+0x12e>
 8002206:	4a92      	ldr	r2, [pc, #584]	@ (8002450 <HAL_GPIO_Init+0x2b0>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d046      	beq.n	800229a <HAL_GPIO_Init+0xfa>
 800220c:	4a90      	ldr	r2, [pc, #576]	@ (8002450 <HAL_GPIO_Init+0x2b0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d85d      	bhi.n	80022ce <HAL_GPIO_Init+0x12e>
 8002212:	2b12      	cmp	r3, #18
 8002214:	d82a      	bhi.n	800226c <HAL_GPIO_Init+0xcc>
 8002216:	2b12      	cmp	r3, #18
 8002218:	d859      	bhi.n	80022ce <HAL_GPIO_Init+0x12e>
 800221a:	a201      	add	r2, pc, #4	@ (adr r2, 8002220 <HAL_GPIO_Init+0x80>)
 800221c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002220:	0800229b 	.word	0x0800229b
 8002224:	08002275 	.word	0x08002275
 8002228:	08002287 	.word	0x08002287
 800222c:	080022c9 	.word	0x080022c9
 8002230:	080022cf 	.word	0x080022cf
 8002234:	080022cf 	.word	0x080022cf
 8002238:	080022cf 	.word	0x080022cf
 800223c:	080022cf 	.word	0x080022cf
 8002240:	080022cf 	.word	0x080022cf
 8002244:	080022cf 	.word	0x080022cf
 8002248:	080022cf 	.word	0x080022cf
 800224c:	080022cf 	.word	0x080022cf
 8002250:	080022cf 	.word	0x080022cf
 8002254:	080022cf 	.word	0x080022cf
 8002258:	080022cf 	.word	0x080022cf
 800225c:	080022cf 	.word	0x080022cf
 8002260:	080022cf 	.word	0x080022cf
 8002264:	0800227d 	.word	0x0800227d
 8002268:	08002291 	.word	0x08002291
 800226c:	4a79      	ldr	r2, [pc, #484]	@ (8002454 <HAL_GPIO_Init+0x2b4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002272:	e02c      	b.n	80022ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	623b      	str	r3, [r7, #32]
          break;
 800227a:	e029      	b.n	80022d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	3304      	adds	r3, #4
 8002282:	623b      	str	r3, [r7, #32]
          break;
 8002284:	e024      	b.n	80022d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	3308      	adds	r3, #8
 800228c:	623b      	str	r3, [r7, #32]
          break;
 800228e:	e01f      	b.n	80022d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	330c      	adds	r3, #12
 8002296:	623b      	str	r3, [r7, #32]
          break;
 8002298:	e01a      	b.n	80022d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d102      	bne.n	80022a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022a2:	2304      	movs	r3, #4
 80022a4:	623b      	str	r3, [r7, #32]
          break;
 80022a6:	e013      	b.n	80022d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d105      	bne.n	80022bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022b0:	2308      	movs	r3, #8
 80022b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69fa      	ldr	r2, [r7, #28]
 80022b8:	611a      	str	r2, [r3, #16]
          break;
 80022ba:	e009      	b.n	80022d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022bc:	2308      	movs	r3, #8
 80022be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69fa      	ldr	r2, [r7, #28]
 80022c4:	615a      	str	r2, [r3, #20]
          break;
 80022c6:	e003      	b.n	80022d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022c8:	2300      	movs	r3, #0
 80022ca:	623b      	str	r3, [r7, #32]
          break;
 80022cc:	e000      	b.n	80022d0 <HAL_GPIO_Init+0x130>
          break;
 80022ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	2bff      	cmp	r3, #255	@ 0xff
 80022d4:	d801      	bhi.n	80022da <HAL_GPIO_Init+0x13a>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	e001      	b.n	80022de <HAL_GPIO_Init+0x13e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3304      	adds	r3, #4
 80022de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	2bff      	cmp	r3, #255	@ 0xff
 80022e4:	d802      	bhi.n	80022ec <HAL_GPIO_Init+0x14c>
 80022e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	e002      	b.n	80022f2 <HAL_GPIO_Init+0x152>
 80022ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ee:	3b08      	subs	r3, #8
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	210f      	movs	r1, #15
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	401a      	ands	r2, r3
 8002304:	6a39      	ldr	r1, [r7, #32]
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	fa01 f303 	lsl.w	r3, r1, r3
 800230c:	431a      	orrs	r2, r3
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 80b1 	beq.w	8002482 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002320:	4b4d      	ldr	r3, [pc, #308]	@ (8002458 <HAL_GPIO_Init+0x2b8>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	4a4c      	ldr	r2, [pc, #304]	@ (8002458 <HAL_GPIO_Init+0x2b8>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	6193      	str	r3, [r2, #24]
 800232c:	4b4a      	ldr	r3, [pc, #296]	@ (8002458 <HAL_GPIO_Init+0x2b8>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002338:	4a48      	ldr	r2, [pc, #288]	@ (800245c <HAL_GPIO_Init+0x2bc>)
 800233a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233c:	089b      	lsrs	r3, r3, #2
 800233e:	3302      	adds	r3, #2
 8002340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002344:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	220f      	movs	r2, #15
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	4013      	ands	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a40      	ldr	r2, [pc, #256]	@ (8002460 <HAL_GPIO_Init+0x2c0>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d013      	beq.n	800238c <HAL_GPIO_Init+0x1ec>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a3f      	ldr	r2, [pc, #252]	@ (8002464 <HAL_GPIO_Init+0x2c4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d00d      	beq.n	8002388 <HAL_GPIO_Init+0x1e8>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a3e      	ldr	r2, [pc, #248]	@ (8002468 <HAL_GPIO_Init+0x2c8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d007      	beq.n	8002384 <HAL_GPIO_Init+0x1e4>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a3d      	ldr	r2, [pc, #244]	@ (800246c <HAL_GPIO_Init+0x2cc>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d101      	bne.n	8002380 <HAL_GPIO_Init+0x1e0>
 800237c:	2303      	movs	r3, #3
 800237e:	e006      	b.n	800238e <HAL_GPIO_Init+0x1ee>
 8002380:	2304      	movs	r3, #4
 8002382:	e004      	b.n	800238e <HAL_GPIO_Init+0x1ee>
 8002384:	2302      	movs	r3, #2
 8002386:	e002      	b.n	800238e <HAL_GPIO_Init+0x1ee>
 8002388:	2301      	movs	r3, #1
 800238a:	e000      	b.n	800238e <HAL_GPIO_Init+0x1ee>
 800238c:	2300      	movs	r3, #0
 800238e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002390:	f002 0203 	and.w	r2, r2, #3
 8002394:	0092      	lsls	r2, r2, #2
 8002396:	4093      	lsls	r3, r2
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	4313      	orrs	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800239e:	492f      	ldr	r1, [pc, #188]	@ (800245c <HAL_GPIO_Init+0x2bc>)
 80023a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a2:	089b      	lsrs	r3, r3, #2
 80023a4:	3302      	adds	r3, #2
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d006      	beq.n	80023c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002470 <HAL_GPIO_Init+0x2d0>)
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	492c      	ldr	r1, [pc, #176]	@ (8002470 <HAL_GPIO_Init+0x2d0>)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	608b      	str	r3, [r1, #8]
 80023c4:	e006      	b.n	80023d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002470 <HAL_GPIO_Init+0x2d0>)
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	4928      	ldr	r1, [pc, #160]	@ (8002470 <HAL_GPIO_Init+0x2d0>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d006      	beq.n	80023ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023e0:	4b23      	ldr	r3, [pc, #140]	@ (8002470 <HAL_GPIO_Init+0x2d0>)
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	4922      	ldr	r1, [pc, #136]	@ (8002470 <HAL_GPIO_Init+0x2d0>)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60cb      	str	r3, [r1, #12]
 80023ec:	e006      	b.n	80023fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023ee:	4b20      	ldr	r3, [pc, #128]	@ (8002470 <HAL_GPIO_Init+0x2d0>)
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	491e      	ldr	r1, [pc, #120]	@ (8002470 <HAL_GPIO_Init+0x2d0>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d006      	beq.n	8002416 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002408:	4b19      	ldr	r3, [pc, #100]	@ (8002470 <HAL_GPIO_Init+0x2d0>)
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	4918      	ldr	r1, [pc, #96]	@ (8002470 <HAL_GPIO_Init+0x2d0>)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	4313      	orrs	r3, r2
 8002412:	604b      	str	r3, [r1, #4]
 8002414:	e006      	b.n	8002424 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002416:	4b16      	ldr	r3, [pc, #88]	@ (8002470 <HAL_GPIO_Init+0x2d0>)
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	43db      	mvns	r3, r3
 800241e:	4914      	ldr	r1, [pc, #80]	@ (8002470 <HAL_GPIO_Init+0x2d0>)
 8002420:	4013      	ands	r3, r2
 8002422:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d021      	beq.n	8002474 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002430:	4b0f      	ldr	r3, [pc, #60]	@ (8002470 <HAL_GPIO_Init+0x2d0>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	490e      	ldr	r1, [pc, #56]	@ (8002470 <HAL_GPIO_Init+0x2d0>)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	600b      	str	r3, [r1, #0]
 800243c:	e021      	b.n	8002482 <HAL_GPIO_Init+0x2e2>
 800243e:	bf00      	nop
 8002440:	10320000 	.word	0x10320000
 8002444:	10310000 	.word	0x10310000
 8002448:	10220000 	.word	0x10220000
 800244c:	10210000 	.word	0x10210000
 8002450:	10120000 	.word	0x10120000
 8002454:	10110000 	.word	0x10110000
 8002458:	40021000 	.word	0x40021000
 800245c:	40010000 	.word	0x40010000
 8002460:	40010800 	.word	0x40010800
 8002464:	40010c00 	.word	0x40010c00
 8002468:	40011000 	.word	0x40011000
 800246c:	40011400 	.word	0x40011400
 8002470:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002474:	4b0b      	ldr	r3, [pc, #44]	@ (80024a4 <HAL_GPIO_Init+0x304>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	43db      	mvns	r3, r3
 800247c:	4909      	ldr	r1, [pc, #36]	@ (80024a4 <HAL_GPIO_Init+0x304>)
 800247e:	4013      	ands	r3, r2
 8002480:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002484:	3301      	adds	r3, #1
 8002486:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248e:	fa22 f303 	lsr.w	r3, r2, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	f47f ae8e 	bne.w	80021b4 <HAL_GPIO_Init+0x14>
  }
}
 8002498:	bf00      	nop
 800249a:	bf00      	nop
 800249c:	372c      	adds	r7, #44	@ 0x2c
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr
 80024a4:	40010400 	.word	0x40010400

080024a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	807b      	strh	r3, [r7, #2]
 80024b4:	4613      	mov	r3, r2
 80024b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024b8:	787b      	ldrb	r3, [r7, #1]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024be:	887a      	ldrh	r2, [r7, #2]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024c4:	e003      	b.n	80024ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024c6:	887b      	ldrh	r3, [r7, #2]
 80024c8:	041a      	lsls	r2, r3, #16
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	611a      	str	r2, [r3, #16]
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr

080024d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024ea:	887a      	ldrh	r2, [r7, #2]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4013      	ands	r3, r2
 80024f0:	041a      	lsls	r2, r3, #16
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	43d9      	mvns	r1, r3
 80024f6:	887b      	ldrh	r3, [r7, #2]
 80024f8:	400b      	ands	r3, r1
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	611a      	str	r2, [r3, #16]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr

0800250a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b084      	sub	sp, #16
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e034      	b.n	8002586 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8002524:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f245 5255 	movw	r2, #21845	@ 0x5555
 800252e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6852      	ldr	r2, [r2, #4]
 8002538:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6892      	ldr	r2, [r2, #8]
 8002542:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002544:	f7fe fe08 	bl	8001158 <HAL_GetTick>
 8002548:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800254a:	e00f      	b.n	800256c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800254c:	f7fe fe04 	bl	8001158 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b27      	cmp	r3, #39	@ 0x27
 8002558:	d908      	bls.n	800256c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 0303 	and.w	r3, r3, #3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e00c      	b.n	8002586 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1e8      	bne.n	800254c <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8002582:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800259e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr

080025ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e272      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 8087 	beq.w	80026da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025cc:	4b92      	ldr	r3, [pc, #584]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 030c 	and.w	r3, r3, #12
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d00c      	beq.n	80025f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025d8:	4b8f      	ldr	r3, [pc, #572]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 030c 	and.w	r3, r3, #12
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d112      	bne.n	800260a <HAL_RCC_OscConfig+0x5e>
 80025e4:	4b8c      	ldr	r3, [pc, #560]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025f0:	d10b      	bne.n	800260a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f2:	4b89      	ldr	r3, [pc, #548]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d06c      	beq.n	80026d8 <HAL_RCC_OscConfig+0x12c>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d168      	bne.n	80026d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e24c      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002612:	d106      	bne.n	8002622 <HAL_RCC_OscConfig+0x76>
 8002614:	4b80      	ldr	r3, [pc, #512]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a7f      	ldr	r2, [pc, #508]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 800261a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	e02e      	b.n	8002680 <HAL_RCC_OscConfig+0xd4>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10c      	bne.n	8002644 <HAL_RCC_OscConfig+0x98>
 800262a:	4b7b      	ldr	r3, [pc, #492]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a7a      	ldr	r2, [pc, #488]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002630:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	4b78      	ldr	r3, [pc, #480]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a77      	ldr	r2, [pc, #476]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 800263c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	e01d      	b.n	8002680 <HAL_RCC_OscConfig+0xd4>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800264c:	d10c      	bne.n	8002668 <HAL_RCC_OscConfig+0xbc>
 800264e:	4b72      	ldr	r3, [pc, #456]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a71      	ldr	r2, [pc, #452]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002654:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	4b6f      	ldr	r3, [pc, #444]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a6e      	ldr	r2, [pc, #440]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	e00b      	b.n	8002680 <HAL_RCC_OscConfig+0xd4>
 8002668:	4b6b      	ldr	r3, [pc, #428]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a6a      	ldr	r2, [pc, #424]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 800266e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	4b68      	ldr	r3, [pc, #416]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a67      	ldr	r2, [pc, #412]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 800267a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800267e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d013      	beq.n	80026b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7fe fd66 	bl	8001158 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002690:	f7fe fd62 	bl	8001158 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b64      	cmp	r3, #100	@ 0x64
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e200      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0xe4>
 80026ae:	e014      	b.n	80026da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7fe fd52 	bl	8001158 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b8:	f7fe fd4e 	bl	8001158 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	@ 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e1ec      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ca:	4b53      	ldr	r3, [pc, #332]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x10c>
 80026d6:	e000      	b.n	80026da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d063      	beq.n	80027ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026e6:	4b4c      	ldr	r3, [pc, #304]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00b      	beq.n	800270a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026f2:	4b49      	ldr	r3, [pc, #292]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 030c 	and.w	r3, r3, #12
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d11c      	bne.n	8002738 <HAL_RCC_OscConfig+0x18c>
 80026fe:	4b46      	ldr	r3, [pc, #280]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d116      	bne.n	8002738 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270a:	4b43      	ldr	r3, [pc, #268]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d005      	beq.n	8002722 <HAL_RCC_OscConfig+0x176>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d001      	beq.n	8002722 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e1c0      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002722:	4b3d      	ldr	r3, [pc, #244]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	4939      	ldr	r1, [pc, #228]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002732:	4313      	orrs	r3, r2
 8002734:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002736:	e03a      	b.n	80027ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d020      	beq.n	8002782 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002740:	4b36      	ldr	r3, [pc, #216]	@ (800281c <HAL_RCC_OscConfig+0x270>)
 8002742:	2201      	movs	r2, #1
 8002744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002746:	f7fe fd07 	bl	8001158 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800274e:	f7fe fd03 	bl	8001158 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e1a1      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002760:	4b2d      	ldr	r3, [pc, #180]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276c:	4b2a      	ldr	r3, [pc, #168]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4927      	ldr	r1, [pc, #156]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 800277c:	4313      	orrs	r3, r2
 800277e:	600b      	str	r3, [r1, #0]
 8002780:	e015      	b.n	80027ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002782:	4b26      	ldr	r3, [pc, #152]	@ (800281c <HAL_RCC_OscConfig+0x270>)
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7fe fce6 	bl	8001158 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002790:	f7fe fce2 	bl	8001158 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e180      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d03a      	beq.n	8002830 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d019      	beq.n	80027f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027c2:	4b17      	ldr	r3, [pc, #92]	@ (8002820 <HAL_RCC_OscConfig+0x274>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c8:	f7fe fcc6 	bl	8001158 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d0:	f7fe fcc2 	bl	8001158 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e160      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 80027e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0f0      	beq.n	80027d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027ee:	2001      	movs	r0, #1
 80027f0:	f000 face 	bl	8002d90 <RCC_Delay>
 80027f4:	e01c      	b.n	8002830 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002820 <HAL_RCC_OscConfig+0x274>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fc:	f7fe fcac 	bl	8001158 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002802:	e00f      	b.n	8002824 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002804:	f7fe fca8 	bl	8001158 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d908      	bls.n	8002824 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e146      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
 8002816:	bf00      	nop
 8002818:	40021000 	.word	0x40021000
 800281c:	42420000 	.word	0x42420000
 8002820:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002824:	4b92      	ldr	r3, [pc, #584]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1e9      	bne.n	8002804 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 80a6 	beq.w	800298a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800283e:	2300      	movs	r3, #0
 8002840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002842:	4b8b      	ldr	r3, [pc, #556]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10d      	bne.n	800286a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284e:	4b88      	ldr	r3, [pc, #544]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	4a87      	ldr	r2, [pc, #540]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002858:	61d3      	str	r3, [r2, #28]
 800285a:	4b85      	ldr	r3, [pc, #532]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002866:	2301      	movs	r3, #1
 8002868:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286a:	4b82      	ldr	r3, [pc, #520]	@ (8002a74 <HAL_RCC_OscConfig+0x4c8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002872:	2b00      	cmp	r3, #0
 8002874:	d118      	bne.n	80028a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002876:	4b7f      	ldr	r3, [pc, #508]	@ (8002a74 <HAL_RCC_OscConfig+0x4c8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a7e      	ldr	r2, [pc, #504]	@ (8002a74 <HAL_RCC_OscConfig+0x4c8>)
 800287c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002882:	f7fe fc69 	bl	8001158 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288a:	f7fe fc65 	bl	8001158 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b64      	cmp	r3, #100	@ 0x64
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e103      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289c:	4b75      	ldr	r3, [pc, #468]	@ (8002a74 <HAL_RCC_OscConfig+0x4c8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d106      	bne.n	80028be <HAL_RCC_OscConfig+0x312>
 80028b0:	4b6f      	ldr	r3, [pc, #444]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	4a6e      	ldr	r2, [pc, #440]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	6213      	str	r3, [r2, #32]
 80028bc:	e02d      	b.n	800291a <HAL_RCC_OscConfig+0x36e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCC_OscConfig+0x334>
 80028c6:	4b6a      	ldr	r3, [pc, #424]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	4a69      	ldr	r2, [pc, #420]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 80028cc:	f023 0301 	bic.w	r3, r3, #1
 80028d0:	6213      	str	r3, [r2, #32]
 80028d2:	4b67      	ldr	r3, [pc, #412]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	4a66      	ldr	r2, [pc, #408]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 80028d8:	f023 0304 	bic.w	r3, r3, #4
 80028dc:	6213      	str	r3, [r2, #32]
 80028de:	e01c      	b.n	800291a <HAL_RCC_OscConfig+0x36e>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	2b05      	cmp	r3, #5
 80028e6:	d10c      	bne.n	8002902 <HAL_RCC_OscConfig+0x356>
 80028e8:	4b61      	ldr	r3, [pc, #388]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	4a60      	ldr	r2, [pc, #384]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 80028ee:	f043 0304 	orr.w	r3, r3, #4
 80028f2:	6213      	str	r3, [r2, #32]
 80028f4:	4b5e      	ldr	r3, [pc, #376]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	4a5d      	ldr	r2, [pc, #372]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6213      	str	r3, [r2, #32]
 8002900:	e00b      	b.n	800291a <HAL_RCC_OscConfig+0x36e>
 8002902:	4b5b      	ldr	r3, [pc, #364]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	4a5a      	ldr	r2, [pc, #360]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002908:	f023 0301 	bic.w	r3, r3, #1
 800290c:	6213      	str	r3, [r2, #32]
 800290e:	4b58      	ldr	r3, [pc, #352]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	4a57      	ldr	r2, [pc, #348]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002914:	f023 0304 	bic.w	r3, r3, #4
 8002918:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d015      	beq.n	800294e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002922:	f7fe fc19 	bl	8001158 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002928:	e00a      	b.n	8002940 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292a:	f7fe fc15 	bl	8001158 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002938:	4293      	cmp	r3, r2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e0b1      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002940:	4b4b      	ldr	r3, [pc, #300]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0ee      	beq.n	800292a <HAL_RCC_OscConfig+0x37e>
 800294c:	e014      	b.n	8002978 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294e:	f7fe fc03 	bl	8001158 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002954:	e00a      	b.n	800296c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002956:	f7fe fbff 	bl	8001158 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002964:	4293      	cmp	r3, r2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e09b      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296c:	4b40      	ldr	r3, [pc, #256]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1ee      	bne.n	8002956 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002978:	7dfb      	ldrb	r3, [r7, #23]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d105      	bne.n	800298a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800297e:	4b3c      	ldr	r3, [pc, #240]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	4a3b      	ldr	r2, [pc, #236]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002984:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002988:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 8087 	beq.w	8002aa2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002994:	4b36      	ldr	r3, [pc, #216]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b08      	cmp	r3, #8
 800299e:	d061      	beq.n	8002a64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d146      	bne.n	8002a36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a8:	4b33      	ldr	r3, [pc, #204]	@ (8002a78 <HAL_RCC_OscConfig+0x4cc>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ae:	f7fe fbd3 	bl	8001158 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b6:	f7fe fbcf 	bl	8001158 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e06d      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c8:	4b29      	ldr	r3, [pc, #164]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1f0      	bne.n	80029b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029dc:	d108      	bne.n	80029f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029de:	4b24      	ldr	r3, [pc, #144]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	4921      	ldr	r1, [pc, #132]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a19      	ldr	r1, [r3, #32]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a00:	430b      	orrs	r3, r1
 8002a02:	491b      	ldr	r1, [pc, #108]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a08:	4b1b      	ldr	r3, [pc, #108]	@ (8002a78 <HAL_RCC_OscConfig+0x4cc>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0e:	f7fe fba3 	bl	8001158 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a16:	f7fe fb9f 	bl	8001158 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e03d      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a28:	4b11      	ldr	r3, [pc, #68]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x46a>
 8002a34:	e035      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a36:	4b10      	ldr	r3, [pc, #64]	@ (8002a78 <HAL_RCC_OscConfig+0x4cc>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fb8c 	bl	8001158 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a44:	f7fe fb88 	bl	8001158 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e026      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a56:	4b06      	ldr	r3, [pc, #24]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x498>
 8002a62:	e01e      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d107      	bne.n	8002a7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e019      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
 8002a70:	40021000 	.word	0x40021000
 8002a74:	40007000 	.word	0x40007000
 8002a78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002aac <HAL_RCC_OscConfig+0x500>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d106      	bne.n	8002a9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d001      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40021000 	.word	0x40021000

08002ab0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0d0      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac4:	4b6a      	ldr	r3, [pc, #424]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d910      	bls.n	8002af4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad2:	4b67      	ldr	r3, [pc, #412]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f023 0207 	bic.w	r2, r3, #7
 8002ada:	4965      	ldr	r1, [pc, #404]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c0>)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae2:	4b63      	ldr	r3, [pc, #396]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d001      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e0b8      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d020      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d005      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b0c:	4b59      	ldr	r3, [pc, #356]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	4a58      	ldr	r2, [pc, #352]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b24:	4b53      	ldr	r3, [pc, #332]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	4a52      	ldr	r2, [pc, #328]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002b2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b30:	4b50      	ldr	r3, [pc, #320]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	494d      	ldr	r1, [pc, #308]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d040      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d107      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b56:	4b47      	ldr	r3, [pc, #284]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d115      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e07f      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d107      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b6e:	4b41      	ldr	r3, [pc, #260]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d109      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e073      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e06b      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b8e:	4b39      	ldr	r3, [pc, #228]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f023 0203 	bic.w	r2, r3, #3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	4936      	ldr	r1, [pc, #216]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ba0:	f7fe fada 	bl	8001158 <HAL_GetTick>
 8002ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba8:	f7fe fad6 	bl	8001158 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e053      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bbe:	4b2d      	ldr	r3, [pc, #180]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 020c 	and.w	r2, r3, #12
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d1eb      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd0:	4b27      	ldr	r3, [pc, #156]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d210      	bcs.n	8002c00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bde:	4b24      	ldr	r3, [pc, #144]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f023 0207 	bic.w	r2, r3, #7
 8002be6:	4922      	ldr	r1, [pc, #136]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c0>)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bee:	4b20      	ldr	r3, [pc, #128]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d001      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e032      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d008      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c0c:	4b19      	ldr	r3, [pc, #100]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	4916      	ldr	r1, [pc, #88]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d009      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c2a:	4b12      	ldr	r3, [pc, #72]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	490e      	ldr	r1, [pc, #56]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c3e:	f000 f821 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 8002c42:	4602      	mov	r2, r0
 8002c44:	4b0b      	ldr	r3, [pc, #44]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	091b      	lsrs	r3, r3, #4
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	490a      	ldr	r1, [pc, #40]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c8>)
 8002c50:	5ccb      	ldrb	r3, [r1, r3]
 8002c52:	fa22 f303 	lsr.w	r3, r2, r3
 8002c56:	4a09      	ldr	r2, [pc, #36]	@ (8002c7c <HAL_RCC_ClockConfig+0x1cc>)
 8002c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c5a:	4b09      	ldr	r3, [pc, #36]	@ (8002c80 <HAL_RCC_ClockConfig+0x1d0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fe fa38 	bl	80010d4 <HAL_InitTick>

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40022000 	.word	0x40022000
 8002c74:	40021000 	.word	0x40021000
 8002c78:	08005710 	.word	0x08005710
 8002c7c:	20000000 	.word	0x20000000
 8002c80:	20000004 	.word	0x20000004

08002c84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60bb      	str	r3, [r7, #8]
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	2300      	movs	r3, #0
 8002c98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d002      	beq.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x30>
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d003      	beq.n	8002cba <HAL_RCC_GetSysClockFreq+0x36>
 8002cb2:	e027      	b.n	8002d04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cb4:	4b19      	ldr	r3, [pc, #100]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x98>)
 8002cb6:	613b      	str	r3, [r7, #16]
      break;
 8002cb8:	e027      	b.n	8002d0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	0c9b      	lsrs	r3, r3, #18
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	4a17      	ldr	r2, [pc, #92]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cc4:	5cd3      	ldrb	r3, [r2, r3]
 8002cc6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d010      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cd2:	4b11      	ldr	r3, [pc, #68]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	0c5b      	lsrs	r3, r3, #17
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	4a11      	ldr	r2, [pc, #68]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cde:	5cd3      	ldrb	r3, [r2, r3]
 8002ce0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ce6:	fb03 f202 	mul.w	r2, r3, r2
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	e004      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a0c      	ldr	r2, [pc, #48]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cf8:	fb02 f303 	mul.w	r3, r2, r3
 8002cfc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	613b      	str	r3, [r7, #16]
      break;
 8002d02:	e002      	b.n	8002d0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d04:	4b05      	ldr	r3, [pc, #20]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x98>)
 8002d06:	613b      	str	r3, [r7, #16]
      break;
 8002d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d0a:	693b      	ldr	r3, [r7, #16]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	371c      	adds	r7, #28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	007a1200 	.word	0x007a1200
 8002d20:	08005728 	.word	0x08005728
 8002d24:	08005738 	.word	0x08005738
 8002d28:	003d0900 	.word	0x003d0900

08002d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d30:	4b02      	ldr	r3, [pc, #8]	@ (8002d3c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d32:	681b      	ldr	r3, [r3, #0]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr
 8002d3c:	20000000 	.word	0x20000000

08002d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d44:	f7ff fff2 	bl	8002d2c <HAL_RCC_GetHCLKFreq>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	4b05      	ldr	r3, [pc, #20]	@ (8002d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	0a1b      	lsrs	r3, r3, #8
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	4903      	ldr	r1, [pc, #12]	@ (8002d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d56:	5ccb      	ldrb	r3, [r1, r3]
 8002d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40021000 	.word	0x40021000
 8002d64:	08005720 	.word	0x08005720

08002d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d6c:	f7ff ffde 	bl	8002d2c <HAL_RCC_GetHCLKFreq>
 8002d70:	4602      	mov	r2, r0
 8002d72:	4b05      	ldr	r3, [pc, #20]	@ (8002d88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	0adb      	lsrs	r3, r3, #11
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	4903      	ldr	r1, [pc, #12]	@ (8002d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d7e:	5ccb      	ldrb	r3, [r1, r3]
 8002d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	08005720 	.word	0x08005720

08002d90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d98:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc4 <RCC_Delay+0x34>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc8 <RCC_Delay+0x38>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	0a5b      	lsrs	r3, r3, #9
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	fb02 f303 	mul.w	r3, r2, r3
 8002daa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002dac:	bf00      	nop
  }
  while (Delay --);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	1e5a      	subs	r2, r3, #1
 8002db2:	60fa      	str	r2, [r7, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f9      	bne.n	8002dac <RCC_Delay+0x1c>
}
 8002db8:	bf00      	nop
 8002dba:	bf00      	nop
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr
 8002dc4:	20000000 	.word	0x20000000
 8002dc8:	10624dd3 	.word	0x10624dd3

08002dcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e041      	b.n	8002e62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fe f858 	bl	8000ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3304      	adds	r3, #4
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	f000 faa2 	bl	8003354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d001      	beq.n	8002e84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e03a      	b.n	8002efa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0201 	orr.w	r2, r2, #1
 8002e9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a18      	ldr	r2, [pc, #96]	@ (8002f04 <HAL_TIM_Base_Start_IT+0x98>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d00e      	beq.n	8002ec4 <HAL_TIM_Base_Start_IT+0x58>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eae:	d009      	beq.n	8002ec4 <HAL_TIM_Base_Start_IT+0x58>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a14      	ldr	r2, [pc, #80]	@ (8002f08 <HAL_TIM_Base_Start_IT+0x9c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d004      	beq.n	8002ec4 <HAL_TIM_Base_Start_IT+0x58>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a13      	ldr	r2, [pc, #76]	@ (8002f0c <HAL_TIM_Base_Start_IT+0xa0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d111      	bne.n	8002ee8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b06      	cmp	r3, #6
 8002ed4:	d010      	beq.n	8002ef8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0201 	orr.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee6:	e007      	b.n	8002ef8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr
 8002f04:	40012c00 	.word	0x40012c00
 8002f08:	40000400 	.word	0x40000400
 8002f0c:	40000800 	.word	0x40000800

08002f10 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0201 	bic.w	r2, r2, #1
 8002f26:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6a1a      	ldr	r2, [r3, #32]
 8002f2e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10f      	bne.n	8002f58 <HAL_TIM_Base_Stop_IT+0x48>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6a1a      	ldr	r2, [r3, #32]
 8002f3e:	f240 4344 	movw	r3, #1092	@ 0x444
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d107      	bne.n	8002f58 <HAL_TIM_Base_Stop_IT+0x48>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0201 	bic.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr

08002f6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d122      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d11b      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0202 	mvn.w	r2, #2
 8002f98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f9b4 	bl	800331c <HAL_TIM_IC_CaptureCallback>
 8002fb4:	e005      	b.n	8002fc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f9a7 	bl	800330a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f9b6 	bl	800332e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d122      	bne.n	800301c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d11b      	bne.n	800301c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 0204 	mvn.w	r2, #4
 8002fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f98a 	bl	800331c <HAL_TIM_IC_CaptureCallback>
 8003008:	e005      	b.n	8003016 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f97d 	bl	800330a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f98c 	bl	800332e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b08      	cmp	r3, #8
 8003028:	d122      	bne.n	8003070 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b08      	cmp	r3, #8
 8003036:	d11b      	bne.n	8003070 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0208 	mvn.w	r2, #8
 8003040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2204      	movs	r2, #4
 8003046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f960 	bl	800331c <HAL_TIM_IC_CaptureCallback>
 800305c:	e005      	b.n	800306a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f953 	bl	800330a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f962 	bl	800332e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0310 	and.w	r3, r3, #16
 800307a:	2b10      	cmp	r3, #16
 800307c:	d122      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2b10      	cmp	r3, #16
 800308a:	d11b      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0210 	mvn.w	r2, #16
 8003094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2208      	movs	r2, #8
 800309a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f936 	bl	800331c <HAL_TIM_IC_CaptureCallback>
 80030b0:	e005      	b.n	80030be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f929 	bl	800330a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f938 	bl	800332e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d10e      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d107      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0201 	mvn.w	r2, #1
 80030e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fd fa20 	bl	8000530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030fa:	2b80      	cmp	r3, #128	@ 0x80
 80030fc:	d10e      	bne.n	800311c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003108:	2b80      	cmp	r3, #128	@ 0x80
 800310a:	d107      	bne.n	800311c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fa7b 	bl	8003612 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003126:	2b40      	cmp	r3, #64	@ 0x40
 8003128:	d10e      	bne.n	8003148 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003134:	2b40      	cmp	r3, #64	@ 0x40
 8003136:	d107      	bne.n	8003148 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f8fc 	bl	8003340 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b20      	cmp	r3, #32
 8003154:	d10e      	bne.n	8003174 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f003 0320 	and.w	r3, r3, #32
 8003160:	2b20      	cmp	r3, #32
 8003162:	d107      	bne.n	8003174 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0220 	mvn.w	r2, #32
 800316c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fa46 	bl	8003600 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003174:	bf00      	nop
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_TIM_ConfigClockSource+0x1c>
 8003194:	2302      	movs	r3, #2
 8003196:	e0b4      	b.n	8003302 <HAL_TIM_ConfigClockSource+0x186>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80031b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031d0:	d03e      	beq.n	8003250 <HAL_TIM_ConfigClockSource+0xd4>
 80031d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031d6:	f200 8087 	bhi.w	80032e8 <HAL_TIM_ConfigClockSource+0x16c>
 80031da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031de:	f000 8086 	beq.w	80032ee <HAL_TIM_ConfigClockSource+0x172>
 80031e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031e6:	d87f      	bhi.n	80032e8 <HAL_TIM_ConfigClockSource+0x16c>
 80031e8:	2b70      	cmp	r3, #112	@ 0x70
 80031ea:	d01a      	beq.n	8003222 <HAL_TIM_ConfigClockSource+0xa6>
 80031ec:	2b70      	cmp	r3, #112	@ 0x70
 80031ee:	d87b      	bhi.n	80032e8 <HAL_TIM_ConfigClockSource+0x16c>
 80031f0:	2b60      	cmp	r3, #96	@ 0x60
 80031f2:	d050      	beq.n	8003296 <HAL_TIM_ConfigClockSource+0x11a>
 80031f4:	2b60      	cmp	r3, #96	@ 0x60
 80031f6:	d877      	bhi.n	80032e8 <HAL_TIM_ConfigClockSource+0x16c>
 80031f8:	2b50      	cmp	r3, #80	@ 0x50
 80031fa:	d03c      	beq.n	8003276 <HAL_TIM_ConfigClockSource+0xfa>
 80031fc:	2b50      	cmp	r3, #80	@ 0x50
 80031fe:	d873      	bhi.n	80032e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003200:	2b40      	cmp	r3, #64	@ 0x40
 8003202:	d058      	beq.n	80032b6 <HAL_TIM_ConfigClockSource+0x13a>
 8003204:	2b40      	cmp	r3, #64	@ 0x40
 8003206:	d86f      	bhi.n	80032e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003208:	2b30      	cmp	r3, #48	@ 0x30
 800320a:	d064      	beq.n	80032d6 <HAL_TIM_ConfigClockSource+0x15a>
 800320c:	2b30      	cmp	r3, #48	@ 0x30
 800320e:	d86b      	bhi.n	80032e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003210:	2b20      	cmp	r3, #32
 8003212:	d060      	beq.n	80032d6 <HAL_TIM_ConfigClockSource+0x15a>
 8003214:	2b20      	cmp	r3, #32
 8003216:	d867      	bhi.n	80032e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003218:	2b00      	cmp	r3, #0
 800321a:	d05c      	beq.n	80032d6 <HAL_TIM_ConfigClockSource+0x15a>
 800321c:	2b10      	cmp	r3, #16
 800321e:	d05a      	beq.n	80032d6 <HAL_TIM_ConfigClockSource+0x15a>
 8003220:	e062      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003232:	f000 f968 	bl	8003506 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003244:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	609a      	str	r2, [r3, #8]
      break;
 800324e:	e04f      	b.n	80032f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003260:	f000 f951 	bl	8003506 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003272:	609a      	str	r2, [r3, #8]
      break;
 8003274:	e03c      	b.n	80032f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003282:	461a      	mov	r2, r3
 8003284:	f000 f8c8 	bl	8003418 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2150      	movs	r1, #80	@ 0x50
 800328e:	4618      	mov	r0, r3
 8003290:	f000 f91f 	bl	80034d2 <TIM_ITRx_SetConfig>
      break;
 8003294:	e02c      	b.n	80032f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032a2:	461a      	mov	r2, r3
 80032a4:	f000 f8e6 	bl	8003474 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2160      	movs	r1, #96	@ 0x60
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 f90f 	bl	80034d2 <TIM_ITRx_SetConfig>
      break;
 80032b4:	e01c      	b.n	80032f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032c2:	461a      	mov	r2, r3
 80032c4:	f000 f8a8 	bl	8003418 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2140      	movs	r1, #64	@ 0x40
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 f8ff 	bl	80034d2 <TIM_ITRx_SetConfig>
      break;
 80032d4:	e00c      	b.n	80032f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4619      	mov	r1, r3
 80032e0:	4610      	mov	r0, r2
 80032e2:	f000 f8f6 	bl	80034d2 <TIM_ITRx_SetConfig>
      break;
 80032e6:	e003      	b.n	80032f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	73fb      	strb	r3, [r7, #15]
      break;
 80032ec:	e000      	b.n	80032f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003300:	7bfb      	ldrb	r3, [r7, #15]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr

0800331c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr

0800332e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr
	...

08003354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a29      	ldr	r2, [pc, #164]	@ (800340c <TIM_Base_SetConfig+0xb8>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d00b      	beq.n	8003384 <TIM_Base_SetConfig+0x30>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003372:	d007      	beq.n	8003384 <TIM_Base_SetConfig+0x30>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a26      	ldr	r2, [pc, #152]	@ (8003410 <TIM_Base_SetConfig+0xbc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d003      	beq.n	8003384 <TIM_Base_SetConfig+0x30>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a25      	ldr	r2, [pc, #148]	@ (8003414 <TIM_Base_SetConfig+0xc0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d108      	bne.n	8003396 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800338a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a1c      	ldr	r2, [pc, #112]	@ (800340c <TIM_Base_SetConfig+0xb8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00b      	beq.n	80033b6 <TIM_Base_SetConfig+0x62>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033a4:	d007      	beq.n	80033b6 <TIM_Base_SetConfig+0x62>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a19      	ldr	r2, [pc, #100]	@ (8003410 <TIM_Base_SetConfig+0xbc>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d003      	beq.n	80033b6 <TIM_Base_SetConfig+0x62>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a18      	ldr	r2, [pc, #96]	@ (8003414 <TIM_Base_SetConfig+0xc0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d108      	bne.n	80033c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a07      	ldr	r2, [pc, #28]	@ (800340c <TIM_Base_SetConfig+0xb8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d103      	bne.n	80033fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	691a      	ldr	r2, [r3, #16]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	615a      	str	r2, [r3, #20]
}
 8003402:	bf00      	nop
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr
 800340c:	40012c00 	.word	0x40012c00
 8003410:	40000400 	.word	0x40000400
 8003414:	40000800 	.word	0x40000800

08003418 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	f023 0201 	bic.w	r2, r3, #1
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f023 030a 	bic.w	r3, r3, #10
 8003454:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	4313      	orrs	r3, r2
 800345c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	621a      	str	r2, [r3, #32]
}
 800346a:	bf00      	nop
 800346c:	371c      	adds	r7, #28
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr

08003474 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	f023 0210 	bic.w	r2, r3, #16
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800349e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	031b      	lsls	r3, r3, #12
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80034b0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	621a      	str	r2, [r3, #32]
}
 80034c8:	bf00      	nop
 80034ca:	371c      	adds	r7, #28
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr

080034d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b085      	sub	sp, #20
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f043 0307 	orr.w	r3, r3, #7
 80034f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	609a      	str	r2, [r3, #8]
}
 80034fc:	bf00      	nop
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	bc80      	pop	{r7}
 8003504:	4770      	bx	lr

08003506 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003506:	b480      	push	{r7}
 8003508:	b087      	sub	sp, #28
 800350a:	af00      	add	r7, sp, #0
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	607a      	str	r2, [r7, #4]
 8003512:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003520:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	021a      	lsls	r2, r3, #8
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	431a      	orrs	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4313      	orrs	r3, r2
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	609a      	str	r2, [r3, #8]
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr

08003544 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003558:	2302      	movs	r3, #2
 800355a:	e046      	b.n	80035ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003582:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4313      	orrs	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a16      	ldr	r2, [pc, #88]	@ (80035f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d00e      	beq.n	80035be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035a8:	d009      	beq.n	80035be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a12      	ldr	r2, [pc, #72]	@ (80035f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d004      	beq.n	80035be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a10      	ldr	r2, [pc, #64]	@ (80035fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d10c      	bne.n	80035d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr
 80035f4:	40012c00 	.word	0x40012c00
 80035f8:	40000400 	.word	0x40000400
 80035fc:	40000800 	.word	0x40000800

08003600 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr

08003612 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr

08003624 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e042      	b.n	80036bc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d106      	bne.n	8003650 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fd fcb2 	bl	8000fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2224      	movs	r2, #36	@ 0x24
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003666:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 fdc5 	bl	80041f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	691a      	ldr	r2, [r3, #16]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800367c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695a      	ldr	r2, [r3, #20]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800368c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800369c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08a      	sub	sp, #40	@ 0x28
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	4613      	mov	r3, r2
 80036d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b20      	cmp	r3, #32
 80036e2:	d16d      	bne.n	80037c0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <HAL_UART_Transmit+0x2c>
 80036ea:	88fb      	ldrh	r3, [r7, #6]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e066      	b.n	80037c2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2221      	movs	r2, #33	@ 0x21
 80036fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003702:	f7fd fd29 	bl	8001158 <HAL_GetTick>
 8003706:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	88fa      	ldrh	r2, [r7, #6]
 800370c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	88fa      	ldrh	r2, [r7, #6]
 8003712:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800371c:	d108      	bne.n	8003730 <HAL_UART_Transmit+0x6c>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d104      	bne.n	8003730 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	61bb      	str	r3, [r7, #24]
 800372e:	e003      	b.n	8003738 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003734:	2300      	movs	r3, #0
 8003736:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003738:	e02a      	b.n	8003790 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2200      	movs	r2, #0
 8003742:	2180      	movs	r1, #128	@ 0x80
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 fb14 	bl	8003d72 <UART_WaitOnFlagUntilTimeout>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e036      	b.n	80037c2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10b      	bne.n	8003772 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003768:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	3302      	adds	r3, #2
 800376e:	61bb      	str	r3, [r7, #24]
 8003770:	e007      	b.n	8003782 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	781a      	ldrb	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	3301      	adds	r3, #1
 8003780:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003786:	b29b      	uxth	r3, r3
 8003788:	3b01      	subs	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003794:	b29b      	uxth	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1cf      	bne.n	800373a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2200      	movs	r2, #0
 80037a2:	2140      	movs	r1, #64	@ 0x40
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 fae4 	bl	8003d72 <UART_WaitOnFlagUntilTimeout>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e006      	b.n	80037c2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	e000      	b.n	80037c2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80037c0:	2302      	movs	r3, #2
  }
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3720      	adds	r7, #32
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b084      	sub	sp, #16
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	60f8      	str	r0, [r7, #12]
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	4613      	mov	r3, r2
 80037d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b20      	cmp	r3, #32
 80037e2:	d112      	bne.n	800380a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <HAL_UART_Receive_IT+0x26>
 80037ea:	88fb      	ldrh	r3, [r7, #6]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e00b      	b.n	800380c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80037fa:	88fb      	ldrh	r3, [r7, #6]
 80037fc:	461a      	mov	r2, r3
 80037fe:	68b9      	ldr	r1, [r7, #8]
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 fb24 	bl	8003e4e <UART_Start_Receive_IT>
 8003806:	4603      	mov	r3, r0
 8003808:	e000      	b.n	800380c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800380a:	2302      	movs	r3, #2
  }
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b0ba      	sub	sp, #232	@ 0xe8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800383a:	2300      	movs	r3, #0
 800383c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003840:	2300      	movs	r3, #0
 8003842:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003852:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10f      	bne.n	800387a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800385a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800385e:	f003 0320 	and.w	r3, r3, #32
 8003862:	2b00      	cmp	r3, #0
 8003864:	d009      	beq.n	800387a <HAL_UART_IRQHandler+0x66>
 8003866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800386a:	f003 0320 	and.w	r3, r3, #32
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fc01 	bl	800407a <UART_Receive_IT>
      return;
 8003878:	e25b      	b.n	8003d32 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800387a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 80de 	beq.w	8003a40 <HAL_UART_IRQHandler+0x22c>
 8003884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d106      	bne.n	800389e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003894:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 80d1 	beq.w	8003a40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800389e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00b      	beq.n	80038c2 <HAL_UART_IRQHandler+0xae>
 80038aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d005      	beq.n	80038c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ba:	f043 0201 	orr.w	r2, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00b      	beq.n	80038e6 <HAL_UART_IRQHandler+0xd2>
 80038ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d005      	beq.n	80038e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038de:	f043 0202 	orr.w	r2, r3, #2
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00b      	beq.n	800390a <HAL_UART_IRQHandler+0xf6>
 80038f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d005      	beq.n	800390a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003902:	f043 0204 	orr.w	r2, r3, #4
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800390a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d011      	beq.n	800393a <HAL_UART_IRQHandler+0x126>
 8003916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800391a:	f003 0320 	and.w	r3, r3, #32
 800391e:	2b00      	cmp	r3, #0
 8003920:	d105      	bne.n	800392e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d005      	beq.n	800393a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003932:	f043 0208 	orr.w	r2, r3, #8
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 81f2 	beq.w	8003d28 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003948:	f003 0320 	and.w	r3, r3, #32
 800394c:	2b00      	cmp	r3, #0
 800394e:	d008      	beq.n	8003962 <HAL_UART_IRQHandler+0x14e>
 8003950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003954:	f003 0320 	and.w	r3, r3, #32
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 fb8c 	bl	800407a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800396c:	2b00      	cmp	r3, #0
 800396e:	bf14      	ite	ne
 8003970:	2301      	movne	r3, #1
 8003972:	2300      	moveq	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d103      	bne.n	800398e <HAL_UART_IRQHandler+0x17a>
 8003986:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800398a:	2b00      	cmp	r3, #0
 800398c:	d04f      	beq.n	8003a2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 fa96 	bl	8003ec0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d041      	beq.n	8003a26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3314      	adds	r3, #20
 80039a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80039b0:	e853 3f00 	ldrex	r3, [r3]
 80039b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80039b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80039bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3314      	adds	r3, #20
 80039ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80039ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80039d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80039da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80039de:	e841 2300 	strex	r3, r2, [r1]
 80039e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80039e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1d9      	bne.n	80039a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d013      	beq.n	8003a1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039fa:	4a7e      	ldr	r2, [pc, #504]	@ (8003bf4 <HAL_UART_IRQHandler+0x3e0>)
 80039fc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fe fb54 	bl	80020b0 <HAL_DMA_Abort_IT>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d016      	beq.n	8003a3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a18:	4610      	mov	r0, r2
 8003a1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a1c:	e00e      	b.n	8003a3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f993 	bl	8003d4a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a24:	e00a      	b.n	8003a3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f98f 	bl	8003d4a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a2c:	e006      	b.n	8003a3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f98b 	bl	8003d4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003a3a:	e175      	b.n	8003d28 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a3c:	bf00      	nop
    return;
 8003a3e:	e173      	b.n	8003d28 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	f040 814f 	bne.w	8003ce8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a4e:	f003 0310 	and.w	r3, r3, #16
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 8148 	beq.w	8003ce8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 8141 	beq.w	8003ce8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a66:	2300      	movs	r3, #0
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	60bb      	str	r3, [r7, #8]
 8003a7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 80b6 	beq.w	8003bf8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 8145 	beq.w	8003d2c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003aa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	f080 813e 	bcs.w	8003d2c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ab6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	f000 8088 	beq.w	8003bd4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	330c      	adds	r3, #12
 8003aca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ace:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ad2:	e853 3f00 	ldrex	r3, [r3]
 8003ad6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ada:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ade:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ae2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	330c      	adds	r3, #12
 8003aec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003af0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003af4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003afc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b00:	e841 2300 	strex	r3, r2, [r1]
 8003b04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003b08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1d9      	bne.n	8003ac4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3314      	adds	r3, #20
 8003b16:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b1a:	e853 3f00 	ldrex	r3, [r3]
 8003b1e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003b20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b22:	f023 0301 	bic.w	r3, r3, #1
 8003b26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3314      	adds	r3, #20
 8003b30:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b34:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003b38:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b40:	e841 2300 	strex	r3, r2, [r1]
 8003b44:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003b46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1e1      	bne.n	8003b10 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3314      	adds	r3, #20
 8003b52:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b56:	e853 3f00 	ldrex	r3, [r3]
 8003b5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003b5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	3314      	adds	r3, #20
 8003b6c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003b70:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b72:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b74:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003b76:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b78:	e841 2300 	strex	r3, r2, [r1]
 8003b7c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1e3      	bne.n	8003b4c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	330c      	adds	r3, #12
 8003b98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b9c:	e853 3f00 	ldrex	r3, [r3]
 8003ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ba2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ba4:	f023 0310 	bic.w	r3, r3, #16
 8003ba8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	330c      	adds	r3, #12
 8003bb2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003bb6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003bb8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003bbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003bbe:	e841 2300 	strex	r3, r2, [r1]
 8003bc2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003bc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1e3      	bne.n	8003b92 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fe fa33 	bl	800203a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	4619      	mov	r1, r3
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f8b6 	bl	8003d5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bf0:	e09c      	b.n	8003d2c <HAL_UART_IRQHandler+0x518>
 8003bf2:	bf00      	nop
 8003bf4:	08003f85 	.word	0x08003f85
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 808e 	beq.w	8003d30 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003c14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 8089 	beq.w	8003d30 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	330c      	adds	r3, #12
 8003c24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c28:	e853 3f00 	ldrex	r3, [r3]
 8003c2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	330c      	adds	r3, #12
 8003c3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003c42:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c4a:	e841 2300 	strex	r3, r2, [r1]
 8003c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e3      	bne.n	8003c1e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	3314      	adds	r3, #20
 8003c5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c60:	e853 3f00 	ldrex	r3, [r3]
 8003c64:	623b      	str	r3, [r7, #32]
   return(result);
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	f023 0301 	bic.w	r3, r3, #1
 8003c6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3314      	adds	r3, #20
 8003c76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c82:	e841 2300 	strex	r3, r2, [r1]
 8003c86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e3      	bne.n	8003c56 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	330c      	adds	r3, #12
 8003ca2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	e853 3f00 	ldrex	r3, [r3]
 8003caa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0310 	bic.w	r3, r3, #16
 8003cb2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	330c      	adds	r3, #12
 8003cbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003cc0:	61fa      	str	r2, [r7, #28]
 8003cc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	69b9      	ldr	r1, [r7, #24]
 8003cc6:	69fa      	ldr	r2, [r7, #28]
 8003cc8:	e841 2300 	strex	r3, r2, [r1]
 8003ccc:	617b      	str	r3, [r7, #20]
   return(result);
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e3      	bne.n	8003c9c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003cde:	4619      	mov	r1, r3
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f83b 	bl	8003d5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ce6:	e023      	b.n	8003d30 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d009      	beq.n	8003d08 <HAL_UART_IRQHandler+0x4f4>
 8003cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f953 	bl	8003fac <UART_Transmit_IT>
    return;
 8003d06:	e014      	b.n	8003d32 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00e      	beq.n	8003d32 <HAL_UART_IRQHandler+0x51e>
 8003d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d008      	beq.n	8003d32 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f992 	bl	800404a <UART_EndTransmit_IT>
    return;
 8003d26:	e004      	b.n	8003d32 <HAL_UART_IRQHandler+0x51e>
    return;
 8003d28:	bf00      	nop
 8003d2a:	e002      	b.n	8003d32 <HAL_UART_IRQHandler+0x51e>
      return;
 8003d2c:	bf00      	nop
 8003d2e:	e000      	b.n	8003d32 <HAL_UART_IRQHandler+0x51e>
      return;
 8003d30:	bf00      	nop
  }
}
 8003d32:	37e8      	adds	r7, #232	@ 0xe8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bc80      	pop	{r7}
 8003d48:	4770      	bx	lr

08003d4a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr

08003d5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr

08003d72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b090      	sub	sp, #64	@ 0x40
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	60f8      	str	r0, [r7, #12]
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	603b      	str	r3, [r7, #0]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d82:	e050      	b.n	8003e26 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8a:	d04c      	beq.n	8003e26 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d007      	beq.n	8003da2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d92:	f7fd f9e1 	bl	8001158 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d241      	bcs.n	8003e26 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	330c      	adds	r3, #12
 8003da8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dac:	e853 3f00 	ldrex	r3, [r3]
 8003db0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	330c      	adds	r3, #12
 8003dc0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003dc2:	637a      	str	r2, [r7, #52]	@ 0x34
 8003dc4:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003dc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003dca:	e841 2300 	strex	r3, r2, [r1]
 8003dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1e5      	bne.n	8003da2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	3314      	adds	r3, #20
 8003ddc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	e853 3f00 	ldrex	r3, [r3]
 8003de4:	613b      	str	r3, [r7, #16]
   return(result);
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f023 0301 	bic.w	r3, r3, #1
 8003dec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3314      	adds	r3, #20
 8003df4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003df6:	623a      	str	r2, [r7, #32]
 8003df8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfa:	69f9      	ldr	r1, [r7, #28]
 8003dfc:	6a3a      	ldr	r2, [r7, #32]
 8003dfe:	e841 2300 	strex	r3, r2, [r1]
 8003e02:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1e5      	bne.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e00f      	b.n	8003e46 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	bf0c      	ite	eq
 8003e36:	2301      	moveq	r3, #1
 8003e38:	2300      	movne	r3, #0
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	79fb      	ldrb	r3, [r7, #7]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d09f      	beq.n	8003d84 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3740      	adds	r7, #64	@ 0x40
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b085      	sub	sp, #20
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	88fa      	ldrh	r2, [r7, #6]
 8003e66:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	88fa      	ldrh	r2, [r7, #6]
 8003e6c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2222      	movs	r2, #34	@ 0x22
 8003e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d007      	beq.n	8003e94 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e92:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695a      	ldr	r2, [r3, #20]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0201 	orr.w	r2, r2, #1
 8003ea2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0220 	orr.w	r2, r2, #32
 8003eb2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bc80      	pop	{r7}
 8003ebe:	4770      	bx	lr

08003ec0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b095      	sub	sp, #84	@ 0x54
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	330c      	adds	r3, #12
 8003ece:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed2:	e853 3f00 	ldrex	r3, [r3]
 8003ed6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	330c      	adds	r3, #12
 8003ee6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ee8:	643a      	str	r2, [r7, #64]	@ 0x40
 8003eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003eee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ef0:	e841 2300 	strex	r3, r2, [r1]
 8003ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1e5      	bne.n	8003ec8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3314      	adds	r3, #20
 8003f02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	e853 3f00 	ldrex	r3, [r3]
 8003f0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f023 0301 	bic.w	r3, r3, #1
 8003f12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3314      	adds	r3, #20
 8003f1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f24:	e841 2300 	strex	r3, r2, [r1]
 8003f28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1e5      	bne.n	8003efc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d119      	bne.n	8003f6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	330c      	adds	r3, #12
 8003f3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	e853 3f00 	ldrex	r3, [r3]
 8003f46:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f023 0310 	bic.w	r3, r3, #16
 8003f4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	330c      	adds	r3, #12
 8003f56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f58:	61ba      	str	r2, [r7, #24]
 8003f5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5c:	6979      	ldr	r1, [r7, #20]
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	e841 2300 	strex	r3, r2, [r1]
 8003f64:	613b      	str	r3, [r7, #16]
   return(result);
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e5      	bne.n	8003f38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f7a:	bf00      	nop
 8003f7c:	3754      	adds	r7, #84	@ 0x54
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc80      	pop	{r7}
 8003f82:	4770      	bx	lr

08003f84 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f7ff fed3 	bl	8003d4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fa4:	bf00      	nop
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b21      	cmp	r3, #33	@ 0x21
 8003fbe:	d13e      	bne.n	800403e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fc8:	d114      	bne.n	8003ff4 <UART_Transmit_IT+0x48>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d110      	bne.n	8003ff4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fe6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	1c9a      	adds	r2, r3, #2
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	621a      	str	r2, [r3, #32]
 8003ff2:	e008      	b.n	8004006 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	1c59      	adds	r1, r3, #1
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6211      	str	r1, [r2, #32]
 8003ffe:	781a      	ldrb	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800400a:	b29b      	uxth	r3, r3
 800400c:	3b01      	subs	r3, #1
 800400e:	b29b      	uxth	r3, r3
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	4619      	mov	r1, r3
 8004014:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10f      	bne.n	800403a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68da      	ldr	r2, [r3, #12]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004028:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004038:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	e000      	b.n	8004040 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800403e:	2302      	movs	r3, #2
  }
}
 8004040:	4618      	mov	r0, r3
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr

0800404a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004060:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2220      	movs	r2, #32
 8004066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff fe64 	bl	8003d38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b08c      	sub	sp, #48	@ 0x30
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b22      	cmp	r3, #34	@ 0x22
 800408c:	f040 80ae 	bne.w	80041ec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004098:	d117      	bne.n	80040ca <UART_Receive_IT+0x50>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d113      	bne.n	80040ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c2:	1c9a      	adds	r2, r3, #2
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80040c8:	e026      	b.n	8004118 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80040d0:	2300      	movs	r3, #0
 80040d2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040dc:	d007      	beq.n	80040ee <UART_Receive_IT+0x74>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10a      	bne.n	80040fc <UART_Receive_IT+0x82>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d106      	bne.n	80040fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040f8:	701a      	strb	r2, [r3, #0]
 80040fa:	e008      	b.n	800410e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	b2db      	uxtb	r3, r3
 8004104:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004108:	b2da      	uxtb	r2, r3
 800410a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800410c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800411c:	b29b      	uxth	r3, r3
 800411e:	3b01      	subs	r3, #1
 8004120:	b29b      	uxth	r3, r3
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	4619      	mov	r1, r3
 8004126:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004128:	2b00      	cmp	r3, #0
 800412a:	d15d      	bne.n	80041e8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0220 	bic.w	r2, r2, #32
 800413a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800414a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695a      	ldr	r2, [r3, #20]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0201 	bic.w	r2, r2, #1
 800415a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416e:	2b01      	cmp	r3, #1
 8004170:	d135      	bne.n	80041de <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	330c      	adds	r3, #12
 800417e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	e853 3f00 	ldrex	r3, [r3]
 8004186:	613b      	str	r3, [r7, #16]
   return(result);
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f023 0310 	bic.w	r3, r3, #16
 800418e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	330c      	adds	r3, #12
 8004196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004198:	623a      	str	r2, [r7, #32]
 800419a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419c:	69f9      	ldr	r1, [r7, #28]
 800419e:	6a3a      	ldr	r2, [r7, #32]
 80041a0:	e841 2300 	strex	r3, r2, [r1]
 80041a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1e5      	bne.n	8004178 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0310 	and.w	r3, r3, #16
 80041b6:	2b10      	cmp	r3, #16
 80041b8:	d10a      	bne.n	80041d0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041ba:	2300      	movs	r3, #0
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041d4:	4619      	mov	r1, r3
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff fdc0 	bl	8003d5c <HAL_UARTEx_RxEventCallback>
 80041dc:	e002      	b.n	80041e4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fa74 	bl	80046cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041e4:	2300      	movs	r3, #0
 80041e6:	e002      	b.n	80041ee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80041e8:	2300      	movs	r3, #0
 80041ea:	e000      	b.n	80041ee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80041ec:	2302      	movs	r3, #2
  }
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3730      	adds	r7, #48	@ 0x30
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	4313      	orrs	r3, r2
 8004226:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004232:	f023 030c 	bic.w	r3, r3, #12
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6812      	ldr	r2, [r2, #0]
 800423a:	68b9      	ldr	r1, [r7, #8]
 800423c:	430b      	orrs	r3, r1
 800423e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699a      	ldr	r2, [r3, #24]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a2c      	ldr	r2, [pc, #176]	@ (800430c <UART_SetConfig+0x114>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d103      	bne.n	8004268 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004260:	f7fe fd82 	bl	8002d68 <HAL_RCC_GetPCLK2Freq>
 8004264:	60f8      	str	r0, [r7, #12]
 8004266:	e002      	b.n	800426e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004268:	f7fe fd6a 	bl	8002d40 <HAL_RCC_GetPCLK1Freq>
 800426c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	4613      	mov	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	009a      	lsls	r2, r3, #2
 8004278:	441a      	add	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	fbb2 f3f3 	udiv	r3, r2, r3
 8004284:	4a22      	ldr	r2, [pc, #136]	@ (8004310 <UART_SetConfig+0x118>)
 8004286:	fba2 2303 	umull	r2, r3, r2, r3
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	0119      	lsls	r1, r3, #4
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4613      	mov	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	009a      	lsls	r2, r3, #2
 8004298:	441a      	add	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80042a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004310 <UART_SetConfig+0x118>)
 80042a6:	fba3 0302 	umull	r0, r3, r3, r2
 80042aa:	095b      	lsrs	r3, r3, #5
 80042ac:	2064      	movs	r0, #100	@ 0x64
 80042ae:	fb00 f303 	mul.w	r3, r0, r3
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	3332      	adds	r3, #50	@ 0x32
 80042b8:	4a15      	ldr	r2, [pc, #84]	@ (8004310 <UART_SetConfig+0x118>)
 80042ba:	fba2 2303 	umull	r2, r3, r2, r3
 80042be:	095b      	lsrs	r3, r3, #5
 80042c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042c4:	4419      	add	r1, r3
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	4613      	mov	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	009a      	lsls	r2, r3, #2
 80042d0:	441a      	add	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80042dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004310 <UART_SetConfig+0x118>)
 80042de:	fba3 0302 	umull	r0, r3, r3, r2
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	2064      	movs	r0, #100	@ 0x64
 80042e6:	fb00 f303 	mul.w	r3, r0, r3
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	3332      	adds	r3, #50	@ 0x32
 80042f0:	4a07      	ldr	r2, [pc, #28]	@ (8004310 <UART_SetConfig+0x118>)
 80042f2:	fba2 2303 	umull	r2, r3, r2, r3
 80042f6:	095b      	lsrs	r3, r3, #5
 80042f8:	f003 020f 	and.w	r2, r3, #15
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	440a      	add	r2, r1
 8004302:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004304:	bf00      	nop
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40013800 	.word	0x40013800
 8004310:	51eb851f 	.word	0x51eb851f

08004314 <NextionAddComp>:
 */

#include "Nextion.h"

uint8_t NextionAddComp(Nextion* nex, NexComp* _nexcomp, char* objectname, uint8_t __page, uint8_t __id, void (*callbackFuncOnPress)(), void (*callbackFuncOnRelease)())
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	70fb      	strb	r3, [r7, #3]
	//Make space before passing the object name to the nexcomp struct
	_nexcomp->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fb ff12 	bl	800014c <strlen>
 8004328:	4603      	mov	r3, r0
 800432a:	3301      	adds	r3, #1
 800432c:	4618      	mov	r0, r3
 800432e:	f000 fc95 	bl	8004c5c <malloc>
 8004332:	4603      	mov	r3, r0
 8004334:	461a      	mov	r2, r3
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	60da      	str	r2, [r3, #12]
	//Pass the object name to the struct
	strcpy(_nexcomp->objname, objectname);
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	4618      	mov	r0, r3
 8004342:	f000 fda5 	bl	8004e90 <strcpy>

	//Pass the corresponding data from component to component struct
	_nexcomp->_id = __id;
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	7e3a      	ldrb	r2, [r7, #24]
 800434a:	705a      	strb	r2, [r3, #1]
	_nexcomp->_page = __page;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	78fa      	ldrb	r2, [r7, #3]
 8004350:	701a      	strb	r2, [r3, #0]

	//Add the component struct to the list on the Nextion Struct
	nex->_NexCompArr[nex->_NexCompCount] = _nexcomp;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004358:	461a      	mov	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	321a      	adds	r2, #26
 800435e:	68b9      	ldr	r1, [r7, #8]
 8004360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nex->_NexCompCount++;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800436a:	3301      	adds	r3, #1
 800436c:	b2da      	uxtb	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

	//Bind the correct callback functions together
	_nexcomp->callbackOnPress = callbackFuncOnPress;
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	69fa      	ldr	r2, [r7, #28]
 8004378:	605a      	str	r2, [r3, #4]
	_nexcomp->callbackOnRelease = callbackFuncOnRelease;
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	6a3a      	ldr	r2, [r7, #32]
 800437e:	609a      	str	r2, [r3, #8]

	//Return OK
	return 0;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <NextionInit>:

uint8_t NextionInit(Nextion *nex, UART_HandleTypeDef *nextionUARTHandle)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b082      	sub	sp, #8
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	6039      	str	r1, [r7, #0]
	//Pass the used UART handle to the struct
	nex->nextionUARTHandle = nextionUARTHandle;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	601a      	str	r2, [r3, #0]

	//Start the parsing counters from zero
	nex->_arrCount = 0;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
	nex->_pkgCount = 0;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66

	//Start UART transaction using DMA
	HAL_UART_Receive_IT(nex->nextionUARTHandle, (uint8_t *)&nex->_RxData, 1);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6818      	ldr	r0, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3364      	adds	r3, #100	@ 0x64
 80043b2:	2201      	movs	r2, #1
 80043b4:	4619      	mov	r1, r3
 80043b6:	f7ff fa08 	bl	80037ca <HAL_UART_Receive_IT>

	//Start the component count variable from zero
	nex->_NexCompCount  = 0;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

	//Return OK
	return 0;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <NextionUpdate>:

uint8_t NextionUpdate(UART_HandleTypeDef *huart, Nextion *nex)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
	if(huart->Instance == (nex->nextionUARTHandle->Instance))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	f040 80d9 	bne.w	8004598 <NextionUpdate+0x1cc>
	{
		//Add the received byte to the array and increment the counter afterwards
		nex->_RxDataArr[nex->_arrCount] = nex->_RxData;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 80043ec:	4619      	mov	r1, r3
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	f893 2064 	ldrb.w	r2, [r3, #100]	@ 0x64
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	440b      	add	r3, r1
 80043f8:	711a      	strb	r2, [r3, #4]
		nex->_arrCount++;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 8004400:	3301      	adds	r3, #1
 8004402:	b2da      	uxtb	r2, r3
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65

		//Count 0xFF
		if(nex->_RxData == 0xFF)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8004410:	2bff      	cmp	r3, #255	@ 0xff
 8004412:	d108      	bne.n	8004426 <NextionUpdate+0x5a>
			nex->_pkgCount++;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 800441a:	3301      	adds	r3, #1
 800441c:	b2da      	uxtb	r2, r3
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
 8004424:	e003      	b.n	800442e <NextionUpdate+0x62>
		else
			nex->_pkgCount = 0;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66

		//Assume a package is received after three 0xFF commands,
		//and start processing the data
		if(nex->_pkgCount == 3)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8004434:	2b03      	cmp	r3, #3
 8004436:	f040 80a7 	bne.w	8004588 <NextionUpdate+0x1bc>
		{
			//Determine the length (count) of the data
			uint8_t count = 0, FFCount = 0;
 800443a:	2300      	movs	r3, #0
 800443c:	73fb      	strb	r3, [r7, #15]
 800443e:	2300      	movs	r3, #0
 8004440:	73bb      	strb	r3, [r7, #14]
			for(uint8_t i = 0; FFCount < 3; i++)
 8004442:	2300      	movs	r3, #0
 8004444:	737b      	strb	r3, [r7, #13]
 8004446:	e00e      	b.n	8004466 <NextionUpdate+0x9a>
			{
				count++;
 8004448:	7bfb      	ldrb	r3, [r7, #15]
 800444a:	3301      	adds	r3, #1
 800444c:	73fb      	strb	r3, [r7, #15]
				if(nex->_RxDataArr[i] == 0xFF) FFCount++;
 800444e:	7b7b      	ldrb	r3, [r7, #13]
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	4413      	add	r3, r2
 8004454:	791b      	ldrb	r3, [r3, #4]
 8004456:	2bff      	cmp	r3, #255	@ 0xff
 8004458:	d102      	bne.n	8004460 <NextionUpdate+0x94>
 800445a:	7bbb      	ldrb	r3, [r7, #14]
 800445c:	3301      	adds	r3, #1
 800445e:	73bb      	strb	r3, [r7, #14]
			for(uint8_t i = 0; FFCount < 3; i++)
 8004460:	7b7b      	ldrb	r3, [r7, #13]
 8004462:	3301      	adds	r3, #1
 8004464:	737b      	strb	r3, [r7, #13]
 8004466:	7bbb      	ldrb	r3, [r7, #14]
 8004468:	2b02      	cmp	r3, #2
 800446a:	d9ed      	bls.n	8004448 <NextionUpdate+0x7c>
			}

			//In case of a touch event call the callback function accordingly,
			if(nex->_RxDataArr[0] == NEX_RET_EVENT_TOUCH_HEAD)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	791b      	ldrb	r3, [r3, #4]
 8004470:	2b65      	cmp	r3, #101	@ 0x65
 8004472:	d145      	bne.n	8004500 <NextionUpdate+0x134>
			{
				//Loop through the component struct array,
				for(uint8_t i = 0; i < nex->_NexCompCount; i++)
 8004474:	2300      	movs	r3, #0
 8004476:	733b      	strb	r3, [r7, #12]
 8004478:	e03c      	b.n	80044f4 <NextionUpdate+0x128>
				{
					//Detect the affected component by its Page and ID
					if( (nex->_RxDataArr[2] == (nex->_NexCompArr[i]->_id)) && (nex->_RxDataArr[1] == (nex->_NexCompArr[i]->_page)) )
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	799a      	ldrb	r2, [r3, #6]
 800447e:	7b39      	ldrb	r1, [r7, #12]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	311a      	adds	r1, #26
 8004484:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004488:	785b      	ldrb	r3, [r3, #1]
 800448a:	429a      	cmp	r2, r3
 800448c:	d12f      	bne.n	80044ee <NextionUpdate+0x122>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	795a      	ldrb	r2, [r3, #5]
 8004492:	7b39      	ldrb	r1, [r7, #12]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	311a      	adds	r1, #26
 8004498:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d125      	bne.n	80044ee <NextionUpdate+0x122>
					{
						//Call the desired On Press or On Release callback function,
						if((nex->_RxDataArr[3] == NEX_EVENT_ON_PRESS) && (nex->_NexCompArr[i]->callbackOnPress != NULL))
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	79db      	ldrb	r3, [r3, #7]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d10e      	bne.n	80044c8 <NextionUpdate+0xfc>
 80044aa:	7b3a      	ldrb	r2, [r7, #12]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	321a      	adds	r2, #26
 80044b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d006      	beq.n	80044c8 <NextionUpdate+0xfc>
							nex->_NexCompArr[i]->callbackOnPress();
 80044ba:	7b3a      	ldrb	r2, [r7, #12]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	321a      	adds	r2, #26
 80044c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	4798      	blx	r3
						if((nex->_RxDataArr[3] == NEX_EVENT_ON_RELEASE) && (nex->_NexCompArr[i]->callbackOnRelease != NULL))
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	79db      	ldrb	r3, [r3, #7]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10e      	bne.n	80044ee <NextionUpdate+0x122>
 80044d0:	7b3a      	ldrb	r2, [r7, #12]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	321a      	adds	r2, #26
 80044d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d006      	beq.n	80044ee <NextionUpdate+0x122>
							nex->_NexCompArr[i]->callbackOnRelease();
 80044e0:	7b3a      	ldrb	r2, [r7, #12]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	321a      	adds	r2, #26
 80044e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	4798      	blx	r3
				for(uint8_t i = 0; i < nex->_NexCompCount; i++)
 80044ee:	7b3b      	ldrb	r3, [r7, #12]
 80044f0:	3301      	adds	r3, #1
 80044f2:	733b      	strb	r3, [r7, #12]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80044fa:	7b3a      	ldrb	r2, [r7, #12]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d3bc      	bcc.n	800447a <NextionUpdate+0xae>
					}
				}
			}

			//If the received package contains string data
			if(nex->_RxDataArr[0] == NEX_RET_STRING_HEAD)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	791b      	ldrb	r3, [r3, #4]
 8004504:	2b70      	cmp	r3, #112	@ 0x70
 8004506:	d121      	bne.n	800454c <NextionUpdate+0x180>
			{
				nex->NextTextLen = 0;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9
				for(int i = 0; i < (count - 4); i++)
 8004510:	2300      	movs	r3, #0
 8004512:	60bb      	str	r3, [r7, #8]
 8004514:	e015      	b.n	8004542 <NextionUpdate+0x176>
				{
					nex->NexTextBuff[i] = nex->_RxDataArr[i+1];
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	3301      	adds	r3, #1
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	4413      	add	r3, r2
 800451e:	7919      	ldrb	r1, [r3, #4]
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	4413      	add	r3, r2
 8004526:	3399      	adds	r3, #153	@ 0x99
 8004528:	460a      	mov	r2, r1
 800452a:	701a      	strb	r2, [r3, #0]
					nex->NextTextLen++;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	f893 30d9 	ldrb.w	r3, [r3, #217]	@ 0xd9
 8004532:	3301      	adds	r3, #1
 8004534:	b2da      	uxtb	r2, r3
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9
				for(int i = 0; i < (count - 4); i++)
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	3301      	adds	r3, #1
 8004540:	60bb      	str	r3, [r7, #8]
 8004542:	7bfb      	ldrb	r3, [r7, #15]
 8004544:	3b04      	subs	r3, #4
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	429a      	cmp	r2, r3
 800454a:	dbe4      	blt.n	8004516 <NextionUpdate+0x14a>
				}
			}

			//If the received package contains integer data
			if(nex->_RxDataArr[0] == NEX_RET_NUMBER_HEAD)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	791b      	ldrb	r3, [r3, #4]
 8004550:	2b71      	cmp	r3, #113	@ 0x71
 8004552:	d111      	bne.n	8004578 <NextionUpdate+0x1ac>
			{
				nex->NextNumBuff = ((uint32_t)nex->_RxDataArr[4]<<24)|((uint32_t)nex->_RxDataArr[3]<<16)|(nex->_RxDataArr[2]<<8)|(nex->_RxDataArr[1]);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	7a1b      	ldrb	r3, [r3, #8]
 8004558:	061a      	lsls	r2, r3, #24
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	79db      	ldrb	r3, [r3, #7]
 800455e:	041b      	lsls	r3, r3, #16
 8004560:	431a      	orrs	r2, r3
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	799b      	ldrb	r3, [r3, #6]
 8004566:	021b      	lsls	r3, r3, #8
 8004568:	4313      	orrs	r3, r2
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	7952      	ldrb	r2, [r2, #5]
 800456e:	4313      	orrs	r3, r2
 8004570:	461a      	mov	r2, r3
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
			}

			//Reset the buffer counters
			nex->_pkgCount = 0;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
			nex->_arrCount = 0;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
		}

		HAL_UART_Receive_IT(nex->nextionUARTHandle, (uint8_t *)&nex->_RxData, 1);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	6818      	ldr	r0, [r3, #0]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	3364      	adds	r3, #100	@ 0x64
 8004590:	2201      	movs	r2, #1
 8004592:	4619      	mov	r1, r3
 8004594:	f7ff f919 	bl	80037ca <HAL_UART_Receive_IT>
	}

	//Return OK
	return 0;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <NextionSetText>:
	//Return OK
	return 0;
}

uint8_t NextionSetText(Nextion *nex, NexComp *comp, char *usertext)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b094      	sub	sp, #80	@ 0x50
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
	//Allocate a static buffer for combining the transfer command string
	char transmitBuff[NEXTION_TEXT_BUFF_LEN] = {0};
 80045b0:	2300      	movs	r3, #0
 80045b2:	613b      	str	r3, [r7, #16]
 80045b4:	f107 0314 	add.w	r3, r7, #20
 80045b8:	223c      	movs	r2, #60	@ 0x3c
 80045ba:	2100      	movs	r1, #0
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 fc23 	bl	8004e08 <memset>

	//Combine required commands in a single string
	sprintf(transmitBuff, "%s.txt=\"%s\"", comp->objname, usertext);
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	f107 0010 	add.w	r0, r7, #16
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4906      	ldr	r1, [pc, #24]	@ (80045e8 <NextionSetText+0x44>)
 80045ce:	f000 fbfb 	bl	8004dc8 <siprintf>

	//Send the combined command to Nextion and wait for the received answer
	NextionSendCommand(nex, transmitBuff);
 80045d2:	f107 0310 	add.w	r3, r7, #16
 80045d6:	4619      	mov	r1, r3
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 f82b 	bl	8004634 <NextionSendCommand>

	//Return OK
	return 0;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3750      	adds	r7, #80	@ 0x50
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	08005614 	.word	0x08005614

080045ec <NextionSetVal>:
	//Return OK
	return 0;
}

uint8_t NextionSetVal(Nextion *nex, NexComp *comp, int userval)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b094      	sub	sp, #80	@ 0x50
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
	//Allocate a static buffer for combining the transfer command string
	char transmitBuff[NEXTION_TEXT_BUFF_LEN] = {0};
 80045f8:	2300      	movs	r3, #0
 80045fa:	613b      	str	r3, [r7, #16]
 80045fc:	f107 0314 	add.w	r3, r7, #20
 8004600:	223c      	movs	r2, #60	@ 0x3c
 8004602:	2100      	movs	r1, #0
 8004604:	4618      	mov	r0, r3
 8004606:	f000 fbff 	bl	8004e08 <memset>

	//Combine required commands in a single string
	sprintf(transmitBuff, "%s.val=%d", comp->objname, userval);
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	f107 0010 	add.w	r0, r7, #16
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4906      	ldr	r1, [pc, #24]	@ (8004630 <NextionSetVal+0x44>)
 8004616:	f000 fbd7 	bl	8004dc8 <siprintf>

	//Send the combined command to Nextion and wait for the received answer
	NextionSendCommand(nex, transmitBuff);
 800461a:	f107 0310 	add.w	r3, r7, #16
 800461e:	4619      	mov	r1, r3
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 f807 	bl	8004634 <NextionSendCommand>

	//Return OK
	return 0;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3750      	adds	r7, #80	@ 0x50
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	0800562c 	.word	0x0800562c

08004634 <NextionSendCommand>:

char ENDTERMS[]={255,255,255};
uint8_t NextionSendCommand(Nextion *nex, char *_command)
{
 8004634:	b590      	push	{r4, r7, lr}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(nex->nextionUARTHandle, (uint8_t *)_command, strlen((const char*)_command), NEXTION_TIMEOUT);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681c      	ldr	r4, [r3, #0]
 8004642:	6838      	ldr	r0, [r7, #0]
 8004644:	f7fb fd82 	bl	800014c <strlen>
 8004648:	4603      	mov	r3, r0
 800464a:	b29a      	uxth	r2, r3
 800464c:	23fa      	movs	r3, #250	@ 0xfa
 800464e:	6839      	ldr	r1, [r7, #0]
 8004650:	4620      	mov	r0, r4
 8004652:	f7ff f837 	bl	80036c4 <HAL_UART_Transmit>
	NextionEndCommand(nex);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f806 	bl	8004668 <NextionEndCommand>

	//Return OK
	return 0;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	bd90      	pop	{r4, r7, pc}
	...

08004668 <NextionEndCommand>:

uint8_t NextionEndCommand(Nextion *nex)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
	uint8_t EndCommand[3] = {255, 255, 255};
 8004670:	4a0c      	ldr	r2, [pc, #48]	@ (80046a4 <NextionEndCommand+0x3c>)
 8004672:	f107 030c 	add.w	r3, r7, #12
 8004676:	6812      	ldr	r2, [r2, #0]
 8004678:	4611      	mov	r1, r2
 800467a:	8019      	strh	r1, [r3, #0]
 800467c:	3302      	adds	r3, #2
 800467e:	0c12      	lsrs	r2, r2, #16
 8004680:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(nex->nextionUARTHandle, EndCommand, 3, NEXTION_TIMEOUT);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6818      	ldr	r0, [r3, #0]
 8004686:	f107 010c 	add.w	r1, r7, #12
 800468a:	23fa      	movs	r3, #250	@ 0xfa
 800468c:	2203      	movs	r2, #3
 800468e:	f7ff f819 	bl	80036c4 <HAL_UART_Transmit>
	NextionRestartIT(nex);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f808 	bl	80046a8 <NextionRestartIT>

	//Return OK
	return 0;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	08005638 	.word	0x08005638

080046a8 <NextionRestartIT>:

//Following two functions are not needed anymore and will be removed in the future,
uint8_t NextionRestartIT(Nextion *nex)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(nex->nextionUARTHandle, (uint8_t *)&nex->_RxData, 1);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6818      	ldr	r0, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3364      	adds	r3, #100	@ 0x64
 80046b8:	2201      	movs	r2, #1
 80046ba:	4619      	mov	r1, r3
 80046bc:	f7ff f885 	bl	80037ca <HAL_UART_Receive_IT>

	//Return OK
	return 0;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <HAL_UART_RxCpltCallback>:
static NexComp min_cellt_label;
static NexComp min_cellt_id_label;

static NexComp comm_status_label;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]

	NextionUpdate(huart, &nextion_instance);
 80046d4:	4903      	ldr	r1, [pc, #12]	@ (80046e4 <HAL_UART_RxCpltCallback+0x18>)
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7ff fe78 	bl	80043cc <NextionUpdate>
}
 80046dc:	bf00      	nop
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	200002a0 	.word	0x200002a0

080046e8 <nextion_disp_init>:

void nextion_disp_init(void) {
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af04      	add	r7, sp, #16
	NextionInit(&nextion_instance, &huart1);
 80046ee:	494b      	ldr	r1, [pc, #300]	@ (800481c <nextion_disp_init+0x134>)
 80046f0:	484b      	ldr	r0, [pc, #300]	@ (8004820 <nextion_disp_init+0x138>)
 80046f2:	f7ff fe4a 	bl	800438a <NextionInit>

	NextionAddComp(&nextion_instance, &batt_volt_label, "home.batt_volt", 3, 5,
 80046f6:	2300      	movs	r3, #0
 80046f8:	9302      	str	r3, [sp, #8]
 80046fa:	2300      	movs	r3, #0
 80046fc:	9301      	str	r3, [sp, #4]
 80046fe:	2305      	movs	r3, #5
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	2303      	movs	r3, #3
 8004704:	4a47      	ldr	r2, [pc, #284]	@ (8004824 <nextion_disp_init+0x13c>)
 8004706:	4948      	ldr	r1, [pc, #288]	@ (8004828 <nextion_disp_init+0x140>)
 8004708:	4845      	ldr	r0, [pc, #276]	@ (8004820 <nextion_disp_init+0x138>)
 800470a:	f7ff fe03 	bl	8004314 <NextionAddComp>
	NULL, NULL);
	NextionAddComp(&nextion_instance, &batt_curr_label, "home.batt_curr", 3, 6, NULL,
 800470e:	2300      	movs	r3, #0
 8004710:	9302      	str	r3, [sp, #8]
 8004712:	2300      	movs	r3, #0
 8004714:	9301      	str	r3, [sp, #4]
 8004716:	2306      	movs	r3, #6
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	2303      	movs	r3, #3
 800471c:	4a43      	ldr	r2, [pc, #268]	@ (800482c <nextion_disp_init+0x144>)
 800471e:	4944      	ldr	r1, [pc, #272]	@ (8004830 <nextion_disp_init+0x148>)
 8004720:	483f      	ldr	r0, [pc, #252]	@ (8004820 <nextion_disp_init+0x138>)
 8004722:	f7ff fdf7 	bl	8004314 <NextionAddComp>
	NULL);
	NextionAddComp(&nextion_instance, &batt_soc_label, "home.batt_soc", 3, 7, NULL, NULL);
 8004726:	2300      	movs	r3, #0
 8004728:	9302      	str	r3, [sp, #8]
 800472a:	2300      	movs	r3, #0
 800472c:	9301      	str	r3, [sp, #4]
 800472e:	2307      	movs	r3, #7
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	2303      	movs	r3, #3
 8004734:	4a3f      	ldr	r2, [pc, #252]	@ (8004834 <nextion_disp_init+0x14c>)
 8004736:	4940      	ldr	r1, [pc, #256]	@ (8004838 <nextion_disp_init+0x150>)
 8004738:	4839      	ldr	r0, [pc, #228]	@ (8004820 <nextion_disp_init+0x138>)
 800473a:	f7ff fdeb 	bl	8004314 <NextionAddComp>
	NextionAddComp(&nextion_instance, &comm_status_label, "home.comm_status", 3, 4, NULL,
 800473e:	2300      	movs	r3, #0
 8004740:	9302      	str	r3, [sp, #8]
 8004742:	2300      	movs	r3, #0
 8004744:	9301      	str	r3, [sp, #4]
 8004746:	2304      	movs	r3, #4
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	2303      	movs	r3, #3
 800474c:	4a3b      	ldr	r2, [pc, #236]	@ (800483c <nextion_disp_init+0x154>)
 800474e:	493c      	ldr	r1, [pc, #240]	@ (8004840 <nextion_disp_init+0x158>)
 8004750:	4833      	ldr	r0, [pc, #204]	@ (8004820 <nextion_disp_init+0x138>)
 8004752:	f7ff fddf 	bl	8004314 <NextionAddComp>
	NULL);

	NextionAddComp(&nextion_instance, &max_cellv_label, "page1.max_cellv", 5, 7, NULL,
 8004756:	2300      	movs	r3, #0
 8004758:	9302      	str	r3, [sp, #8]
 800475a:	2300      	movs	r3, #0
 800475c:	9301      	str	r3, [sp, #4]
 800475e:	2307      	movs	r3, #7
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	2305      	movs	r3, #5
 8004764:	4a37      	ldr	r2, [pc, #220]	@ (8004844 <nextion_disp_init+0x15c>)
 8004766:	4938      	ldr	r1, [pc, #224]	@ (8004848 <nextion_disp_init+0x160>)
 8004768:	482d      	ldr	r0, [pc, #180]	@ (8004820 <nextion_disp_init+0x138>)
 800476a:	f7ff fdd3 	bl	8004314 <NextionAddComp>
	NULL);
	NextionAddComp(&nextion_instance, &max_cellv_id_label, "page1.max_cellv_id", 5, 8, NULL,
 800476e:	2300      	movs	r3, #0
 8004770:	9302      	str	r3, [sp, #8]
 8004772:	2300      	movs	r3, #0
 8004774:	9301      	str	r3, [sp, #4]
 8004776:	2308      	movs	r3, #8
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	2305      	movs	r3, #5
 800477c:	4a33      	ldr	r2, [pc, #204]	@ (800484c <nextion_disp_init+0x164>)
 800477e:	4934      	ldr	r1, [pc, #208]	@ (8004850 <nextion_disp_init+0x168>)
 8004780:	4827      	ldr	r0, [pc, #156]	@ (8004820 <nextion_disp_init+0x138>)
 8004782:	f7ff fdc7 	bl	8004314 <NextionAddComp>
	NULL);
	NextionAddComp(&nextion_instance, &min_cellv_label, "page1.min_cellv", 5, 9, NULL,
 8004786:	2300      	movs	r3, #0
 8004788:	9302      	str	r3, [sp, #8]
 800478a:	2300      	movs	r3, #0
 800478c:	9301      	str	r3, [sp, #4]
 800478e:	2309      	movs	r3, #9
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	2305      	movs	r3, #5
 8004794:	4a2f      	ldr	r2, [pc, #188]	@ (8004854 <nextion_disp_init+0x16c>)
 8004796:	4930      	ldr	r1, [pc, #192]	@ (8004858 <nextion_disp_init+0x170>)
 8004798:	4821      	ldr	r0, [pc, #132]	@ (8004820 <nextion_disp_init+0x138>)
 800479a:	f7ff fdbb 	bl	8004314 <NextionAddComp>
	NULL);
	NextionAddComp(&nextion_instance, &min_cellv_id_label, "page1.min_cellv_id", 5, 10, NULL,
 800479e:	2300      	movs	r3, #0
 80047a0:	9302      	str	r3, [sp, #8]
 80047a2:	2300      	movs	r3, #0
 80047a4:	9301      	str	r3, [sp, #4]
 80047a6:	230a      	movs	r3, #10
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	2305      	movs	r3, #5
 80047ac:	4a2b      	ldr	r2, [pc, #172]	@ (800485c <nextion_disp_init+0x174>)
 80047ae:	492c      	ldr	r1, [pc, #176]	@ (8004860 <nextion_disp_init+0x178>)
 80047b0:	481b      	ldr	r0, [pc, #108]	@ (8004820 <nextion_disp_init+0x138>)
 80047b2:	f7ff fdaf 	bl	8004314 <NextionAddComp>
	NULL);

	NextionAddComp(&nextion_instance, &max_cellt_label, "page2.max_cellt", 6, 7, NULL,
 80047b6:	2300      	movs	r3, #0
 80047b8:	9302      	str	r3, [sp, #8]
 80047ba:	2300      	movs	r3, #0
 80047bc:	9301      	str	r3, [sp, #4]
 80047be:	2307      	movs	r3, #7
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	2306      	movs	r3, #6
 80047c4:	4a27      	ldr	r2, [pc, #156]	@ (8004864 <nextion_disp_init+0x17c>)
 80047c6:	4928      	ldr	r1, [pc, #160]	@ (8004868 <nextion_disp_init+0x180>)
 80047c8:	4815      	ldr	r0, [pc, #84]	@ (8004820 <nextion_disp_init+0x138>)
 80047ca:	f7ff fda3 	bl	8004314 <NextionAddComp>
	NULL);
	NextionAddComp(&nextion_instance, &max_cellt_id_label, "page2.max_cellt_id", 6, 8, NULL,
 80047ce:	2300      	movs	r3, #0
 80047d0:	9302      	str	r3, [sp, #8]
 80047d2:	2300      	movs	r3, #0
 80047d4:	9301      	str	r3, [sp, #4]
 80047d6:	2308      	movs	r3, #8
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	2306      	movs	r3, #6
 80047dc:	4a23      	ldr	r2, [pc, #140]	@ (800486c <nextion_disp_init+0x184>)
 80047de:	4924      	ldr	r1, [pc, #144]	@ (8004870 <nextion_disp_init+0x188>)
 80047e0:	480f      	ldr	r0, [pc, #60]	@ (8004820 <nextion_disp_init+0x138>)
 80047e2:	f7ff fd97 	bl	8004314 <NextionAddComp>
	NULL);
	NextionAddComp(&nextion_instance, &min_cellt_label, "page2.min_cellt", 6, 9, NULL,
 80047e6:	2300      	movs	r3, #0
 80047e8:	9302      	str	r3, [sp, #8]
 80047ea:	2300      	movs	r3, #0
 80047ec:	9301      	str	r3, [sp, #4]
 80047ee:	2309      	movs	r3, #9
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	2306      	movs	r3, #6
 80047f4:	4a1f      	ldr	r2, [pc, #124]	@ (8004874 <nextion_disp_init+0x18c>)
 80047f6:	4920      	ldr	r1, [pc, #128]	@ (8004878 <nextion_disp_init+0x190>)
 80047f8:	4809      	ldr	r0, [pc, #36]	@ (8004820 <nextion_disp_init+0x138>)
 80047fa:	f7ff fd8b 	bl	8004314 <NextionAddComp>
	NULL);
	NextionAddComp(&nextion_instance, &min_cellt_id_label, "page2.min_cellt_id", 6, 10, NULL,
 80047fe:	2300      	movs	r3, #0
 8004800:	9302      	str	r3, [sp, #8]
 8004802:	2300      	movs	r3, #0
 8004804:	9301      	str	r3, [sp, #4]
 8004806:	230a      	movs	r3, #10
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	2306      	movs	r3, #6
 800480c:	4a1b      	ldr	r2, [pc, #108]	@ (800487c <nextion_disp_init+0x194>)
 800480e:	491c      	ldr	r1, [pc, #112]	@ (8004880 <nextion_disp_init+0x198>)
 8004810:	4803      	ldr	r0, [pc, #12]	@ (8004820 <nextion_disp_init+0x138>)
 8004812:	f7ff fd7f 	bl	8004314 <NextionAddComp>
	NULL);

}
 8004816:	bf00      	nop
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	20000254 	.word	0x20000254
 8004820:	200002a0 	.word	0x200002a0
 8004824:	0800563c 	.word	0x0800563c
 8004828:	20000380 	.word	0x20000380
 800482c:	0800564c 	.word	0x0800564c
 8004830:	20000390 	.word	0x20000390
 8004834:	0800565c 	.word	0x0800565c
 8004838:	200003a0 	.word	0x200003a0
 800483c:	0800566c 	.word	0x0800566c
 8004840:	20000430 	.word	0x20000430
 8004844:	08005680 	.word	0x08005680
 8004848:	200003b0 	.word	0x200003b0
 800484c:	08005690 	.word	0x08005690
 8004850:	200003c0 	.word	0x200003c0
 8004854:	080056a4 	.word	0x080056a4
 8004858:	200003d0 	.word	0x200003d0
 800485c:	080056b4 	.word	0x080056b4
 8004860:	200003e0 	.word	0x200003e0
 8004864:	080056c8 	.word	0x080056c8
 8004868:	200003f0 	.word	0x200003f0
 800486c:	080056d8 	.word	0x080056d8
 8004870:	20000400 	.word	0x20000400
 8004874:	080056ec 	.word	0x080056ec
 8004878:	20000410 	.word	0x20000410
 800487c:	080056fc 	.word	0x080056fc
 8004880:	20000420 	.word	0x20000420

08004884 <update_batt_volt_label>:

void update_batt_volt_label(int val){
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &batt_volt_label, val);
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	4904      	ldr	r1, [pc, #16]	@ (80048a0 <update_batt_volt_label+0x1c>)
 8004890:	4804      	ldr	r0, [pc, #16]	@ (80048a4 <update_batt_volt_label+0x20>)
 8004892:	f7ff feab 	bl	80045ec <NextionSetVal>
}
 8004896:	bf00      	nop
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	20000380 	.word	0x20000380
 80048a4:	200002a0 	.word	0x200002a0

080048a8 <update_batt_curr_label>:

void update_batt_curr_label(int val){
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &batt_curr_label, val);
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	4904      	ldr	r1, [pc, #16]	@ (80048c4 <update_batt_curr_label+0x1c>)
 80048b4:	4804      	ldr	r0, [pc, #16]	@ (80048c8 <update_batt_curr_label+0x20>)
 80048b6:	f7ff fe99 	bl	80045ec <NextionSetVal>
}
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20000390 	.word	0x20000390
 80048c8:	200002a0 	.word	0x200002a0

080048cc <update_batt_soc_label>:

void update_batt_soc_label(int val){
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &batt_soc_label, val);
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	4904      	ldr	r1, [pc, #16]	@ (80048e8 <update_batt_soc_label+0x1c>)
 80048d8:	4804      	ldr	r0, [pc, #16]	@ (80048ec <update_batt_soc_label+0x20>)
 80048da:	f7ff fe87 	bl	80045ec <NextionSetVal>
}
 80048de:	bf00      	nop
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	200003a0 	.word	0x200003a0
 80048ec:	200002a0 	.word	0x200002a0

080048f0 <update_comm_status_label>:

void update_comm_status_label(char *str) {
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
	NextionSetText(&nextion_instance, &comm_status_label, str);
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	4904      	ldr	r1, [pc, #16]	@ (800490c <update_comm_status_label+0x1c>)
 80048fc:	4804      	ldr	r0, [pc, #16]	@ (8004910 <update_comm_status_label+0x20>)
 80048fe:	f7ff fe51 	bl	80045a4 <NextionSetText>
}
 8004902:	bf00      	nop
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	20000430 	.word	0x20000430
 8004910:	200002a0 	.word	0x200002a0

08004914 <update_max_cellv_label>:


void update_max_cellv_label(int val) {
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &max_cellv_label, val);
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	4904      	ldr	r1, [pc, #16]	@ (8004930 <update_max_cellv_label+0x1c>)
 8004920:	4804      	ldr	r0, [pc, #16]	@ (8004934 <update_max_cellv_label+0x20>)
 8004922:	f7ff fe63 	bl	80045ec <NextionSetVal>
}
 8004926:	bf00      	nop
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	200003b0 	.word	0x200003b0
 8004934:	200002a0 	.word	0x200002a0

08004938 <update_max_cellv_id_label>:

void update_max_cellv_id_label(int val) {
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &max_cellv_id_label, val);
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	4904      	ldr	r1, [pc, #16]	@ (8004954 <update_max_cellv_id_label+0x1c>)
 8004944:	4804      	ldr	r0, [pc, #16]	@ (8004958 <update_max_cellv_id_label+0x20>)
 8004946:	f7ff fe51 	bl	80045ec <NextionSetVal>
}
 800494a:	bf00      	nop
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	200003c0 	.word	0x200003c0
 8004958:	200002a0 	.word	0x200002a0

0800495c <update_min_cellv_label>:

void update_min_cellv_label(int val) {
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &min_cellv_label, val);
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	4904      	ldr	r1, [pc, #16]	@ (8004978 <update_min_cellv_label+0x1c>)
 8004968:	4804      	ldr	r0, [pc, #16]	@ (800497c <update_min_cellv_label+0x20>)
 800496a:	f7ff fe3f 	bl	80045ec <NextionSetVal>
}
 800496e:	bf00      	nop
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	200003d0 	.word	0x200003d0
 800497c:	200002a0 	.word	0x200002a0

08004980 <update_min_cellv_id_label>:

void update_min_cellv_id_label(int val) {
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &min_cellv_id_label, val);
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	4904      	ldr	r1, [pc, #16]	@ (800499c <update_min_cellv_id_label+0x1c>)
 800498c:	4804      	ldr	r0, [pc, #16]	@ (80049a0 <update_min_cellv_id_label+0x20>)
 800498e:	f7ff fe2d 	bl	80045ec <NextionSetVal>
}
 8004992:	bf00      	nop
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	200003e0 	.word	0x200003e0
 80049a0:	200002a0 	.word	0x200002a0

080049a4 <update_max_cellt_label>:


void update_max_cellt_label(int val) {
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &max_cellt_label, val);
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	4904      	ldr	r1, [pc, #16]	@ (80049c0 <update_max_cellt_label+0x1c>)
 80049b0:	4804      	ldr	r0, [pc, #16]	@ (80049c4 <update_max_cellt_label+0x20>)
 80049b2:	f7ff fe1b 	bl	80045ec <NextionSetVal>
}
 80049b6:	bf00      	nop
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	200003f0 	.word	0x200003f0
 80049c4:	200002a0 	.word	0x200002a0

080049c8 <update_max_cellt_id_label>:

void update_max_cellt_id_label(int val) {
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &max_cellt_id_label, val);
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	4904      	ldr	r1, [pc, #16]	@ (80049e4 <update_max_cellt_id_label+0x1c>)
 80049d4:	4804      	ldr	r0, [pc, #16]	@ (80049e8 <update_max_cellt_id_label+0x20>)
 80049d6:	f7ff fe09 	bl	80045ec <NextionSetVal>
}
 80049da:	bf00      	nop
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	20000400 	.word	0x20000400
 80049e8:	200002a0 	.word	0x200002a0

080049ec <update_min_cellt_label>:

void update_min_cellt_label(int val) {
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &min_cellt_label, val);
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	4904      	ldr	r1, [pc, #16]	@ (8004a08 <update_min_cellt_label+0x1c>)
 80049f8:	4804      	ldr	r0, [pc, #16]	@ (8004a0c <update_min_cellt_label+0x20>)
 80049fa:	f7ff fdf7 	bl	80045ec <NextionSetVal>
}
 80049fe:	bf00      	nop
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000410 	.word	0x20000410
 8004a0c:	200002a0 	.word	0x200002a0

08004a10 <update_min_cellt_id_label>:

void update_min_cellt_id_label(int val) {
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
	NextionSetVal(&nextion_instance, &min_cellt_id_label, val);
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	4904      	ldr	r1, [pc, #16]	@ (8004a2c <update_min_cellt_id_label+0x1c>)
 8004a1c:	4804      	ldr	r0, [pc, #16]	@ (8004a30 <update_min_cellt_id_label+0x20>)
 8004a1e:	f7ff fde5 	bl	80045ec <NextionSetVal>
}
 8004a22:	bf00      	nop
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20000420 	.word	0x20000420
 8004a30:	200002a0 	.word	0x200002a0

08004a34 <reset_display>:



void reset_display(void) {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
	update_batt_volt_label(0);
 8004a38:	2000      	movs	r0, #0
 8004a3a:	f7ff ff23 	bl	8004884 <update_batt_volt_label>
	update_batt_curr_label(0);
 8004a3e:	2000      	movs	r0, #0
 8004a40:	f7ff ff32 	bl	80048a8 <update_batt_curr_label>
	update_batt_soc_label(0);
 8004a44:	2000      	movs	r0, #0
 8004a46:	f7ff ff41 	bl	80048cc <update_batt_soc_label>
	update_max_cellv_label(0);
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	f7ff ff62 	bl	8004914 <update_max_cellv_label>
	update_max_cellv_id_label(0);
 8004a50:	2000      	movs	r0, #0
 8004a52:	f7ff ff71 	bl	8004938 <update_max_cellv_id_label>
	update_min_cellv_label(0);
 8004a56:	2000      	movs	r0, #0
 8004a58:	f7ff ff80 	bl	800495c <update_min_cellv_label>
	update_min_cellv_id_label(0);
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	f7ff ff8f 	bl	8004980 <update_min_cellv_id_label>
	update_max_cellt_label(0);
 8004a62:	2000      	movs	r0, #0
 8004a64:	f7ff ff9e 	bl	80049a4 <update_max_cellt_label>
	update_max_cellt_id_label(0);
 8004a68:	2000      	movs	r0, #0
 8004a6a:	f7ff ffad 	bl	80049c8 <update_max_cellt_id_label>
	update_min_cellt_label(0);
 8004a6e:	2000      	movs	r0, #0
 8004a70:	f7ff ffbc 	bl	80049ec <update_min_cellt_label>
	update_min_cellt_id_label(0);
 8004a74:	2000      	movs	r0, #0
 8004a76:	f7ff ffcb 	bl	8004a10 <update_min_cellt_id_label>
}
 8004a7a:	bf00      	nop
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <reset_page1_display>:

void reset_page1_display(void){
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	af00      	add	r7, sp, #0
	update_batt_volt_label(0);
 8004a82:	2000      	movs	r0, #0
 8004a84:	f7ff fefe 	bl	8004884 <update_batt_volt_label>
	update_batt_curr_label(0);
 8004a88:	2000      	movs	r0, #0
 8004a8a:	f7ff ff0d 	bl	80048a8 <update_batt_curr_label>
	update_batt_soc_label(0);
 8004a8e:	2000      	movs	r0, #0
 8004a90:	f7ff ff1c 	bl	80048cc <update_batt_soc_label>
}
 8004a94:	bf00      	nop
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <reset_page2_display>:

void reset_page2_display(void){
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
	update_max_cellv_label(0);
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	f7ff ff39 	bl	8004914 <update_max_cellv_label>
	update_max_cellv_id_label(0);
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	f7ff ff48 	bl	8004938 <update_max_cellv_id_label>
	update_min_cellv_label(0);
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	f7ff ff57 	bl	800495c <update_min_cellv_label>
	update_min_cellv_id_label(0);
 8004aae:	2000      	movs	r0, #0
 8004ab0:	f7ff ff66 	bl	8004980 <update_min_cellv_id_label>
}
 8004ab4:	bf00      	nop
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <reset_page3_display>:


void reset_page3_display(void){
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
	update_max_cellt_label(0);
 8004abc:	2000      	movs	r0, #0
 8004abe:	f7ff ff71 	bl	80049a4 <update_max_cellt_label>
	update_max_cellt_id_label(0);
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	f7ff ff80 	bl	80049c8 <update_max_cellt_id_label>
	update_min_cellt_label(0);
 8004ac8:	2000      	movs	r0, #0
 8004aca:	f7ff ff8f 	bl	80049ec <update_min_cellt_label>
	update_min_cellt_id_label(0);
 8004ace:	2000      	movs	r0, #0
 8004ad0:	f7ff ff9e 	bl	8004a10 <update_min_cellt_id_label>
}
 8004ad4:	bf00      	nop
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <queue_init>:
 *      Author: Hetesh S T
 */

#include "queue.h"

void queue_init(queue_t *q_instance, q_member_t queue_arr[], uint8_t max_len) {
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	71fb      	strb	r3, [r7, #7]
	q_instance->front_idx = 0;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	701a      	strb	r2, [r3, #0]
	q_instance->rear_idx = 0;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	705a      	strb	r2, [r3, #1]
	q_instance->q_len = 0;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	709a      	strb	r2, [r3, #2]
	q_instance->q_max_len = max_len;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	79fa      	ldrb	r2, [r7, #7]
 8004afc:	70da      	strb	r2, [r3, #3]
	q_instance->q_member_ptr = queue_arr;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	605a      	str	r2, [r3, #4]
}
 8004b04:	bf00      	nop
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bc80      	pop	{r7}
 8004b0c:	4770      	bx	lr

08004b0e <is_empty>:

bool is_empty(queue_t *q_instance) {
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
	return (q_instance->q_len == 0u);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	789b      	ldrb	r3, [r3, #2]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	bf0c      	ite	eq
 8004b1e:	2301      	moveq	r3, #1
 8004b20:	2300      	movne	r3, #0
 8004b22:	b2db      	uxtb	r3, r3

}
 8004b24:	4618      	mov	r0, r3
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bc80      	pop	{r7}
 8004b2c:	4770      	bx	lr

08004b2e <is_full>:

bool is_full(queue_t *q_instance) {
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
	return (q_instance->q_len == q_instance->q_max_len);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	789a      	ldrb	r2, [r3, #2]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	78db      	ldrb	r3, [r3, #3]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	bf0c      	ite	eq
 8004b42:	2301      	moveq	r3, #1
 8004b44:	2300      	movne	r3, #0
 8004b46:	b2db      	uxtb	r3, r3
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bc80      	pop	{r7}
 8004b50:	4770      	bx	lr

08004b52 <enqueue>:

void enqueue(queue_t *q_instance, uint32_t rx_can_id, uint8_t rx_data[]) {
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b086      	sub	sp, #24
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	60f8      	str	r0, [r7, #12]
 8004b5a:	60b9      	str	r1, [r7, #8]
 8004b5c:	607a      	str	r2, [r7, #4]

	if (is_full(q_instance)) {
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f7ff ffe5 	bl	8004b2e <is_full>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d128      	bne.n	8004bbc <enqueue+0x6a>
		return;
	}

	q_member_t *temp_member = q_instance->q_member_ptr + q_instance->rear_idx;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	785b      	ldrb	r3, [r3, #1]
 8004b72:	4619      	mov	r1, r3
 8004b74:	460b      	mov	r3, r1
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	440b      	add	r3, r1
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]
	temp_member->can_id = rx_can_id;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	601a      	str	r2, [r3, #0]
	(void) memcpy(temp_member->data, rx_data, 8);
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	3304      	adds	r3, #4
 8004b8a:	2208      	movs	r2, #8
 8004b8c:	6879      	ldr	r1, [r7, #4]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 f986 	bl	8004ea0 <memcpy>

	q_instance->rear_idx = (q_instance->rear_idx + 1) % q_instance->q_max_len;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	785b      	ldrb	r3, [r3, #1]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	78d2      	ldrb	r2, [r2, #3]
 8004b9e:	fb93 f1f2 	sdiv	r1, r3, r2
 8004ba2:	fb01 f202 	mul.w	r2, r1, r2
 8004ba6:	1a9b      	subs	r3, r3, r2
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	705a      	strb	r2, [r3, #1]
	q_instance->q_len++;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	789b      	ldrb	r3, [r3, #2]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	709a      	strb	r2, [r3, #2]
 8004bba:	e000      	b.n	8004bbe <enqueue+0x6c>
		return;
 8004bbc:	bf00      	nop

}
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <dequeue>:

void dequeue(queue_t *q_instance) {
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
	if (is_empty(q_instance)) {
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7ff ff9e 	bl	8004b0e <is_empty>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d122      	bne.n	8004c1e <dequeue+0x5a>
		return;
	}

	(void) memset((q_instance->q_member_ptr + q_instance->front_idx), 0,
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	4619      	mov	r1, r3
 8004be2:	460b      	mov	r3, r1
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	440b      	add	r3, r1
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	220c      	movs	r2, #12
 8004bee:	2100      	movs	r1, #0
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 f909 	bl	8004e08 <memset>
			sizeof(q_member_t));
	q_instance->front_idx = (q_instance->front_idx + 1) % q_instance->q_max_len;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	78d2      	ldrb	r2, [r2, #3]
 8004c00:	fb93 f1f2 	sdiv	r1, r3, r2
 8004c04:	fb01 f202 	mul.w	r2, r1, r2
 8004c08:	1a9b      	subs	r3, r3, r2
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	701a      	strb	r2, [r3, #0]
	q_instance->q_len--;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	789b      	ldrb	r3, [r3, #2]
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b2da      	uxtb	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	709a      	strb	r2, [r3, #2]
 8004c1c:	e000      	b.n	8004c20 <dequeue+0x5c>
		return;
 8004c1e:	bf00      	nop
}
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <peek>:

q_member_t* peek(queue_t *q_instance) {
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b082      	sub	sp, #8
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
	if (is_empty(q_instance)) {
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7ff ff6d 	bl	8004b0e <is_empty>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <peek+0x18>
		return NULL;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	e009      	b.n	8004c52 <peek+0x2c>
	}

	return (q_instance->q_member_ptr + q_instance->front_idx);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	4619      	mov	r1, r3
 8004c48:	460b      	mov	r3, r1
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	440b      	add	r3, r1
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <malloc>:
 8004c5c:	4b02      	ldr	r3, [pc, #8]	@ (8004c68 <malloc+0xc>)
 8004c5e:	4601      	mov	r1, r0
 8004c60:	6818      	ldr	r0, [r3, #0]
 8004c62:	f000 b825 	b.w	8004cb0 <_malloc_r>
 8004c66:	bf00      	nop
 8004c68:	2000000c 	.word	0x2000000c

08004c6c <sbrk_aligned>:
 8004c6c:	b570      	push	{r4, r5, r6, lr}
 8004c6e:	4e0f      	ldr	r6, [pc, #60]	@ (8004cac <sbrk_aligned+0x40>)
 8004c70:	460c      	mov	r4, r1
 8004c72:	6831      	ldr	r1, [r6, #0]
 8004c74:	4605      	mov	r5, r0
 8004c76:	b911      	cbnz	r1, 8004c7e <sbrk_aligned+0x12>
 8004c78:	f000 f8ce 	bl	8004e18 <_sbrk_r>
 8004c7c:	6030      	str	r0, [r6, #0]
 8004c7e:	4621      	mov	r1, r4
 8004c80:	4628      	mov	r0, r5
 8004c82:	f000 f8c9 	bl	8004e18 <_sbrk_r>
 8004c86:	1c43      	adds	r3, r0, #1
 8004c88:	d103      	bne.n	8004c92 <sbrk_aligned+0x26>
 8004c8a:	f04f 34ff 	mov.w	r4, #4294967295
 8004c8e:	4620      	mov	r0, r4
 8004c90:	bd70      	pop	{r4, r5, r6, pc}
 8004c92:	1cc4      	adds	r4, r0, #3
 8004c94:	f024 0403 	bic.w	r4, r4, #3
 8004c98:	42a0      	cmp	r0, r4
 8004c9a:	d0f8      	beq.n	8004c8e <sbrk_aligned+0x22>
 8004c9c:	1a21      	subs	r1, r4, r0
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	f000 f8ba 	bl	8004e18 <_sbrk_r>
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	d1f2      	bne.n	8004c8e <sbrk_aligned+0x22>
 8004ca8:	e7ef      	b.n	8004c8a <sbrk_aligned+0x1e>
 8004caa:	bf00      	nop
 8004cac:	20000440 	.word	0x20000440

08004cb0 <_malloc_r>:
 8004cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cb4:	1ccd      	adds	r5, r1, #3
 8004cb6:	f025 0503 	bic.w	r5, r5, #3
 8004cba:	3508      	adds	r5, #8
 8004cbc:	2d0c      	cmp	r5, #12
 8004cbe:	bf38      	it	cc
 8004cc0:	250c      	movcc	r5, #12
 8004cc2:	2d00      	cmp	r5, #0
 8004cc4:	4606      	mov	r6, r0
 8004cc6:	db01      	blt.n	8004ccc <_malloc_r+0x1c>
 8004cc8:	42a9      	cmp	r1, r5
 8004cca:	d904      	bls.n	8004cd6 <_malloc_r+0x26>
 8004ccc:	230c      	movs	r3, #12
 8004cce:	6033      	str	r3, [r6, #0]
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004dac <_malloc_r+0xfc>
 8004cda:	f000 f869 	bl	8004db0 <__malloc_lock>
 8004cde:	f8d8 3000 	ldr.w	r3, [r8]
 8004ce2:	461c      	mov	r4, r3
 8004ce4:	bb44      	cbnz	r4, 8004d38 <_malloc_r+0x88>
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	4630      	mov	r0, r6
 8004cea:	f7ff ffbf 	bl	8004c6c <sbrk_aligned>
 8004cee:	1c43      	adds	r3, r0, #1
 8004cf0:	4604      	mov	r4, r0
 8004cf2:	d158      	bne.n	8004da6 <_malloc_r+0xf6>
 8004cf4:	f8d8 4000 	ldr.w	r4, [r8]
 8004cf8:	4627      	mov	r7, r4
 8004cfa:	2f00      	cmp	r7, #0
 8004cfc:	d143      	bne.n	8004d86 <_malloc_r+0xd6>
 8004cfe:	2c00      	cmp	r4, #0
 8004d00:	d04b      	beq.n	8004d9a <_malloc_r+0xea>
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	4639      	mov	r1, r7
 8004d06:	4630      	mov	r0, r6
 8004d08:	eb04 0903 	add.w	r9, r4, r3
 8004d0c:	f000 f884 	bl	8004e18 <_sbrk_r>
 8004d10:	4581      	cmp	r9, r0
 8004d12:	d142      	bne.n	8004d9a <_malloc_r+0xea>
 8004d14:	6821      	ldr	r1, [r4, #0]
 8004d16:	4630      	mov	r0, r6
 8004d18:	1a6d      	subs	r5, r5, r1
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	f7ff ffa6 	bl	8004c6c <sbrk_aligned>
 8004d20:	3001      	adds	r0, #1
 8004d22:	d03a      	beq.n	8004d9a <_malloc_r+0xea>
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	442b      	add	r3, r5
 8004d28:	6023      	str	r3, [r4, #0]
 8004d2a:	f8d8 3000 	ldr.w	r3, [r8]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	bb62      	cbnz	r2, 8004d8c <_malloc_r+0xdc>
 8004d32:	f8c8 7000 	str.w	r7, [r8]
 8004d36:	e00f      	b.n	8004d58 <_malloc_r+0xa8>
 8004d38:	6822      	ldr	r2, [r4, #0]
 8004d3a:	1b52      	subs	r2, r2, r5
 8004d3c:	d420      	bmi.n	8004d80 <_malloc_r+0xd0>
 8004d3e:	2a0b      	cmp	r2, #11
 8004d40:	d917      	bls.n	8004d72 <_malloc_r+0xc2>
 8004d42:	1961      	adds	r1, r4, r5
 8004d44:	42a3      	cmp	r3, r4
 8004d46:	6025      	str	r5, [r4, #0]
 8004d48:	bf18      	it	ne
 8004d4a:	6059      	strne	r1, [r3, #4]
 8004d4c:	6863      	ldr	r3, [r4, #4]
 8004d4e:	bf08      	it	eq
 8004d50:	f8c8 1000 	streq.w	r1, [r8]
 8004d54:	5162      	str	r2, [r4, r5]
 8004d56:	604b      	str	r3, [r1, #4]
 8004d58:	4630      	mov	r0, r6
 8004d5a:	f000 f82f 	bl	8004dbc <__malloc_unlock>
 8004d5e:	f104 000b 	add.w	r0, r4, #11
 8004d62:	1d23      	adds	r3, r4, #4
 8004d64:	f020 0007 	bic.w	r0, r0, #7
 8004d68:	1ac2      	subs	r2, r0, r3
 8004d6a:	bf1c      	itt	ne
 8004d6c:	1a1b      	subne	r3, r3, r0
 8004d6e:	50a3      	strne	r3, [r4, r2]
 8004d70:	e7af      	b.n	8004cd2 <_malloc_r+0x22>
 8004d72:	6862      	ldr	r2, [r4, #4]
 8004d74:	42a3      	cmp	r3, r4
 8004d76:	bf0c      	ite	eq
 8004d78:	f8c8 2000 	streq.w	r2, [r8]
 8004d7c:	605a      	strne	r2, [r3, #4]
 8004d7e:	e7eb      	b.n	8004d58 <_malloc_r+0xa8>
 8004d80:	4623      	mov	r3, r4
 8004d82:	6864      	ldr	r4, [r4, #4]
 8004d84:	e7ae      	b.n	8004ce4 <_malloc_r+0x34>
 8004d86:	463c      	mov	r4, r7
 8004d88:	687f      	ldr	r7, [r7, #4]
 8004d8a:	e7b6      	b.n	8004cfa <_malloc_r+0x4a>
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	42a3      	cmp	r3, r4
 8004d92:	d1fb      	bne.n	8004d8c <_malloc_r+0xdc>
 8004d94:	2300      	movs	r3, #0
 8004d96:	6053      	str	r3, [r2, #4]
 8004d98:	e7de      	b.n	8004d58 <_malloc_r+0xa8>
 8004d9a:	230c      	movs	r3, #12
 8004d9c:	4630      	mov	r0, r6
 8004d9e:	6033      	str	r3, [r6, #0]
 8004da0:	f000 f80c 	bl	8004dbc <__malloc_unlock>
 8004da4:	e794      	b.n	8004cd0 <_malloc_r+0x20>
 8004da6:	6005      	str	r5, [r0, #0]
 8004da8:	e7d6      	b.n	8004d58 <_malloc_r+0xa8>
 8004daa:	bf00      	nop
 8004dac:	20000444 	.word	0x20000444

08004db0 <__malloc_lock>:
 8004db0:	4801      	ldr	r0, [pc, #4]	@ (8004db8 <__malloc_lock+0x8>)
 8004db2:	f000 b86b 	b.w	8004e8c <__retarget_lock_acquire_recursive>
 8004db6:	bf00      	nop
 8004db8:	20000584 	.word	0x20000584

08004dbc <__malloc_unlock>:
 8004dbc:	4801      	ldr	r0, [pc, #4]	@ (8004dc4 <__malloc_unlock+0x8>)
 8004dbe:	f000 b866 	b.w	8004e8e <__retarget_lock_release_recursive>
 8004dc2:	bf00      	nop
 8004dc4:	20000584 	.word	0x20000584

08004dc8 <siprintf>:
 8004dc8:	b40e      	push	{r1, r2, r3}
 8004dca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004dce:	b500      	push	{lr}
 8004dd0:	b09c      	sub	sp, #112	@ 0x70
 8004dd2:	ab1d      	add	r3, sp, #116	@ 0x74
 8004dd4:	9002      	str	r0, [sp, #8]
 8004dd6:	9006      	str	r0, [sp, #24]
 8004dd8:	9107      	str	r1, [sp, #28]
 8004dda:	9104      	str	r1, [sp, #16]
 8004ddc:	4808      	ldr	r0, [pc, #32]	@ (8004e00 <siprintf+0x38>)
 8004dde:	4909      	ldr	r1, [pc, #36]	@ (8004e04 <siprintf+0x3c>)
 8004de0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004de4:	9105      	str	r1, [sp, #20]
 8004de6:	6800      	ldr	r0, [r0, #0]
 8004de8:	a902      	add	r1, sp, #8
 8004dea:	9301      	str	r3, [sp, #4]
 8004dec:	f000 f90a 	bl	8005004 <_svfiprintf_r>
 8004df0:	2200      	movs	r2, #0
 8004df2:	9b02      	ldr	r3, [sp, #8]
 8004df4:	701a      	strb	r2, [r3, #0]
 8004df6:	b01c      	add	sp, #112	@ 0x70
 8004df8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dfc:	b003      	add	sp, #12
 8004dfe:	4770      	bx	lr
 8004e00:	2000000c 	.word	0x2000000c
 8004e04:	ffff0208 	.word	0xffff0208

08004e08 <memset>:
 8004e08:	4603      	mov	r3, r0
 8004e0a:	4402      	add	r2, r0
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d100      	bne.n	8004e12 <memset+0xa>
 8004e10:	4770      	bx	lr
 8004e12:	f803 1b01 	strb.w	r1, [r3], #1
 8004e16:	e7f9      	b.n	8004e0c <memset+0x4>

08004e18 <_sbrk_r>:
 8004e18:	b538      	push	{r3, r4, r5, lr}
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	4d05      	ldr	r5, [pc, #20]	@ (8004e34 <_sbrk_r+0x1c>)
 8004e1e:	4604      	mov	r4, r0
 8004e20:	4608      	mov	r0, r1
 8004e22:	602b      	str	r3, [r5, #0]
 8004e24:	f7fb ff16 	bl	8000c54 <_sbrk>
 8004e28:	1c43      	adds	r3, r0, #1
 8004e2a:	d102      	bne.n	8004e32 <_sbrk_r+0x1a>
 8004e2c:	682b      	ldr	r3, [r5, #0]
 8004e2e:	b103      	cbz	r3, 8004e32 <_sbrk_r+0x1a>
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	bd38      	pop	{r3, r4, r5, pc}
 8004e34:	20000580 	.word	0x20000580

08004e38 <__errno>:
 8004e38:	4b01      	ldr	r3, [pc, #4]	@ (8004e40 <__errno+0x8>)
 8004e3a:	6818      	ldr	r0, [r3, #0]
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	2000000c 	.word	0x2000000c

08004e44 <__libc_init_array>:
 8004e44:	b570      	push	{r4, r5, r6, lr}
 8004e46:	2600      	movs	r6, #0
 8004e48:	4d0c      	ldr	r5, [pc, #48]	@ (8004e7c <__libc_init_array+0x38>)
 8004e4a:	4c0d      	ldr	r4, [pc, #52]	@ (8004e80 <__libc_init_array+0x3c>)
 8004e4c:	1b64      	subs	r4, r4, r5
 8004e4e:	10a4      	asrs	r4, r4, #2
 8004e50:	42a6      	cmp	r6, r4
 8004e52:	d109      	bne.n	8004e68 <__libc_init_array+0x24>
 8004e54:	f000 fbc2 	bl	80055dc <_init>
 8004e58:	2600      	movs	r6, #0
 8004e5a:	4d0a      	ldr	r5, [pc, #40]	@ (8004e84 <__libc_init_array+0x40>)
 8004e5c:	4c0a      	ldr	r4, [pc, #40]	@ (8004e88 <__libc_init_array+0x44>)
 8004e5e:	1b64      	subs	r4, r4, r5
 8004e60:	10a4      	asrs	r4, r4, #2
 8004e62:	42a6      	cmp	r6, r4
 8004e64:	d105      	bne.n	8004e72 <__libc_init_array+0x2e>
 8004e66:	bd70      	pop	{r4, r5, r6, pc}
 8004e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e6c:	4798      	blx	r3
 8004e6e:	3601      	adds	r6, #1
 8004e70:	e7ee      	b.n	8004e50 <__libc_init_array+0xc>
 8004e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e76:	4798      	blx	r3
 8004e78:	3601      	adds	r6, #1
 8004e7a:	e7f2      	b.n	8004e62 <__libc_init_array+0x1e>
 8004e7c:	08005778 	.word	0x08005778
 8004e80:	08005778 	.word	0x08005778
 8004e84:	08005778 	.word	0x08005778
 8004e88:	0800577c 	.word	0x0800577c

08004e8c <__retarget_lock_acquire_recursive>:
 8004e8c:	4770      	bx	lr

08004e8e <__retarget_lock_release_recursive>:
 8004e8e:	4770      	bx	lr

08004e90 <strcpy>:
 8004e90:	4603      	mov	r3, r0
 8004e92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e96:	f803 2b01 	strb.w	r2, [r3], #1
 8004e9a:	2a00      	cmp	r2, #0
 8004e9c:	d1f9      	bne.n	8004e92 <strcpy+0x2>
 8004e9e:	4770      	bx	lr

08004ea0 <memcpy>:
 8004ea0:	440a      	add	r2, r1
 8004ea2:	4291      	cmp	r1, r2
 8004ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ea8:	d100      	bne.n	8004eac <memcpy+0xc>
 8004eaa:	4770      	bx	lr
 8004eac:	b510      	push	{r4, lr}
 8004eae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004eb2:	4291      	cmp	r1, r2
 8004eb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004eb8:	d1f9      	bne.n	8004eae <memcpy+0xe>
 8004eba:	bd10      	pop	{r4, pc}

08004ebc <_free_r>:
 8004ebc:	b538      	push	{r3, r4, r5, lr}
 8004ebe:	4605      	mov	r5, r0
 8004ec0:	2900      	cmp	r1, #0
 8004ec2:	d040      	beq.n	8004f46 <_free_r+0x8a>
 8004ec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ec8:	1f0c      	subs	r4, r1, #4
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	bfb8      	it	lt
 8004ece:	18e4      	addlt	r4, r4, r3
 8004ed0:	f7ff ff6e 	bl	8004db0 <__malloc_lock>
 8004ed4:	4a1c      	ldr	r2, [pc, #112]	@ (8004f48 <_free_r+0x8c>)
 8004ed6:	6813      	ldr	r3, [r2, #0]
 8004ed8:	b933      	cbnz	r3, 8004ee8 <_free_r+0x2c>
 8004eda:	6063      	str	r3, [r4, #4]
 8004edc:	6014      	str	r4, [r2, #0]
 8004ede:	4628      	mov	r0, r5
 8004ee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ee4:	f7ff bf6a 	b.w	8004dbc <__malloc_unlock>
 8004ee8:	42a3      	cmp	r3, r4
 8004eea:	d908      	bls.n	8004efe <_free_r+0x42>
 8004eec:	6820      	ldr	r0, [r4, #0]
 8004eee:	1821      	adds	r1, r4, r0
 8004ef0:	428b      	cmp	r3, r1
 8004ef2:	bf01      	itttt	eq
 8004ef4:	6819      	ldreq	r1, [r3, #0]
 8004ef6:	685b      	ldreq	r3, [r3, #4]
 8004ef8:	1809      	addeq	r1, r1, r0
 8004efa:	6021      	streq	r1, [r4, #0]
 8004efc:	e7ed      	b.n	8004eda <_free_r+0x1e>
 8004efe:	461a      	mov	r2, r3
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	b10b      	cbz	r3, 8004f08 <_free_r+0x4c>
 8004f04:	42a3      	cmp	r3, r4
 8004f06:	d9fa      	bls.n	8004efe <_free_r+0x42>
 8004f08:	6811      	ldr	r1, [r2, #0]
 8004f0a:	1850      	adds	r0, r2, r1
 8004f0c:	42a0      	cmp	r0, r4
 8004f0e:	d10b      	bne.n	8004f28 <_free_r+0x6c>
 8004f10:	6820      	ldr	r0, [r4, #0]
 8004f12:	4401      	add	r1, r0
 8004f14:	1850      	adds	r0, r2, r1
 8004f16:	4283      	cmp	r3, r0
 8004f18:	6011      	str	r1, [r2, #0]
 8004f1a:	d1e0      	bne.n	8004ede <_free_r+0x22>
 8004f1c:	6818      	ldr	r0, [r3, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	4408      	add	r0, r1
 8004f22:	6010      	str	r0, [r2, #0]
 8004f24:	6053      	str	r3, [r2, #4]
 8004f26:	e7da      	b.n	8004ede <_free_r+0x22>
 8004f28:	d902      	bls.n	8004f30 <_free_r+0x74>
 8004f2a:	230c      	movs	r3, #12
 8004f2c:	602b      	str	r3, [r5, #0]
 8004f2e:	e7d6      	b.n	8004ede <_free_r+0x22>
 8004f30:	6820      	ldr	r0, [r4, #0]
 8004f32:	1821      	adds	r1, r4, r0
 8004f34:	428b      	cmp	r3, r1
 8004f36:	bf01      	itttt	eq
 8004f38:	6819      	ldreq	r1, [r3, #0]
 8004f3a:	685b      	ldreq	r3, [r3, #4]
 8004f3c:	1809      	addeq	r1, r1, r0
 8004f3e:	6021      	streq	r1, [r4, #0]
 8004f40:	6063      	str	r3, [r4, #4]
 8004f42:	6054      	str	r4, [r2, #4]
 8004f44:	e7cb      	b.n	8004ede <_free_r+0x22>
 8004f46:	bd38      	pop	{r3, r4, r5, pc}
 8004f48:	20000444 	.word	0x20000444

08004f4c <__ssputs_r>:
 8004f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f50:	461f      	mov	r7, r3
 8004f52:	688e      	ldr	r6, [r1, #8]
 8004f54:	4682      	mov	sl, r0
 8004f56:	42be      	cmp	r6, r7
 8004f58:	460c      	mov	r4, r1
 8004f5a:	4690      	mov	r8, r2
 8004f5c:	680b      	ldr	r3, [r1, #0]
 8004f5e:	d82d      	bhi.n	8004fbc <__ssputs_r+0x70>
 8004f60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004f68:	d026      	beq.n	8004fb8 <__ssputs_r+0x6c>
 8004f6a:	6965      	ldr	r5, [r4, #20]
 8004f6c:	6909      	ldr	r1, [r1, #16]
 8004f6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f72:	eba3 0901 	sub.w	r9, r3, r1
 8004f76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f7a:	1c7b      	adds	r3, r7, #1
 8004f7c:	444b      	add	r3, r9
 8004f7e:	106d      	asrs	r5, r5, #1
 8004f80:	429d      	cmp	r5, r3
 8004f82:	bf38      	it	cc
 8004f84:	461d      	movcc	r5, r3
 8004f86:	0553      	lsls	r3, r2, #21
 8004f88:	d527      	bpl.n	8004fda <__ssputs_r+0x8e>
 8004f8a:	4629      	mov	r1, r5
 8004f8c:	f7ff fe90 	bl	8004cb0 <_malloc_r>
 8004f90:	4606      	mov	r6, r0
 8004f92:	b360      	cbz	r0, 8004fee <__ssputs_r+0xa2>
 8004f94:	464a      	mov	r2, r9
 8004f96:	6921      	ldr	r1, [r4, #16]
 8004f98:	f7ff ff82 	bl	8004ea0 <memcpy>
 8004f9c:	89a3      	ldrh	r3, [r4, #12]
 8004f9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004fa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fa6:	81a3      	strh	r3, [r4, #12]
 8004fa8:	6126      	str	r6, [r4, #16]
 8004faa:	444e      	add	r6, r9
 8004fac:	6026      	str	r6, [r4, #0]
 8004fae:	463e      	mov	r6, r7
 8004fb0:	6165      	str	r5, [r4, #20]
 8004fb2:	eba5 0509 	sub.w	r5, r5, r9
 8004fb6:	60a5      	str	r5, [r4, #8]
 8004fb8:	42be      	cmp	r6, r7
 8004fba:	d900      	bls.n	8004fbe <__ssputs_r+0x72>
 8004fbc:	463e      	mov	r6, r7
 8004fbe:	4632      	mov	r2, r6
 8004fc0:	4641      	mov	r1, r8
 8004fc2:	6820      	ldr	r0, [r4, #0]
 8004fc4:	f000 faac 	bl	8005520 <memmove>
 8004fc8:	2000      	movs	r0, #0
 8004fca:	68a3      	ldr	r3, [r4, #8]
 8004fcc:	1b9b      	subs	r3, r3, r6
 8004fce:	60a3      	str	r3, [r4, #8]
 8004fd0:	6823      	ldr	r3, [r4, #0]
 8004fd2:	4433      	add	r3, r6
 8004fd4:	6023      	str	r3, [r4, #0]
 8004fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fda:	462a      	mov	r2, r5
 8004fdc:	f000 fac8 	bl	8005570 <_realloc_r>
 8004fe0:	4606      	mov	r6, r0
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	d1e0      	bne.n	8004fa8 <__ssputs_r+0x5c>
 8004fe6:	4650      	mov	r0, sl
 8004fe8:	6921      	ldr	r1, [r4, #16]
 8004fea:	f7ff ff67 	bl	8004ebc <_free_r>
 8004fee:	230c      	movs	r3, #12
 8004ff0:	f8ca 3000 	str.w	r3, [sl]
 8004ff4:	89a3      	ldrh	r3, [r4, #12]
 8004ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ffe:	81a3      	strh	r3, [r4, #12]
 8005000:	e7e9      	b.n	8004fd6 <__ssputs_r+0x8a>
	...

08005004 <_svfiprintf_r>:
 8005004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005008:	4698      	mov	r8, r3
 800500a:	898b      	ldrh	r3, [r1, #12]
 800500c:	4607      	mov	r7, r0
 800500e:	061b      	lsls	r3, r3, #24
 8005010:	460d      	mov	r5, r1
 8005012:	4614      	mov	r4, r2
 8005014:	b09d      	sub	sp, #116	@ 0x74
 8005016:	d510      	bpl.n	800503a <_svfiprintf_r+0x36>
 8005018:	690b      	ldr	r3, [r1, #16]
 800501a:	b973      	cbnz	r3, 800503a <_svfiprintf_r+0x36>
 800501c:	2140      	movs	r1, #64	@ 0x40
 800501e:	f7ff fe47 	bl	8004cb0 <_malloc_r>
 8005022:	6028      	str	r0, [r5, #0]
 8005024:	6128      	str	r0, [r5, #16]
 8005026:	b930      	cbnz	r0, 8005036 <_svfiprintf_r+0x32>
 8005028:	230c      	movs	r3, #12
 800502a:	603b      	str	r3, [r7, #0]
 800502c:	f04f 30ff 	mov.w	r0, #4294967295
 8005030:	b01d      	add	sp, #116	@ 0x74
 8005032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005036:	2340      	movs	r3, #64	@ 0x40
 8005038:	616b      	str	r3, [r5, #20]
 800503a:	2300      	movs	r3, #0
 800503c:	9309      	str	r3, [sp, #36]	@ 0x24
 800503e:	2320      	movs	r3, #32
 8005040:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005044:	2330      	movs	r3, #48	@ 0x30
 8005046:	f04f 0901 	mov.w	r9, #1
 800504a:	f8cd 800c 	str.w	r8, [sp, #12]
 800504e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80051e8 <_svfiprintf_r+0x1e4>
 8005052:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005056:	4623      	mov	r3, r4
 8005058:	469a      	mov	sl, r3
 800505a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800505e:	b10a      	cbz	r2, 8005064 <_svfiprintf_r+0x60>
 8005060:	2a25      	cmp	r2, #37	@ 0x25
 8005062:	d1f9      	bne.n	8005058 <_svfiprintf_r+0x54>
 8005064:	ebba 0b04 	subs.w	fp, sl, r4
 8005068:	d00b      	beq.n	8005082 <_svfiprintf_r+0x7e>
 800506a:	465b      	mov	r3, fp
 800506c:	4622      	mov	r2, r4
 800506e:	4629      	mov	r1, r5
 8005070:	4638      	mov	r0, r7
 8005072:	f7ff ff6b 	bl	8004f4c <__ssputs_r>
 8005076:	3001      	adds	r0, #1
 8005078:	f000 80a7 	beq.w	80051ca <_svfiprintf_r+0x1c6>
 800507c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800507e:	445a      	add	r2, fp
 8005080:	9209      	str	r2, [sp, #36]	@ 0x24
 8005082:	f89a 3000 	ldrb.w	r3, [sl]
 8005086:	2b00      	cmp	r3, #0
 8005088:	f000 809f 	beq.w	80051ca <_svfiprintf_r+0x1c6>
 800508c:	2300      	movs	r3, #0
 800508e:	f04f 32ff 	mov.w	r2, #4294967295
 8005092:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005096:	f10a 0a01 	add.w	sl, sl, #1
 800509a:	9304      	str	r3, [sp, #16]
 800509c:	9307      	str	r3, [sp, #28]
 800509e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80050a4:	4654      	mov	r4, sl
 80050a6:	2205      	movs	r2, #5
 80050a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ac:	484e      	ldr	r0, [pc, #312]	@ (80051e8 <_svfiprintf_r+0x1e4>)
 80050ae:	f000 fa51 	bl	8005554 <memchr>
 80050b2:	9a04      	ldr	r2, [sp, #16]
 80050b4:	b9d8      	cbnz	r0, 80050ee <_svfiprintf_r+0xea>
 80050b6:	06d0      	lsls	r0, r2, #27
 80050b8:	bf44      	itt	mi
 80050ba:	2320      	movmi	r3, #32
 80050bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050c0:	0711      	lsls	r1, r2, #28
 80050c2:	bf44      	itt	mi
 80050c4:	232b      	movmi	r3, #43	@ 0x2b
 80050c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050ca:	f89a 3000 	ldrb.w	r3, [sl]
 80050ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80050d0:	d015      	beq.n	80050fe <_svfiprintf_r+0xfa>
 80050d2:	4654      	mov	r4, sl
 80050d4:	2000      	movs	r0, #0
 80050d6:	f04f 0c0a 	mov.w	ip, #10
 80050da:	9a07      	ldr	r2, [sp, #28]
 80050dc:	4621      	mov	r1, r4
 80050de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050e2:	3b30      	subs	r3, #48	@ 0x30
 80050e4:	2b09      	cmp	r3, #9
 80050e6:	d94b      	bls.n	8005180 <_svfiprintf_r+0x17c>
 80050e8:	b1b0      	cbz	r0, 8005118 <_svfiprintf_r+0x114>
 80050ea:	9207      	str	r2, [sp, #28]
 80050ec:	e014      	b.n	8005118 <_svfiprintf_r+0x114>
 80050ee:	eba0 0308 	sub.w	r3, r0, r8
 80050f2:	fa09 f303 	lsl.w	r3, r9, r3
 80050f6:	4313      	orrs	r3, r2
 80050f8:	46a2      	mov	sl, r4
 80050fa:	9304      	str	r3, [sp, #16]
 80050fc:	e7d2      	b.n	80050a4 <_svfiprintf_r+0xa0>
 80050fe:	9b03      	ldr	r3, [sp, #12]
 8005100:	1d19      	adds	r1, r3, #4
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	9103      	str	r1, [sp, #12]
 8005106:	2b00      	cmp	r3, #0
 8005108:	bfbb      	ittet	lt
 800510a:	425b      	neglt	r3, r3
 800510c:	f042 0202 	orrlt.w	r2, r2, #2
 8005110:	9307      	strge	r3, [sp, #28]
 8005112:	9307      	strlt	r3, [sp, #28]
 8005114:	bfb8      	it	lt
 8005116:	9204      	strlt	r2, [sp, #16]
 8005118:	7823      	ldrb	r3, [r4, #0]
 800511a:	2b2e      	cmp	r3, #46	@ 0x2e
 800511c:	d10a      	bne.n	8005134 <_svfiprintf_r+0x130>
 800511e:	7863      	ldrb	r3, [r4, #1]
 8005120:	2b2a      	cmp	r3, #42	@ 0x2a
 8005122:	d132      	bne.n	800518a <_svfiprintf_r+0x186>
 8005124:	9b03      	ldr	r3, [sp, #12]
 8005126:	3402      	adds	r4, #2
 8005128:	1d1a      	adds	r2, r3, #4
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	9203      	str	r2, [sp, #12]
 800512e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005132:	9305      	str	r3, [sp, #20]
 8005134:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80051ec <_svfiprintf_r+0x1e8>
 8005138:	2203      	movs	r2, #3
 800513a:	4650      	mov	r0, sl
 800513c:	7821      	ldrb	r1, [r4, #0]
 800513e:	f000 fa09 	bl	8005554 <memchr>
 8005142:	b138      	cbz	r0, 8005154 <_svfiprintf_r+0x150>
 8005144:	2240      	movs	r2, #64	@ 0x40
 8005146:	9b04      	ldr	r3, [sp, #16]
 8005148:	eba0 000a 	sub.w	r0, r0, sl
 800514c:	4082      	lsls	r2, r0
 800514e:	4313      	orrs	r3, r2
 8005150:	3401      	adds	r4, #1
 8005152:	9304      	str	r3, [sp, #16]
 8005154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005158:	2206      	movs	r2, #6
 800515a:	4825      	ldr	r0, [pc, #148]	@ (80051f0 <_svfiprintf_r+0x1ec>)
 800515c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005160:	f000 f9f8 	bl	8005554 <memchr>
 8005164:	2800      	cmp	r0, #0
 8005166:	d036      	beq.n	80051d6 <_svfiprintf_r+0x1d2>
 8005168:	4b22      	ldr	r3, [pc, #136]	@ (80051f4 <_svfiprintf_r+0x1f0>)
 800516a:	bb1b      	cbnz	r3, 80051b4 <_svfiprintf_r+0x1b0>
 800516c:	9b03      	ldr	r3, [sp, #12]
 800516e:	3307      	adds	r3, #7
 8005170:	f023 0307 	bic.w	r3, r3, #7
 8005174:	3308      	adds	r3, #8
 8005176:	9303      	str	r3, [sp, #12]
 8005178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800517a:	4433      	add	r3, r6
 800517c:	9309      	str	r3, [sp, #36]	@ 0x24
 800517e:	e76a      	b.n	8005056 <_svfiprintf_r+0x52>
 8005180:	460c      	mov	r4, r1
 8005182:	2001      	movs	r0, #1
 8005184:	fb0c 3202 	mla	r2, ip, r2, r3
 8005188:	e7a8      	b.n	80050dc <_svfiprintf_r+0xd8>
 800518a:	2300      	movs	r3, #0
 800518c:	f04f 0c0a 	mov.w	ip, #10
 8005190:	4619      	mov	r1, r3
 8005192:	3401      	adds	r4, #1
 8005194:	9305      	str	r3, [sp, #20]
 8005196:	4620      	mov	r0, r4
 8005198:	f810 2b01 	ldrb.w	r2, [r0], #1
 800519c:	3a30      	subs	r2, #48	@ 0x30
 800519e:	2a09      	cmp	r2, #9
 80051a0:	d903      	bls.n	80051aa <_svfiprintf_r+0x1a6>
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0c6      	beq.n	8005134 <_svfiprintf_r+0x130>
 80051a6:	9105      	str	r1, [sp, #20]
 80051a8:	e7c4      	b.n	8005134 <_svfiprintf_r+0x130>
 80051aa:	4604      	mov	r4, r0
 80051ac:	2301      	movs	r3, #1
 80051ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80051b2:	e7f0      	b.n	8005196 <_svfiprintf_r+0x192>
 80051b4:	ab03      	add	r3, sp, #12
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	462a      	mov	r2, r5
 80051ba:	4638      	mov	r0, r7
 80051bc:	4b0e      	ldr	r3, [pc, #56]	@ (80051f8 <_svfiprintf_r+0x1f4>)
 80051be:	a904      	add	r1, sp, #16
 80051c0:	f3af 8000 	nop.w
 80051c4:	1c42      	adds	r2, r0, #1
 80051c6:	4606      	mov	r6, r0
 80051c8:	d1d6      	bne.n	8005178 <_svfiprintf_r+0x174>
 80051ca:	89ab      	ldrh	r3, [r5, #12]
 80051cc:	065b      	lsls	r3, r3, #25
 80051ce:	f53f af2d 	bmi.w	800502c <_svfiprintf_r+0x28>
 80051d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80051d4:	e72c      	b.n	8005030 <_svfiprintf_r+0x2c>
 80051d6:	ab03      	add	r3, sp, #12
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	462a      	mov	r2, r5
 80051dc:	4638      	mov	r0, r7
 80051de:	4b06      	ldr	r3, [pc, #24]	@ (80051f8 <_svfiprintf_r+0x1f4>)
 80051e0:	a904      	add	r1, sp, #16
 80051e2:	f000 f87d 	bl	80052e0 <_printf_i>
 80051e6:	e7ed      	b.n	80051c4 <_svfiprintf_r+0x1c0>
 80051e8:	0800573a 	.word	0x0800573a
 80051ec:	08005740 	.word	0x08005740
 80051f0:	08005744 	.word	0x08005744
 80051f4:	00000000 	.word	0x00000000
 80051f8:	08004f4d 	.word	0x08004f4d

080051fc <_printf_common>:
 80051fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005200:	4616      	mov	r6, r2
 8005202:	4698      	mov	r8, r3
 8005204:	688a      	ldr	r2, [r1, #8]
 8005206:	690b      	ldr	r3, [r1, #16]
 8005208:	4607      	mov	r7, r0
 800520a:	4293      	cmp	r3, r2
 800520c:	bfb8      	it	lt
 800520e:	4613      	movlt	r3, r2
 8005210:	6033      	str	r3, [r6, #0]
 8005212:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005216:	460c      	mov	r4, r1
 8005218:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800521c:	b10a      	cbz	r2, 8005222 <_printf_common+0x26>
 800521e:	3301      	adds	r3, #1
 8005220:	6033      	str	r3, [r6, #0]
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	0699      	lsls	r1, r3, #26
 8005226:	bf42      	ittt	mi
 8005228:	6833      	ldrmi	r3, [r6, #0]
 800522a:	3302      	addmi	r3, #2
 800522c:	6033      	strmi	r3, [r6, #0]
 800522e:	6825      	ldr	r5, [r4, #0]
 8005230:	f015 0506 	ands.w	r5, r5, #6
 8005234:	d106      	bne.n	8005244 <_printf_common+0x48>
 8005236:	f104 0a19 	add.w	sl, r4, #25
 800523a:	68e3      	ldr	r3, [r4, #12]
 800523c:	6832      	ldr	r2, [r6, #0]
 800523e:	1a9b      	subs	r3, r3, r2
 8005240:	42ab      	cmp	r3, r5
 8005242:	dc2b      	bgt.n	800529c <_printf_common+0xa0>
 8005244:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005248:	6822      	ldr	r2, [r4, #0]
 800524a:	3b00      	subs	r3, #0
 800524c:	bf18      	it	ne
 800524e:	2301      	movne	r3, #1
 8005250:	0692      	lsls	r2, r2, #26
 8005252:	d430      	bmi.n	80052b6 <_printf_common+0xba>
 8005254:	4641      	mov	r1, r8
 8005256:	4638      	mov	r0, r7
 8005258:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800525c:	47c8      	blx	r9
 800525e:	3001      	adds	r0, #1
 8005260:	d023      	beq.n	80052aa <_printf_common+0xae>
 8005262:	6823      	ldr	r3, [r4, #0]
 8005264:	6922      	ldr	r2, [r4, #16]
 8005266:	f003 0306 	and.w	r3, r3, #6
 800526a:	2b04      	cmp	r3, #4
 800526c:	bf14      	ite	ne
 800526e:	2500      	movne	r5, #0
 8005270:	6833      	ldreq	r3, [r6, #0]
 8005272:	f04f 0600 	mov.w	r6, #0
 8005276:	bf08      	it	eq
 8005278:	68e5      	ldreq	r5, [r4, #12]
 800527a:	f104 041a 	add.w	r4, r4, #26
 800527e:	bf08      	it	eq
 8005280:	1aed      	subeq	r5, r5, r3
 8005282:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005286:	bf08      	it	eq
 8005288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800528c:	4293      	cmp	r3, r2
 800528e:	bfc4      	itt	gt
 8005290:	1a9b      	subgt	r3, r3, r2
 8005292:	18ed      	addgt	r5, r5, r3
 8005294:	42b5      	cmp	r5, r6
 8005296:	d11a      	bne.n	80052ce <_printf_common+0xd2>
 8005298:	2000      	movs	r0, #0
 800529a:	e008      	b.n	80052ae <_printf_common+0xb2>
 800529c:	2301      	movs	r3, #1
 800529e:	4652      	mov	r2, sl
 80052a0:	4641      	mov	r1, r8
 80052a2:	4638      	mov	r0, r7
 80052a4:	47c8      	blx	r9
 80052a6:	3001      	adds	r0, #1
 80052a8:	d103      	bne.n	80052b2 <_printf_common+0xb6>
 80052aa:	f04f 30ff 	mov.w	r0, #4294967295
 80052ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b2:	3501      	adds	r5, #1
 80052b4:	e7c1      	b.n	800523a <_printf_common+0x3e>
 80052b6:	2030      	movs	r0, #48	@ 0x30
 80052b8:	18e1      	adds	r1, r4, r3
 80052ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80052c4:	4422      	add	r2, r4
 80052c6:	3302      	adds	r3, #2
 80052c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80052cc:	e7c2      	b.n	8005254 <_printf_common+0x58>
 80052ce:	2301      	movs	r3, #1
 80052d0:	4622      	mov	r2, r4
 80052d2:	4641      	mov	r1, r8
 80052d4:	4638      	mov	r0, r7
 80052d6:	47c8      	blx	r9
 80052d8:	3001      	adds	r0, #1
 80052da:	d0e6      	beq.n	80052aa <_printf_common+0xae>
 80052dc:	3601      	adds	r6, #1
 80052de:	e7d9      	b.n	8005294 <_printf_common+0x98>

080052e0 <_printf_i>:
 80052e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052e4:	7e0f      	ldrb	r7, [r1, #24]
 80052e6:	4691      	mov	r9, r2
 80052e8:	2f78      	cmp	r7, #120	@ 0x78
 80052ea:	4680      	mov	r8, r0
 80052ec:	460c      	mov	r4, r1
 80052ee:	469a      	mov	sl, r3
 80052f0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80052f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80052f6:	d807      	bhi.n	8005308 <_printf_i+0x28>
 80052f8:	2f62      	cmp	r7, #98	@ 0x62
 80052fa:	d80a      	bhi.n	8005312 <_printf_i+0x32>
 80052fc:	2f00      	cmp	r7, #0
 80052fe:	f000 80d3 	beq.w	80054a8 <_printf_i+0x1c8>
 8005302:	2f58      	cmp	r7, #88	@ 0x58
 8005304:	f000 80ba 	beq.w	800547c <_printf_i+0x19c>
 8005308:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800530c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005310:	e03a      	b.n	8005388 <_printf_i+0xa8>
 8005312:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005316:	2b15      	cmp	r3, #21
 8005318:	d8f6      	bhi.n	8005308 <_printf_i+0x28>
 800531a:	a101      	add	r1, pc, #4	@ (adr r1, 8005320 <_printf_i+0x40>)
 800531c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005320:	08005379 	.word	0x08005379
 8005324:	0800538d 	.word	0x0800538d
 8005328:	08005309 	.word	0x08005309
 800532c:	08005309 	.word	0x08005309
 8005330:	08005309 	.word	0x08005309
 8005334:	08005309 	.word	0x08005309
 8005338:	0800538d 	.word	0x0800538d
 800533c:	08005309 	.word	0x08005309
 8005340:	08005309 	.word	0x08005309
 8005344:	08005309 	.word	0x08005309
 8005348:	08005309 	.word	0x08005309
 800534c:	0800548f 	.word	0x0800548f
 8005350:	080053b7 	.word	0x080053b7
 8005354:	08005449 	.word	0x08005449
 8005358:	08005309 	.word	0x08005309
 800535c:	08005309 	.word	0x08005309
 8005360:	080054b1 	.word	0x080054b1
 8005364:	08005309 	.word	0x08005309
 8005368:	080053b7 	.word	0x080053b7
 800536c:	08005309 	.word	0x08005309
 8005370:	08005309 	.word	0x08005309
 8005374:	08005451 	.word	0x08005451
 8005378:	6833      	ldr	r3, [r6, #0]
 800537a:	1d1a      	adds	r2, r3, #4
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6032      	str	r2, [r6, #0]
 8005380:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005384:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005388:	2301      	movs	r3, #1
 800538a:	e09e      	b.n	80054ca <_printf_i+0x1ea>
 800538c:	6833      	ldr	r3, [r6, #0]
 800538e:	6820      	ldr	r0, [r4, #0]
 8005390:	1d19      	adds	r1, r3, #4
 8005392:	6031      	str	r1, [r6, #0]
 8005394:	0606      	lsls	r6, r0, #24
 8005396:	d501      	bpl.n	800539c <_printf_i+0xbc>
 8005398:	681d      	ldr	r5, [r3, #0]
 800539a:	e003      	b.n	80053a4 <_printf_i+0xc4>
 800539c:	0645      	lsls	r5, r0, #25
 800539e:	d5fb      	bpl.n	8005398 <_printf_i+0xb8>
 80053a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053a4:	2d00      	cmp	r5, #0
 80053a6:	da03      	bge.n	80053b0 <_printf_i+0xd0>
 80053a8:	232d      	movs	r3, #45	@ 0x2d
 80053aa:	426d      	negs	r5, r5
 80053ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053b0:	230a      	movs	r3, #10
 80053b2:	4859      	ldr	r0, [pc, #356]	@ (8005518 <_printf_i+0x238>)
 80053b4:	e011      	b.n	80053da <_printf_i+0xfa>
 80053b6:	6821      	ldr	r1, [r4, #0]
 80053b8:	6833      	ldr	r3, [r6, #0]
 80053ba:	0608      	lsls	r0, r1, #24
 80053bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80053c0:	d402      	bmi.n	80053c8 <_printf_i+0xe8>
 80053c2:	0649      	lsls	r1, r1, #25
 80053c4:	bf48      	it	mi
 80053c6:	b2ad      	uxthmi	r5, r5
 80053c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80053ca:	6033      	str	r3, [r6, #0]
 80053cc:	bf14      	ite	ne
 80053ce:	230a      	movne	r3, #10
 80053d0:	2308      	moveq	r3, #8
 80053d2:	4851      	ldr	r0, [pc, #324]	@ (8005518 <_printf_i+0x238>)
 80053d4:	2100      	movs	r1, #0
 80053d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80053da:	6866      	ldr	r6, [r4, #4]
 80053dc:	2e00      	cmp	r6, #0
 80053de:	bfa8      	it	ge
 80053e0:	6821      	ldrge	r1, [r4, #0]
 80053e2:	60a6      	str	r6, [r4, #8]
 80053e4:	bfa4      	itt	ge
 80053e6:	f021 0104 	bicge.w	r1, r1, #4
 80053ea:	6021      	strge	r1, [r4, #0]
 80053ec:	b90d      	cbnz	r5, 80053f2 <_printf_i+0x112>
 80053ee:	2e00      	cmp	r6, #0
 80053f0:	d04b      	beq.n	800548a <_printf_i+0x1aa>
 80053f2:	4616      	mov	r6, r2
 80053f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80053f8:	fb03 5711 	mls	r7, r3, r1, r5
 80053fc:	5dc7      	ldrb	r7, [r0, r7]
 80053fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005402:	462f      	mov	r7, r5
 8005404:	42bb      	cmp	r3, r7
 8005406:	460d      	mov	r5, r1
 8005408:	d9f4      	bls.n	80053f4 <_printf_i+0x114>
 800540a:	2b08      	cmp	r3, #8
 800540c:	d10b      	bne.n	8005426 <_printf_i+0x146>
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	07df      	lsls	r7, r3, #31
 8005412:	d508      	bpl.n	8005426 <_printf_i+0x146>
 8005414:	6923      	ldr	r3, [r4, #16]
 8005416:	6861      	ldr	r1, [r4, #4]
 8005418:	4299      	cmp	r1, r3
 800541a:	bfde      	ittt	le
 800541c:	2330      	movle	r3, #48	@ 0x30
 800541e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005422:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005426:	1b92      	subs	r2, r2, r6
 8005428:	6122      	str	r2, [r4, #16]
 800542a:	464b      	mov	r3, r9
 800542c:	4621      	mov	r1, r4
 800542e:	4640      	mov	r0, r8
 8005430:	f8cd a000 	str.w	sl, [sp]
 8005434:	aa03      	add	r2, sp, #12
 8005436:	f7ff fee1 	bl	80051fc <_printf_common>
 800543a:	3001      	adds	r0, #1
 800543c:	d14a      	bne.n	80054d4 <_printf_i+0x1f4>
 800543e:	f04f 30ff 	mov.w	r0, #4294967295
 8005442:	b004      	add	sp, #16
 8005444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005448:	6823      	ldr	r3, [r4, #0]
 800544a:	f043 0320 	orr.w	r3, r3, #32
 800544e:	6023      	str	r3, [r4, #0]
 8005450:	2778      	movs	r7, #120	@ 0x78
 8005452:	4832      	ldr	r0, [pc, #200]	@ (800551c <_printf_i+0x23c>)
 8005454:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	6831      	ldr	r1, [r6, #0]
 800545c:	061f      	lsls	r7, r3, #24
 800545e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005462:	d402      	bmi.n	800546a <_printf_i+0x18a>
 8005464:	065f      	lsls	r7, r3, #25
 8005466:	bf48      	it	mi
 8005468:	b2ad      	uxthmi	r5, r5
 800546a:	6031      	str	r1, [r6, #0]
 800546c:	07d9      	lsls	r1, r3, #31
 800546e:	bf44      	itt	mi
 8005470:	f043 0320 	orrmi.w	r3, r3, #32
 8005474:	6023      	strmi	r3, [r4, #0]
 8005476:	b11d      	cbz	r5, 8005480 <_printf_i+0x1a0>
 8005478:	2310      	movs	r3, #16
 800547a:	e7ab      	b.n	80053d4 <_printf_i+0xf4>
 800547c:	4826      	ldr	r0, [pc, #152]	@ (8005518 <_printf_i+0x238>)
 800547e:	e7e9      	b.n	8005454 <_printf_i+0x174>
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	f023 0320 	bic.w	r3, r3, #32
 8005486:	6023      	str	r3, [r4, #0]
 8005488:	e7f6      	b.n	8005478 <_printf_i+0x198>
 800548a:	4616      	mov	r6, r2
 800548c:	e7bd      	b.n	800540a <_printf_i+0x12a>
 800548e:	6833      	ldr	r3, [r6, #0]
 8005490:	6825      	ldr	r5, [r4, #0]
 8005492:	1d18      	adds	r0, r3, #4
 8005494:	6961      	ldr	r1, [r4, #20]
 8005496:	6030      	str	r0, [r6, #0]
 8005498:	062e      	lsls	r6, r5, #24
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	d501      	bpl.n	80054a2 <_printf_i+0x1c2>
 800549e:	6019      	str	r1, [r3, #0]
 80054a0:	e002      	b.n	80054a8 <_printf_i+0x1c8>
 80054a2:	0668      	lsls	r0, r5, #25
 80054a4:	d5fb      	bpl.n	800549e <_printf_i+0x1be>
 80054a6:	8019      	strh	r1, [r3, #0]
 80054a8:	2300      	movs	r3, #0
 80054aa:	4616      	mov	r6, r2
 80054ac:	6123      	str	r3, [r4, #16]
 80054ae:	e7bc      	b.n	800542a <_printf_i+0x14a>
 80054b0:	6833      	ldr	r3, [r6, #0]
 80054b2:	2100      	movs	r1, #0
 80054b4:	1d1a      	adds	r2, r3, #4
 80054b6:	6032      	str	r2, [r6, #0]
 80054b8:	681e      	ldr	r6, [r3, #0]
 80054ba:	6862      	ldr	r2, [r4, #4]
 80054bc:	4630      	mov	r0, r6
 80054be:	f000 f849 	bl	8005554 <memchr>
 80054c2:	b108      	cbz	r0, 80054c8 <_printf_i+0x1e8>
 80054c4:	1b80      	subs	r0, r0, r6
 80054c6:	6060      	str	r0, [r4, #4]
 80054c8:	6863      	ldr	r3, [r4, #4]
 80054ca:	6123      	str	r3, [r4, #16]
 80054cc:	2300      	movs	r3, #0
 80054ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054d2:	e7aa      	b.n	800542a <_printf_i+0x14a>
 80054d4:	4632      	mov	r2, r6
 80054d6:	4649      	mov	r1, r9
 80054d8:	4640      	mov	r0, r8
 80054da:	6923      	ldr	r3, [r4, #16]
 80054dc:	47d0      	blx	sl
 80054de:	3001      	adds	r0, #1
 80054e0:	d0ad      	beq.n	800543e <_printf_i+0x15e>
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	079b      	lsls	r3, r3, #30
 80054e6:	d413      	bmi.n	8005510 <_printf_i+0x230>
 80054e8:	68e0      	ldr	r0, [r4, #12]
 80054ea:	9b03      	ldr	r3, [sp, #12]
 80054ec:	4298      	cmp	r0, r3
 80054ee:	bfb8      	it	lt
 80054f0:	4618      	movlt	r0, r3
 80054f2:	e7a6      	b.n	8005442 <_printf_i+0x162>
 80054f4:	2301      	movs	r3, #1
 80054f6:	4632      	mov	r2, r6
 80054f8:	4649      	mov	r1, r9
 80054fa:	4640      	mov	r0, r8
 80054fc:	47d0      	blx	sl
 80054fe:	3001      	adds	r0, #1
 8005500:	d09d      	beq.n	800543e <_printf_i+0x15e>
 8005502:	3501      	adds	r5, #1
 8005504:	68e3      	ldr	r3, [r4, #12]
 8005506:	9903      	ldr	r1, [sp, #12]
 8005508:	1a5b      	subs	r3, r3, r1
 800550a:	42ab      	cmp	r3, r5
 800550c:	dcf2      	bgt.n	80054f4 <_printf_i+0x214>
 800550e:	e7eb      	b.n	80054e8 <_printf_i+0x208>
 8005510:	2500      	movs	r5, #0
 8005512:	f104 0619 	add.w	r6, r4, #25
 8005516:	e7f5      	b.n	8005504 <_printf_i+0x224>
 8005518:	0800574b 	.word	0x0800574b
 800551c:	0800575c 	.word	0x0800575c

08005520 <memmove>:
 8005520:	4288      	cmp	r0, r1
 8005522:	b510      	push	{r4, lr}
 8005524:	eb01 0402 	add.w	r4, r1, r2
 8005528:	d902      	bls.n	8005530 <memmove+0x10>
 800552a:	4284      	cmp	r4, r0
 800552c:	4623      	mov	r3, r4
 800552e:	d807      	bhi.n	8005540 <memmove+0x20>
 8005530:	1e43      	subs	r3, r0, #1
 8005532:	42a1      	cmp	r1, r4
 8005534:	d008      	beq.n	8005548 <memmove+0x28>
 8005536:	f811 2b01 	ldrb.w	r2, [r1], #1
 800553a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800553e:	e7f8      	b.n	8005532 <memmove+0x12>
 8005540:	4601      	mov	r1, r0
 8005542:	4402      	add	r2, r0
 8005544:	428a      	cmp	r2, r1
 8005546:	d100      	bne.n	800554a <memmove+0x2a>
 8005548:	bd10      	pop	{r4, pc}
 800554a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800554e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005552:	e7f7      	b.n	8005544 <memmove+0x24>

08005554 <memchr>:
 8005554:	4603      	mov	r3, r0
 8005556:	b510      	push	{r4, lr}
 8005558:	b2c9      	uxtb	r1, r1
 800555a:	4402      	add	r2, r0
 800555c:	4293      	cmp	r3, r2
 800555e:	4618      	mov	r0, r3
 8005560:	d101      	bne.n	8005566 <memchr+0x12>
 8005562:	2000      	movs	r0, #0
 8005564:	e003      	b.n	800556e <memchr+0x1a>
 8005566:	7804      	ldrb	r4, [r0, #0]
 8005568:	3301      	adds	r3, #1
 800556a:	428c      	cmp	r4, r1
 800556c:	d1f6      	bne.n	800555c <memchr+0x8>
 800556e:	bd10      	pop	{r4, pc}

08005570 <_realloc_r>:
 8005570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005574:	4680      	mov	r8, r0
 8005576:	4615      	mov	r5, r2
 8005578:	460c      	mov	r4, r1
 800557a:	b921      	cbnz	r1, 8005586 <_realloc_r+0x16>
 800557c:	4611      	mov	r1, r2
 800557e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005582:	f7ff bb95 	b.w	8004cb0 <_malloc_r>
 8005586:	b92a      	cbnz	r2, 8005594 <_realloc_r+0x24>
 8005588:	f7ff fc98 	bl	8004ebc <_free_r>
 800558c:	2400      	movs	r4, #0
 800558e:	4620      	mov	r0, r4
 8005590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005594:	f000 f81a 	bl	80055cc <_malloc_usable_size_r>
 8005598:	4285      	cmp	r5, r0
 800559a:	4606      	mov	r6, r0
 800559c:	d802      	bhi.n	80055a4 <_realloc_r+0x34>
 800559e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80055a2:	d8f4      	bhi.n	800558e <_realloc_r+0x1e>
 80055a4:	4629      	mov	r1, r5
 80055a6:	4640      	mov	r0, r8
 80055a8:	f7ff fb82 	bl	8004cb0 <_malloc_r>
 80055ac:	4607      	mov	r7, r0
 80055ae:	2800      	cmp	r0, #0
 80055b0:	d0ec      	beq.n	800558c <_realloc_r+0x1c>
 80055b2:	42b5      	cmp	r5, r6
 80055b4:	462a      	mov	r2, r5
 80055b6:	4621      	mov	r1, r4
 80055b8:	bf28      	it	cs
 80055ba:	4632      	movcs	r2, r6
 80055bc:	f7ff fc70 	bl	8004ea0 <memcpy>
 80055c0:	4621      	mov	r1, r4
 80055c2:	4640      	mov	r0, r8
 80055c4:	f7ff fc7a 	bl	8004ebc <_free_r>
 80055c8:	463c      	mov	r4, r7
 80055ca:	e7e0      	b.n	800558e <_realloc_r+0x1e>

080055cc <_malloc_usable_size_r>:
 80055cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055d0:	1f18      	subs	r0, r3, #4
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	bfbc      	itt	lt
 80055d6:	580b      	ldrlt	r3, [r1, r0]
 80055d8:	18c0      	addlt	r0, r0, r3
 80055da:	4770      	bx	lr

080055dc <_init>:
 80055dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055de:	bf00      	nop
 80055e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055e2:	bc08      	pop	{r3}
 80055e4:	469e      	mov	lr, r3
 80055e6:	4770      	bx	lr

080055e8 <_fini>:
 80055e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ea:	bf00      	nop
 80055ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ee:	bc08      	pop	{r3}
 80055f0:	469e      	mov	lr, r3
 80055f2:	4770      	bx	lr
